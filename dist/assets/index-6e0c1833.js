var uu=Object.defineProperty;var cu=(e,t,r)=>t in e?uu(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r;var ve=(e,t,r)=>(cu(e,typeof t!="symbol"?t+"":t,r),r),Js=(e,t,r)=>{if(!t.has(e))throw TypeError("Cannot "+r)};var lt=(e,t,r)=>(Js(e,t,"read from private field"),r?r.call(e):t.get(e)),de=(e,t,r)=>{if(t.has(e))throw TypeError("Cannot add the same private member more than once");t instanceof WeakSet?t.add(e):t.set(e,r)},Jt=(e,t,r,n)=>(Js(e,t,"write to private field"),n?n.call(e,r):t.set(e,r),r);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))n(i);new MutationObserver(i=>{for(const s of i)if(s.type==="childList")for(const a of s.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&n(a)}).observe(document,{childList:!0,subtree:!0});function r(i){const s={};return i.integrity&&(s.integrity=i.integrity),i.referrerpolicy&&(s.referrerPolicy=i.referrerpolicy),i.crossorigin==="use-credentials"?s.credentials="include":i.crossorigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function n(i){if(i.ep)return;i.ep=!0;const s=r(i);fetch(i.href,s)}})();var Ur=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function lu(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function Qn(e){if(e.__esModule)return e;var t=e.default;if(typeof t=="function"){var r=function n(){if(this instanceof n){var i=[null];i.push.apply(i,arguments);var s=Function.bind.apply(t,i);return new s}return t.apply(this,arguments)};r.prototype=t.prototype}else r={};return Object.defineProperty(r,"__esModule",{value:!0}),Object.keys(e).forEach(function(n){var i=Object.getOwnPropertyDescriptor(e,n);Object.defineProperty(r,n,i.get?i:{enumerable:!0,get:function(){return e[n]}})}),r}var Ki={},hu={get exports(){return Ki},set exports(e){Ki=e}},Fn={},du={get exports(){return Fn},set exports(e){Fn=e}},ha=function(t,r){return function(){for(var i=new Array(arguments.length),s=0;s<i.length;s++)i[s]=arguments[s];return t.apply(r,i)}},pu=ha,bs=Object.prototype.toString,vs=function(e){return function(t){var r=bs.call(t);return e[r]||(e[r]=r.slice(8,-1).toLowerCase())}}(Object.create(null));function Pr(e){return e=e.toLowerCase(),function(r){return vs(r)===e}}function ws(e){return Array.isArray(e)}function Zn(e){return typeof e>"u"}function mu(e){return e!==null&&!Zn(e)&&e.constructor!==null&&!Zn(e.constructor)&&typeof e.constructor.isBuffer=="function"&&e.constructor.isBuffer(e)}var da=Pr("ArrayBuffer");function yu(e){var t;return typeof ArrayBuffer<"u"&&ArrayBuffer.isView?t=ArrayBuffer.isView(e):t=e&&e.buffer&&da(e.buffer),t}function bu(e){return typeof e=="string"}function vu(e){return typeof e=="number"}function pa(e){return e!==null&&typeof e=="object"}function zn(e){if(vs(e)!=="object")return!1;var t=Object.getPrototypeOf(e);return t===null||t===Object.prototype}var wu=Pr("Date"),gu=Pr("File"),xu=Pr("Blob"),Pu=Pr("FileList");function gs(e){return bs.call(e)==="[object Function]"}function Ou(e){return pa(e)&&gs(e.pipe)}function Nu(e){var t="[object FormData]";return e&&(typeof FormData=="function"&&e instanceof FormData||bs.call(e)===t||gs(e.toString)&&e.toString()===t)}var Eu=Pr("URLSearchParams");function Tu(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}function Mu(){return typeof navigator<"u"&&(navigator.product==="ReactNative"||navigator.product==="NativeScript"||navigator.product==="NS")?!1:typeof window<"u"&&typeof document<"u"}function xs(e,t){if(!(e===null||typeof e>"u"))if(typeof e!="object"&&(e=[e]),ws(e))for(var r=0,n=e.length;r<n;r++)t.call(null,e[r],r,e);else for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.call(null,e[i],i,e)}function Qi(){var e={};function t(i,s){zn(e[s])&&zn(i)?e[s]=Qi(e[s],i):zn(i)?e[s]=Qi({},i):ws(i)?e[s]=i.slice():e[s]=i}for(var r=0,n=arguments.length;r<n;r++)xs(arguments[r],t);return e}function zu(e,t,r){return xs(t,function(i,s){r&&typeof i=="function"?e[s]=pu(i,r):e[s]=i}),e}function ku(e){return e.charCodeAt(0)===65279&&(e=e.slice(1)),e}function Lu(e,t,r,n){e.prototype=Object.create(t.prototype,n),e.prototype.constructor=e,r&&Object.assign(e.prototype,r)}function Au(e,t,r){var n,i,s,a={};t=t||{};do{for(n=Object.getOwnPropertyNames(e),i=n.length;i-- >0;)s=n[i],a[s]||(t[s]=e[s],a[s]=!0);e=Object.getPrototypeOf(e)}while(e&&(!r||r(e,t))&&e!==Object.prototype);return t}function ju(e,t,r){e=String(e),(r===void 0||r>e.length)&&(r=e.length),r-=t.length;var n=e.indexOf(t,r);return n!==-1&&n===r}function Ru(e){if(!e)return null;var t=e.length;if(Zn(t))return null;for(var r=new Array(t);t-- >0;)r[t]=e[t];return r}var Su=function(e){return function(t){return e&&t instanceof e}}(typeof Uint8Array<"u"&&Object.getPrototypeOf(Uint8Array)),re={isArray:ws,isArrayBuffer:da,isBuffer:mu,isFormData:Nu,isArrayBufferView:yu,isString:bu,isNumber:vu,isObject:pa,isPlainObject:zn,isUndefined:Zn,isDate:wu,isFile:gu,isBlob:xu,isFunction:gs,isStream:Ou,isURLSearchParams:Eu,isStandardBrowserEnv:Mu,forEach:xs,merge:Qi,extend:zu,trim:Tu,stripBOM:ku,inherits:Lu,toFlatObject:Au,kindOf:vs,kindOfTest:Pr,endsWith:ju,toArray:Ru,isTypedArray:Su,isFileList:Pu},Or=re;function Ks(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}var ma=function(t,r,n){if(!r)return t;var i;if(n)i=n(r);else if(Or.isURLSearchParams(r))i=r.toString();else{var s=[];Or.forEach(r,function(y,w){y===null||typeof y>"u"||(Or.isArray(y)?w=w+"[]":y=[y],Or.forEach(y,function(T){Or.isDate(T)?T=T.toISOString():Or.isObject(T)&&(T=JSON.stringify(T)),s.push(Ks(w)+"="+Ks(T))}))}),i=s.join("&")}if(i){var a=t.indexOf("#");a!==-1&&(t=t.slice(0,a)),t+=(t.indexOf("?")===-1?"?":"&")+i}return t},Xu=re;function _n(){this.handlers=[]}_n.prototype.use=function(t,r,n){return this.handlers.push({fulfilled:t,rejected:r,synchronous:n?n.synchronous:!1,runWhen:n?n.runWhen:null}),this.handlers.length-1};_n.prototype.eject=function(t){this.handlers[t]&&(this.handlers[t]=null)};_n.prototype.forEach=function(t){Xu.forEach(this.handlers,function(n){n!==null&&t(n)})};var Uu=_n,Bu=re,Hu=function(t,r){Bu.forEach(t,function(i,s){s!==r&&s.toUpperCase()===r.toUpperCase()&&(t[r]=i,delete t[s])})},ya=re;function Br(e,t,r,n,i){Error.call(this),this.message=e,this.name="AxiosError",t&&(this.code=t),r&&(this.config=r),n&&(this.request=n),i&&(this.response=i)}ya.inherits(Br,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}}});var ba=Br.prototype,va={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED"].forEach(function(e){va[e]={value:e}});Object.defineProperties(Br,va);Object.defineProperty(ba,"isAxiosError",{value:!0});Br.from=function(e,t,r,n,i,s){var a=Object.create(ba);return ya.toFlatObject(e,a,function(y){return y!==Error.prototype}),Br.call(a,e.message,t,r,n,i),a.name=e.name,s&&Object.assign(a,s),a};var Dr=Br,wa={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},we=re;function Fu(e,t){t=t||new FormData;var r=[];function n(s){return s===null?"":we.isDate(s)?s.toISOString():we.isArrayBuffer(s)||we.isTypedArray(s)?typeof Blob=="function"?new Blob([s]):Buffer.from(s):s}function i(s,a){if(we.isPlainObject(s)||we.isArray(s)){if(r.indexOf(s)!==-1)throw Error("Circular reference detected in "+a);r.push(s),we.forEach(s,function(y,w){if(!we.isUndefined(y)){var x=a?a+"."+w:w,T;if(y&&!a&&typeof y=="object"){if(we.endsWith(w,"{}"))y=JSON.stringify(y);else if(we.endsWith(w,"[]")&&(T=we.toArray(y))){T.forEach(function(N){!we.isUndefined(N)&&t.append(x,n(N))});return}}i(y,x)}}),r.pop()}else t.append(a,n(s))}return i(e),t}var ga=Fu,Ei,Qs;function Zu(){if(Qs)return Ei;Qs=1;var e=Dr;return Ei=function(r,n,i){var s=i.config.validateStatus;!i.status||!s||s(i.status)?r(i):n(new e("Request failed with status code "+i.status,[e.ERR_BAD_REQUEST,e.ERR_BAD_RESPONSE][Math.floor(i.status/100)-4],i.config,i.request,i))},Ei}var Ti,_s;function Du(){if(_s)return Ti;_s=1;var e=re;return Ti=e.isStandardBrowserEnv()?function(){return{write:function(n,i,s,a,l,y){var w=[];w.push(n+"="+encodeURIComponent(i)),e.isNumber(s)&&w.push("expires="+new Date(s).toGMTString()),e.isString(a)&&w.push("path="+a),e.isString(l)&&w.push("domain="+l),y===!0&&w.push("secure"),document.cookie=w.join("; ")},read:function(n){var i=document.cookie.match(new RegExp("(^|;\\s*)("+n+")=([^;]*)"));return i?decodeURIComponent(i[3]):null},remove:function(n){this.write(n,"",Date.now()-864e5)}}}():function(){return{write:function(){},read:function(){return null},remove:function(){}}}(),Ti}var Cu=function(t){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t)},Iu=function(t,r){return r?t.replace(/\/+$/,"")+"/"+r.replace(/^\/+/,""):t},Vu=Cu,qu=Iu,xa=function(t,r){return t&&!Vu(r)?qu(t,r):r},Mi,$s;function Gu(){if($s)return Mi;$s=1;var e=re,t=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];return Mi=function(n){var i={},s,a,l;return n&&e.forEach(n.split(`
`),function(w){if(l=w.indexOf(":"),s=e.trim(w.substr(0,l)).toLowerCase(),a=e.trim(w.substr(l+1)),s){if(i[s]&&t.indexOf(s)>=0)return;s==="set-cookie"?i[s]=(i[s]?i[s]:[]).concat([a]):i[s]=i[s]?i[s]+", "+a:a}}),i},Mi}var zi,to;function Wu(){if(to)return zi;to=1;var e=re;return zi=e.isStandardBrowserEnv()?function(){var r=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a"),i;function s(a){var l=a;return r&&(n.setAttribute("href",l),l=n.href),n.setAttribute("href",l),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:n.pathname.charAt(0)==="/"?n.pathname:"/"+n.pathname}}return i=s(window.location.href),function(l){var y=e.isString(l)?s(l):l;return y.protocol===i.protocol&&y.host===i.host}}():function(){return function(){return!0}}(),zi}var ki,eo;function $n(){if(eo)return ki;eo=1;var e=Dr,t=re;function r(n){e.call(this,n??"canceled",e.ERR_CANCELED),this.name="CanceledError"}return t.inherits(r,e,{__CANCEL__:!0}),ki=r,ki}var Li,ro;function Yu(){return ro||(ro=1,Li=function(t){var r=/^([-+\w]{1,25})(:?\/\/|:)/.exec(t);return r&&r[1]||""}),Li}var Ai,no;function io(){if(no)return Ai;no=1;var e=re,t=Zu(),r=Du(),n=ma,i=xa,s=Gu(),a=Wu(),l=wa,y=Dr,w=$n(),x=Yu();return Ai=function(N){return new Promise(function(U,Y){var rt=N.data,ft=N.headers,$=N.responseType,et;function S(){N.cancelToken&&N.cancelToken.unsubscribe(et),N.signal&&N.signal.removeEventListener("abort",et)}e.isFormData(rt)&&e.isStandardBrowserEnv()&&delete ft["Content-Type"];var A=new XMLHttpRequest;if(N.auth){var q=N.auth.username||"",tt=N.auth.password?unescape(encodeURIComponent(N.auth.password)):"";ft.Authorization="Basic "+btoa(q+":"+tt)}var ut=i(N.baseURL,N.url);A.open(N.method.toUpperCase(),n(ut,N.params,N.paramsSerializer),!0),A.timeout=N.timeout;function bt(){if(A){var B="getAllResponseHeaders"in A?s(A.getAllResponseHeaders()):null,m=!$||$==="text"||$==="json"?A.responseText:A.response,o={data:m,status:A.status,statusText:A.statusText,headers:B,config:N,request:A};t(function(h){U(h),S()},function(h){Y(h),S()},o),A=null}}if("onloadend"in A?A.onloadend=bt:A.onreadystatechange=function(){!A||A.readyState!==4||A.status===0&&!(A.responseURL&&A.responseURL.indexOf("file:")===0)||setTimeout(bt)},A.onabort=function(){A&&(Y(new y("Request aborted",y.ECONNABORTED,N,A)),A=null)},A.onerror=function(){Y(new y("Network Error",y.ERR_NETWORK,N,A,A)),A=null},A.ontimeout=function(){var m=N.timeout?"timeout of "+N.timeout+"ms exceeded":"timeout exceeded",o=N.transitional||l;N.timeoutErrorMessage&&(m=N.timeoutErrorMessage),Y(new y(m,o.clarifyTimeoutError?y.ETIMEDOUT:y.ECONNABORTED,N,A)),A=null},e.isStandardBrowserEnv()){var W=(N.withCredentials||a(ut))&&N.xsrfCookieName?r.read(N.xsrfCookieName):void 0;W&&(ft[N.xsrfHeaderName]=W)}"setRequestHeader"in A&&e.forEach(ft,function(m,o){typeof rt>"u"&&o.toLowerCase()==="content-type"?delete ft[o]:A.setRequestHeader(o,m)}),e.isUndefined(N.withCredentials)||(A.withCredentials=!!N.withCredentials),$&&$!=="json"&&(A.responseType=N.responseType),typeof N.onDownloadProgress=="function"&&A.addEventListener("progress",N.onDownloadProgress),typeof N.onUploadProgress=="function"&&A.upload&&A.upload.addEventListener("progress",N.onUploadProgress),(N.cancelToken||N.signal)&&(et=function(B){A&&(Y(!B||B&&B.type?new w:B),A.abort(),A=null)},N.cancelToken&&N.cancelToken.subscribe(et),N.signal&&(N.signal.aborted?et():N.signal.addEventListener("abort",et))),rt||(rt=null);var Z=x(ut);if(Z&&["http","https","file"].indexOf(Z)===-1){Y(new y("Unsupported protocol "+Z+":",y.ERR_BAD_REQUEST,N));return}A.send(rt)})},Ai}var ji,so;function Ju(){return so||(so=1,ji=null),ji}var te=re,oo=Hu,ao=Dr,Ku=wa,Qu=ga,_u={"Content-Type":"application/x-www-form-urlencoded"};function fo(e,t){!te.isUndefined(e)&&te.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}function $u(){var e;return(typeof XMLHttpRequest<"u"||typeof process<"u"&&Object.prototype.toString.call(process)==="[object process]")&&(e=io()),e}function tc(e,t,r){if(te.isString(e))try{return(t||JSON.parse)(e),te.trim(e)}catch(n){if(n.name!=="SyntaxError")throw n}return(r||JSON.stringify)(e)}var ti={transitional:Ku,adapter:$u(),transformRequest:[function(t,r){if(oo(r,"Accept"),oo(r,"Content-Type"),te.isFormData(t)||te.isArrayBuffer(t)||te.isBuffer(t)||te.isStream(t)||te.isFile(t)||te.isBlob(t))return t;if(te.isArrayBufferView(t))return t.buffer;if(te.isURLSearchParams(t))return fo(r,"application/x-www-form-urlencoded;charset=utf-8"),t.toString();var n=te.isObject(t),i=r&&r["Content-Type"],s;if((s=te.isFileList(t))||n&&i==="multipart/form-data"){var a=this.env&&this.env.FormData;return Qu(s?{"files[]":t}:t,a&&new a)}else if(n||i==="application/json")return fo(r,"application/json"),tc(t);return t}],transformResponse:[function(t){var r=this.transitional||ti.transitional,n=r&&r.silentJSONParsing,i=r&&r.forcedJSONParsing,s=!n&&this.responseType==="json";if(s||i&&te.isString(t)&&t.length)try{return JSON.parse(t)}catch(a){if(s)throw a.name==="SyntaxError"?ao.from(a,ao.ERR_BAD_RESPONSE,this,null,this.response):a}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:Ju()},validateStatus:function(t){return t>=200&&t<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};te.forEach(["delete","get","head"],function(t){ti.headers[t]={}});te.forEach(["post","put","patch"],function(t){ti.headers[t]=te.merge(_u)});var Ps=ti,ec=re,rc=Ps,nc=function(t,r,n){var i=this||rc;return ec.forEach(n,function(a){t=a.call(i,t,r)}),t},Ri,uo;function Pa(){return uo||(uo=1,Ri=function(t){return!!(t&&t.__CANCEL__)}),Ri}var co=re,Si=nc,ic=Pa(),sc=Ps,oc=$n();function Xi(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new oc}var ac=function(t){Xi(t),t.headers=t.headers||{},t.data=Si.call(t,t.data,t.headers,t.transformRequest),t.headers=co.merge(t.headers.common||{},t.headers[t.method]||{},t.headers),co.forEach(["delete","get","head","post","put","patch","common"],function(i){delete t.headers[i]});var r=t.adapter||sc.adapter;return r(t).then(function(i){return Xi(t),i.data=Si.call(t,i.data,i.headers,t.transformResponse),i},function(i){return ic(i)||(Xi(t),i&&i.response&&(i.response.data=Si.call(t,i.response.data,i.response.headers,t.transformResponse))),Promise.reject(i)})},ue=re,Oa=function(t,r){r=r||{};var n={};function i(x,T){return ue.isPlainObject(x)&&ue.isPlainObject(T)?ue.merge(x,T):ue.isPlainObject(T)?ue.merge({},T):ue.isArray(T)?T.slice():T}function s(x){if(ue.isUndefined(r[x])){if(!ue.isUndefined(t[x]))return i(void 0,t[x])}else return i(t[x],r[x])}function a(x){if(!ue.isUndefined(r[x]))return i(void 0,r[x])}function l(x){if(ue.isUndefined(r[x])){if(!ue.isUndefined(t[x]))return i(void 0,t[x])}else return i(void 0,r[x])}function y(x){if(x in r)return i(t[x],r[x]);if(x in t)return i(void 0,t[x])}var w={url:a,method:a,data:a,baseURL:l,transformRequest:l,transformResponse:l,paramsSerializer:l,timeout:l,timeoutMessage:l,withCredentials:l,adapter:l,responseType:l,xsrfCookieName:l,xsrfHeaderName:l,onUploadProgress:l,onDownloadProgress:l,decompress:l,maxContentLength:l,maxBodyLength:l,beforeRedirect:l,transport:l,httpAgent:l,httpsAgent:l,cancelToken:l,socketPath:l,responseEncoding:l,validateStatus:y};return ue.forEach(Object.keys(t).concat(Object.keys(r)),function(T){var N=w[T]||s,j=N(T);ue.isUndefined(j)&&N!==y||(n[T]=j)}),n},Ui,lo;function Na(){return lo||(lo=1,Ui={version:"0.27.2"}),Ui}var fc=Na().version,Qe=Dr,Os={};["object","boolean","number","function","string","symbol"].forEach(function(e,t){Os[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}});var ho={};Os.transitional=function(t,r,n){function i(s,a){return"[Axios v"+fc+"] Transitional option '"+s+"'"+a+(n?". "+n:"")}return function(s,a,l){if(t===!1)throw new Qe(i(a," has been removed"+(r?" in "+r:"")),Qe.ERR_DEPRECATED);return r&&!ho[a]&&(ho[a]=!0,console.warn(i(a," has been deprecated since v"+r+" and will be removed in the near future"))),t?t(s,a,l):!0}};function uc(e,t,r){if(typeof e!="object")throw new Qe("options must be an object",Qe.ERR_BAD_OPTION_VALUE);for(var n=Object.keys(e),i=n.length;i-- >0;){var s=n[i],a=t[s];if(a){var l=e[s],y=l===void 0||a(l,s,e);if(y!==!0)throw new Qe("option "+s+" must be "+y,Qe.ERR_BAD_OPTION_VALUE);continue}if(r!==!0)throw new Qe("Unknown option "+s,Qe.ERR_BAD_OPTION)}}var cc={assertOptions:uc,validators:Os},Ea=re,lc=ma,po=Uu,mo=ac,ei=Oa,hc=xa,Ta=cc,Nr=Ta.validators;function Hr(e){this.defaults=e,this.interceptors={request:new po,response:new po}}Hr.prototype.request=function(t,r){typeof t=="string"?(r=r||{},r.url=t):r=t||{},r=ei(this.defaults,r),r.method?r.method=r.method.toLowerCase():this.defaults.method?r.method=this.defaults.method.toLowerCase():r.method="get";var n=r.transitional;n!==void 0&&Ta.assertOptions(n,{silentJSONParsing:Nr.transitional(Nr.boolean),forcedJSONParsing:Nr.transitional(Nr.boolean),clarifyTimeoutError:Nr.transitional(Nr.boolean)},!1);var i=[],s=!0;this.interceptors.request.forEach(function(j){typeof j.runWhen=="function"&&j.runWhen(r)===!1||(s=s&&j.synchronous,i.unshift(j.fulfilled,j.rejected))});var a=[];this.interceptors.response.forEach(function(j){a.push(j.fulfilled,j.rejected)});var l;if(!s){var y=[mo,void 0];for(Array.prototype.unshift.apply(y,i),y=y.concat(a),l=Promise.resolve(r);y.length;)l=l.then(y.shift(),y.shift());return l}for(var w=r;i.length;){var x=i.shift(),T=i.shift();try{w=x(w)}catch(N){T(N);break}}try{l=mo(w)}catch(N){return Promise.reject(N)}for(;a.length;)l=l.then(a.shift(),a.shift());return l};Hr.prototype.getUri=function(t){t=ei(this.defaults,t);var r=hc(t.baseURL,t.url);return lc(r,t.params,t.paramsSerializer)};Ea.forEach(["delete","get","head","options"],function(t){Hr.prototype[t]=function(r,n){return this.request(ei(n||{},{method:t,url:r,data:(n||{}).data}))}});Ea.forEach(["post","put","patch"],function(t){function r(n){return function(s,a,l){return this.request(ei(l||{},{method:t,headers:n?{"Content-Type":"multipart/form-data"}:{},url:s,data:a}))}}Hr.prototype[t]=r(),Hr.prototype[t+"Form"]=r(!0)});var dc=Hr,Bi,yo;function pc(){if(yo)return Bi;yo=1;var e=$n();function t(r){if(typeof r!="function")throw new TypeError("executor must be a function.");var n;this.promise=new Promise(function(a){n=a});var i=this;this.promise.then(function(s){if(i._listeners){var a,l=i._listeners.length;for(a=0;a<l;a++)i._listeners[a](s);i._listeners=null}}),this.promise.then=function(s){var a,l=new Promise(function(y){i.subscribe(y),a=y}).then(s);return l.cancel=function(){i.unsubscribe(a)},l},r(function(a){i.reason||(i.reason=new e(a),n(i.reason))})}return t.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},t.prototype.subscribe=function(n){if(this.reason){n(this.reason);return}this._listeners?this._listeners.push(n):this._listeners=[n]},t.prototype.unsubscribe=function(n){if(this._listeners){var i=this._listeners.indexOf(n);i!==-1&&this._listeners.splice(i,1)}},t.source=function(){var n,i=new t(function(a){n=a});return{token:i,cancel:n}},Bi=t,Bi}var Hi,bo;function mc(){return bo||(bo=1,Hi=function(t){return function(n){return t.apply(null,n)}}),Hi}var Fi,vo;function yc(){if(vo)return Fi;vo=1;var e=re;return Fi=function(r){return e.isObject(r)&&r.isAxiosError===!0},Fi}var wo=re,bc=ha,kn=dc,vc=Oa,wc=Ps;function Ma(e){var t=new kn(e),r=bc(kn.prototype.request,t);return wo.extend(r,kn.prototype,t),wo.extend(r,t),r.create=function(i){return Ma(vc(e,i))},r}var fe=Ma(wc);fe.Axios=kn;fe.CanceledError=$n();fe.CancelToken=pc();fe.isCancel=Pa();fe.VERSION=Na().version;fe.toFormData=ga;fe.AxiosError=Dr;fe.Cancel=fe.CanceledError;fe.all=function(t){return Promise.all(t)};fe.spread=mc();fe.isAxiosError=yc();du.exports=fe;Fn.default=fe;(function(e){e.exports=Fn})(hu);const gc=lu(Ki);var Ns={},_i={},xc={get exports(){return _i},set exports(e){_i=e}};const Pc={},Oc=Object.freeze(Object.defineProperty({__proto__:null,default:Pc},Symbol.toStringTag,{value:"Module"})),Nc=Qn(Oc);(function(e){(function(t,r){function n(m,o){if(!m)throw new Error(o||"Assertion failed")}function i(m,o){m.super_=o;var u=function(){};u.prototype=o.prototype,m.prototype=new u,m.prototype.constructor=m}function s(m,o,u){if(s.isBN(m))return m;this.negative=0,this.words=null,this.length=0,this.red=null,m!==null&&((o==="le"||o==="be")&&(u=o,o=10),this._init(m||0,o||10,u||"be"))}typeof t=="object"?t.exports=s:r.BN=s,s.BN=s,s.wordSize=26;var a;try{typeof window<"u"&&typeof window.Buffer<"u"?a=window.Buffer:a=Nc.Buffer}catch{}s.isBN=function(o){return o instanceof s?!0:o!==null&&typeof o=="object"&&o.constructor.wordSize===s.wordSize&&Array.isArray(o.words)},s.max=function(o,u){return o.cmp(u)>0?o:u},s.min=function(o,u){return o.cmp(u)<0?o:u},s.prototype._init=function(o,u,h){if(typeof o=="number")return this._initNumber(o,u,h);if(typeof o=="object")return this._initArray(o,u,h);u==="hex"&&(u=16),n(u===(u|0)&&u>=2&&u<=36),o=o.toString().replace(/\s+/g,"");var p=0;o[0]==="-"&&(p++,this.negative=1),p<o.length&&(u===16?this._parseHex(o,p,h):(this._parseBase(o,u,p),h==="le"&&this._initArray(this.toArray(),u,h)))},s.prototype._initNumber=function(o,u,h){o<0&&(this.negative=1,o=-o),o<67108864?(this.words=[o&67108863],this.length=1):o<4503599627370496?(this.words=[o&67108863,o/67108864&67108863],this.length=2):(n(o<9007199254740992),this.words=[o&67108863,o/67108864&67108863,1],this.length=3),h==="le"&&this._initArray(this.toArray(),u,h)},s.prototype._initArray=function(o,u,h){if(n(typeof o.length=="number"),o.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(o.length/3),this.words=new Array(this.length);for(var p=0;p<this.length;p++)this.words[p]=0;var v,g,O=0;if(h==="be")for(p=o.length-1,v=0;p>=0;p-=3)g=o[p]|o[p-1]<<8|o[p-2]<<16,this.words[v]|=g<<O&67108863,this.words[v+1]=g>>>26-O&67108863,O+=24,O>=26&&(O-=26,v++);else if(h==="le")for(p=0,v=0;p<o.length;p+=3)g=o[p]|o[p+1]<<8|o[p+2]<<16,this.words[v]|=g<<O&67108863,this.words[v+1]=g>>>26-O&67108863,O+=24,O>=26&&(O-=26,v++);return this._strip()};function l(m,o){var u=m.charCodeAt(o);if(u>=48&&u<=57)return u-48;if(u>=65&&u<=70)return u-55;if(u>=97&&u<=102)return u-87;n(!1,"Invalid character in "+m)}function y(m,o,u){var h=l(m,u);return u-1>=o&&(h|=l(m,u-1)<<4),h}s.prototype._parseHex=function(o,u,h){this.length=Math.ceil((o.length-u)/6),this.words=new Array(this.length);for(var p=0;p<this.length;p++)this.words[p]=0;var v=0,g=0,O;if(h==="be")for(p=o.length-1;p>=u;p-=2)O=y(o,u,p)<<v,this.words[g]|=O&67108863,v>=18?(v-=18,g+=1,this.words[g]|=O>>>26):v+=8;else{var d=o.length-u;for(p=d%2===0?u+1:u;p<o.length;p+=2)O=y(o,u,p)<<v,this.words[g]|=O&67108863,v>=18?(v-=18,g+=1,this.words[g]|=O>>>26):v+=8}this._strip()};function w(m,o,u,h){for(var p=0,v=0,g=Math.min(m.length,u),O=o;O<g;O++){var d=m.charCodeAt(O)-48;p*=h,d>=49?v=d-49+10:d>=17?v=d-17+10:v=d,n(d>=0&&v<h,"Invalid character"),p+=v}return p}s.prototype._parseBase=function(o,u,h){this.words=[0],this.length=1;for(var p=0,v=1;v<=67108863;v*=u)p++;p--,v=v/u|0;for(var g=o.length-h,O=g%p,d=Math.min(g,g-O)+h,f=0,b=h;b<d;b+=p)f=w(o,b,b+p,u),this.imuln(v),this.words[0]+f<67108864?this.words[0]+=f:this._iaddn(f);if(O!==0){var I=1;for(f=w(o,b,o.length,u),b=0;b<O;b++)I*=u;this.imuln(I),this.words[0]+f<67108864?this.words[0]+=f:this._iaddn(f)}this._strip()},s.prototype.copy=function(o){o.words=new Array(this.length);for(var u=0;u<this.length;u++)o.words[u]=this.words[u];o.length=this.length,o.negative=this.negative,o.red=this.red};function x(m,o){m.words=o.words,m.length=o.length,m.negative=o.negative,m.red=o.red}if(s.prototype._move=function(o){x(o,this)},s.prototype.clone=function(){var o=new s(null);return this.copy(o),o},s.prototype._expand=function(o){for(;this.length<o;)this.words[this.length++]=0;return this},s.prototype._strip=function(){for(;this.length>1&&this.words[this.length-1]===0;)this.length--;return this._normSign()},s.prototype._normSign=function(){return this.length===1&&this.words[0]===0&&(this.negative=0),this},typeof Symbol<"u"&&typeof Symbol.for=="function")try{s.prototype[Symbol.for("nodejs.util.inspect.custom")]=T}catch{s.prototype.inspect=T}else s.prototype.inspect=T;function T(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"}var N=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],j=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],U=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];s.prototype.toString=function(o,u){o=o||10,u=u|0||1;var h;if(o===16||o==="hex"){h="";for(var p=0,v=0,g=0;g<this.length;g++){var O=this.words[g],d=((O<<p|v)&16777215).toString(16);v=O>>>24-p&16777215,p+=2,p>=26&&(p-=26,g--),v!==0||g!==this.length-1?h=N[6-d.length]+d+h:h=d+h}for(v!==0&&(h=v.toString(16)+h);h.length%u!==0;)h="0"+h;return this.negative!==0&&(h="-"+h),h}if(o===(o|0)&&o>=2&&o<=36){var f=j[o],b=U[o];h="";var I=this.clone();for(I.negative=0;!I.isZero();){var c=I.modrn(b).toString(o);I=I.idivn(b),I.isZero()?h=c+h:h=N[f-c.length]+c+h}for(this.isZero()&&(h="0"+h);h.length%u!==0;)h="0"+h;return this.negative!==0&&(h="-"+h),h}n(!1,"Base should be between 2 and 36")},s.prototype.toNumber=function(){var o=this.words[0];return this.length===2?o+=this.words[1]*67108864:this.length===3&&this.words[2]===1?o+=4503599627370496+this.words[1]*67108864:this.length>2&&n(!1,"Number can only safely store up to 53 bits"),this.negative!==0?-o:o},s.prototype.toJSON=function(){return this.toString(16,2)},a&&(s.prototype.toBuffer=function(o,u){return this.toArrayLike(a,o,u)}),s.prototype.toArray=function(o,u){return this.toArrayLike(Array,o,u)};var Y=function(o,u){return o.allocUnsafe?o.allocUnsafe(u):new o(u)};s.prototype.toArrayLike=function(o,u,h){this._strip();var p=this.byteLength(),v=h||Math.max(1,p);n(p<=v,"byte array longer than desired length"),n(v>0,"Requested array length <= 0");var g=Y(o,v),O=u==="le"?"LE":"BE";return this["_toArrayLike"+O](g,p),g},s.prototype._toArrayLikeLE=function(o,u){for(var h=0,p=0,v=0,g=0;v<this.length;v++){var O=this.words[v]<<g|p;o[h++]=O&255,h<o.length&&(o[h++]=O>>8&255),h<o.length&&(o[h++]=O>>16&255),g===6?(h<o.length&&(o[h++]=O>>24&255),p=0,g=0):(p=O>>>24,g+=2)}if(h<o.length)for(o[h++]=p;h<o.length;)o[h++]=0},s.prototype._toArrayLikeBE=function(o,u){for(var h=o.length-1,p=0,v=0,g=0;v<this.length;v++){var O=this.words[v]<<g|p;o[h--]=O&255,h>=0&&(o[h--]=O>>8&255),h>=0&&(o[h--]=O>>16&255),g===6?(h>=0&&(o[h--]=O>>24&255),p=0,g=0):(p=O>>>24,g+=2)}if(h>=0)for(o[h--]=p;h>=0;)o[h--]=0},Math.clz32?s.prototype._countBits=function(o){return 32-Math.clz32(o)}:s.prototype._countBits=function(o){var u=o,h=0;return u>=4096&&(h+=13,u>>>=13),u>=64&&(h+=7,u>>>=7),u>=8&&(h+=4,u>>>=4),u>=2&&(h+=2,u>>>=2),h+u},s.prototype._zeroBits=function(o){if(o===0)return 26;var u=o,h=0;return u&8191||(h+=13,u>>>=13),u&127||(h+=7,u>>>=7),u&15||(h+=4,u>>>=4),u&3||(h+=2,u>>>=2),u&1||h++,h},s.prototype.bitLength=function(){var o=this.words[this.length-1],u=this._countBits(o);return(this.length-1)*26+u};function rt(m){for(var o=new Array(m.bitLength()),u=0;u<o.length;u++){var h=u/26|0,p=u%26;o[u]=m.words[h]>>>p&1}return o}s.prototype.zeroBits=function(){if(this.isZero())return 0;for(var o=0,u=0;u<this.length;u++){var h=this._zeroBits(this.words[u]);if(o+=h,h!==26)break}return o},s.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},s.prototype.toTwos=function(o){return this.negative!==0?this.abs().inotn(o).iaddn(1):this.clone()},s.prototype.fromTwos=function(o){return this.testn(o-1)?this.notn(o).iaddn(1).ineg():this.clone()},s.prototype.isNeg=function(){return this.negative!==0},s.prototype.neg=function(){return this.clone().ineg()},s.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},s.prototype.iuor=function(o){for(;this.length<o.length;)this.words[this.length++]=0;for(var u=0;u<o.length;u++)this.words[u]=this.words[u]|o.words[u];return this._strip()},s.prototype.ior=function(o){return n((this.negative|o.negative)===0),this.iuor(o)},s.prototype.or=function(o){return this.length>o.length?this.clone().ior(o):o.clone().ior(this)},s.prototype.uor=function(o){return this.length>o.length?this.clone().iuor(o):o.clone().iuor(this)},s.prototype.iuand=function(o){var u;this.length>o.length?u=o:u=this;for(var h=0;h<u.length;h++)this.words[h]=this.words[h]&o.words[h];return this.length=u.length,this._strip()},s.prototype.iand=function(o){return n((this.negative|o.negative)===0),this.iuand(o)},s.prototype.and=function(o){return this.length>o.length?this.clone().iand(o):o.clone().iand(this)},s.prototype.uand=function(o){return this.length>o.length?this.clone().iuand(o):o.clone().iuand(this)},s.prototype.iuxor=function(o){var u,h;this.length>o.length?(u=this,h=o):(u=o,h=this);for(var p=0;p<h.length;p++)this.words[p]=u.words[p]^h.words[p];if(this!==u)for(;p<u.length;p++)this.words[p]=u.words[p];return this.length=u.length,this._strip()},s.prototype.ixor=function(o){return n((this.negative|o.negative)===0),this.iuxor(o)},s.prototype.xor=function(o){return this.length>o.length?this.clone().ixor(o):o.clone().ixor(this)},s.prototype.uxor=function(o){return this.length>o.length?this.clone().iuxor(o):o.clone().iuxor(this)},s.prototype.inotn=function(o){n(typeof o=="number"&&o>=0);var u=Math.ceil(o/26)|0,h=o%26;this._expand(u),h>0&&u--;for(var p=0;p<u;p++)this.words[p]=~this.words[p]&67108863;return h>0&&(this.words[p]=~this.words[p]&67108863>>26-h),this._strip()},s.prototype.notn=function(o){return this.clone().inotn(o)},s.prototype.setn=function(o,u){n(typeof o=="number"&&o>=0);var h=o/26|0,p=o%26;return this._expand(h+1),u?this.words[h]=this.words[h]|1<<p:this.words[h]=this.words[h]&~(1<<p),this._strip()},s.prototype.iadd=function(o){var u;if(this.negative!==0&&o.negative===0)return this.negative=0,u=this.isub(o),this.negative^=1,this._normSign();if(this.negative===0&&o.negative!==0)return o.negative=0,u=this.isub(o),o.negative=1,u._normSign();var h,p;this.length>o.length?(h=this,p=o):(h=o,p=this);for(var v=0,g=0;g<p.length;g++)u=(h.words[g]|0)+(p.words[g]|0)+v,this.words[g]=u&67108863,v=u>>>26;for(;v!==0&&g<h.length;g++)u=(h.words[g]|0)+v,this.words[g]=u&67108863,v=u>>>26;if(this.length=h.length,v!==0)this.words[this.length]=v,this.length++;else if(h!==this)for(;g<h.length;g++)this.words[g]=h.words[g];return this},s.prototype.add=function(o){var u;return o.negative!==0&&this.negative===0?(o.negative=0,u=this.sub(o),o.negative^=1,u):o.negative===0&&this.negative!==0?(this.negative=0,u=o.sub(this),this.negative=1,u):this.length>o.length?this.clone().iadd(o):o.clone().iadd(this)},s.prototype.isub=function(o){if(o.negative!==0){o.negative=0;var u=this.iadd(o);return o.negative=1,u._normSign()}else if(this.negative!==0)return this.negative=0,this.iadd(o),this.negative=1,this._normSign();var h=this.cmp(o);if(h===0)return this.negative=0,this.length=1,this.words[0]=0,this;var p,v;h>0?(p=this,v=o):(p=o,v=this);for(var g=0,O=0;O<v.length;O++)u=(p.words[O]|0)-(v.words[O]|0)+g,g=u>>26,this.words[O]=u&67108863;for(;g!==0&&O<p.length;O++)u=(p.words[O]|0)+g,g=u>>26,this.words[O]=u&67108863;if(g===0&&O<p.length&&p!==this)for(;O<p.length;O++)this.words[O]=p.words[O];return this.length=Math.max(this.length,O),p!==this&&(this.negative=1),this._strip()},s.prototype.sub=function(o){return this.clone().isub(o)};function ft(m,o,u){u.negative=o.negative^m.negative;var h=m.length+o.length|0;u.length=h,h=h-1|0;var p=m.words[0]|0,v=o.words[0]|0,g=p*v,O=g&67108863,d=g/67108864|0;u.words[0]=O;for(var f=1;f<h;f++){for(var b=d>>>26,I=d&67108863,c=Math.min(f,o.length-1),E=Math.max(0,f-m.length+1);E<=c;E++){var k=f-E|0;p=m.words[k]|0,v=o.words[E]|0,g=p*v+I,b+=g/67108864|0,I=g&67108863}u.words[f]=I|0,d=b|0}return d!==0?u.words[f]=d|0:u.length--,u._strip()}var $=function(o,u,h){var p=o.words,v=u.words,g=h.words,O=0,d,f,b,I=p[0]|0,c=I&8191,E=I>>>13,k=p[1]|0,L=k&8191,X=k>>>13,_=p[2]|0,D=_&8191,F=_>>>13,Mt=p[3]|0,V=Mt&8191,st=Mt>>>13,je=p[4]|0,Pt=je&8191,Ot=je>>>13,be=p[5]|0,Nt=be&8191,Et=be>>>13,Re=p[6]|0,vt=Re&8191,P=Re>>>13,M=p[7]|0,z=M&8191,R=M>>>13,J=p[8]|0,ot=J&8191,G=J>>>13,it=p[9]|0,H=it&8191,K=it>>>13,ct=v[0]|0,mt=ct&8191,gt=ct>>>13,sr=v[1]|0,zt=sr&8191,kt=sr>>>13,or=v[2]|0,Lt=or&8191,At=or>>>13,ar=v[3]|0,jt=ar&8191,Rt=ar>>>13,fr=v[4]|0,St=fr&8191,Xt=fr>>>13,ur=v[5]|0,Ut=ur&8191,Bt=ur>>>13,cr=v[6]|0,Ht=cr&8191,Ft=cr>>>13,lr=v[7]|0,Zt=lr&8191,Dt=lr>>>13,hr=v[8]|0,Ct=hr&8191,It=hr>>>13,dr=v[9]|0,Vt=dr&8191,qt=dr>>>13;h.negative=o.negative^u.negative,h.length=19,d=Math.imul(c,mt),f=Math.imul(c,gt),f=f+Math.imul(E,mt)|0,b=Math.imul(E,gt);var Ve=(O+d|0)+((f&8191)<<13)|0;O=(b+(f>>>13)|0)+(Ve>>>26)|0,Ve&=67108863,d=Math.imul(L,mt),f=Math.imul(L,gt),f=f+Math.imul(X,mt)|0,b=Math.imul(X,gt),d=d+Math.imul(c,zt)|0,f=f+Math.imul(c,kt)|0,f=f+Math.imul(E,zt)|0,b=b+Math.imul(E,kt)|0;var qe=(O+d|0)+((f&8191)<<13)|0;O=(b+(f>>>13)|0)+(qe>>>26)|0,qe&=67108863,d=Math.imul(D,mt),f=Math.imul(D,gt),f=f+Math.imul(F,mt)|0,b=Math.imul(F,gt),d=d+Math.imul(L,zt)|0,f=f+Math.imul(L,kt)|0,f=f+Math.imul(X,zt)|0,b=b+Math.imul(X,kt)|0,d=d+Math.imul(c,Lt)|0,f=f+Math.imul(c,At)|0,f=f+Math.imul(E,Lt)|0,b=b+Math.imul(E,At)|0;var Ge=(O+d|0)+((f&8191)<<13)|0;O=(b+(f>>>13)|0)+(Ge>>>26)|0,Ge&=67108863,d=Math.imul(V,mt),f=Math.imul(V,gt),f=f+Math.imul(st,mt)|0,b=Math.imul(st,gt),d=d+Math.imul(D,zt)|0,f=f+Math.imul(D,kt)|0,f=f+Math.imul(F,zt)|0,b=b+Math.imul(F,kt)|0,d=d+Math.imul(L,Lt)|0,f=f+Math.imul(L,At)|0,f=f+Math.imul(X,Lt)|0,b=b+Math.imul(X,At)|0,d=d+Math.imul(c,jt)|0,f=f+Math.imul(c,Rt)|0,f=f+Math.imul(E,jt)|0,b=b+Math.imul(E,Rt)|0;var We=(O+d|0)+((f&8191)<<13)|0;O=(b+(f>>>13)|0)+(We>>>26)|0,We&=67108863,d=Math.imul(Pt,mt),f=Math.imul(Pt,gt),f=f+Math.imul(Ot,mt)|0,b=Math.imul(Ot,gt),d=d+Math.imul(V,zt)|0,f=f+Math.imul(V,kt)|0,f=f+Math.imul(st,zt)|0,b=b+Math.imul(st,kt)|0,d=d+Math.imul(D,Lt)|0,f=f+Math.imul(D,At)|0,f=f+Math.imul(F,Lt)|0,b=b+Math.imul(F,At)|0,d=d+Math.imul(L,jt)|0,f=f+Math.imul(L,Rt)|0,f=f+Math.imul(X,jt)|0,b=b+Math.imul(X,Rt)|0,d=d+Math.imul(c,St)|0,f=f+Math.imul(c,Xt)|0,f=f+Math.imul(E,St)|0,b=b+Math.imul(E,Xt)|0;var Ye=(O+d|0)+((f&8191)<<13)|0;O=(b+(f>>>13)|0)+(Ye>>>26)|0,Ye&=67108863,d=Math.imul(Nt,mt),f=Math.imul(Nt,gt),f=f+Math.imul(Et,mt)|0,b=Math.imul(Et,gt),d=d+Math.imul(Pt,zt)|0,f=f+Math.imul(Pt,kt)|0,f=f+Math.imul(Ot,zt)|0,b=b+Math.imul(Ot,kt)|0,d=d+Math.imul(V,Lt)|0,f=f+Math.imul(V,At)|0,f=f+Math.imul(st,Lt)|0,b=b+Math.imul(st,At)|0,d=d+Math.imul(D,jt)|0,f=f+Math.imul(D,Rt)|0,f=f+Math.imul(F,jt)|0,b=b+Math.imul(F,Rt)|0,d=d+Math.imul(L,St)|0,f=f+Math.imul(L,Xt)|0,f=f+Math.imul(X,St)|0,b=b+Math.imul(X,Xt)|0,d=d+Math.imul(c,Ut)|0,f=f+Math.imul(c,Bt)|0,f=f+Math.imul(E,Ut)|0,b=b+Math.imul(E,Bt)|0;var li=(O+d|0)+((f&8191)<<13)|0;O=(b+(f>>>13)|0)+(li>>>26)|0,li&=67108863,d=Math.imul(vt,mt),f=Math.imul(vt,gt),f=f+Math.imul(P,mt)|0,b=Math.imul(P,gt),d=d+Math.imul(Nt,zt)|0,f=f+Math.imul(Nt,kt)|0,f=f+Math.imul(Et,zt)|0,b=b+Math.imul(Et,kt)|0,d=d+Math.imul(Pt,Lt)|0,f=f+Math.imul(Pt,At)|0,f=f+Math.imul(Ot,Lt)|0,b=b+Math.imul(Ot,At)|0,d=d+Math.imul(V,jt)|0,f=f+Math.imul(V,Rt)|0,f=f+Math.imul(st,jt)|0,b=b+Math.imul(st,Rt)|0,d=d+Math.imul(D,St)|0,f=f+Math.imul(D,Xt)|0,f=f+Math.imul(F,St)|0,b=b+Math.imul(F,Xt)|0,d=d+Math.imul(L,Ut)|0,f=f+Math.imul(L,Bt)|0,f=f+Math.imul(X,Ut)|0,b=b+Math.imul(X,Bt)|0,d=d+Math.imul(c,Ht)|0,f=f+Math.imul(c,Ft)|0,f=f+Math.imul(E,Ht)|0,b=b+Math.imul(E,Ft)|0;var hi=(O+d|0)+((f&8191)<<13)|0;O=(b+(f>>>13)|0)+(hi>>>26)|0,hi&=67108863,d=Math.imul(z,mt),f=Math.imul(z,gt),f=f+Math.imul(R,mt)|0,b=Math.imul(R,gt),d=d+Math.imul(vt,zt)|0,f=f+Math.imul(vt,kt)|0,f=f+Math.imul(P,zt)|0,b=b+Math.imul(P,kt)|0,d=d+Math.imul(Nt,Lt)|0,f=f+Math.imul(Nt,At)|0,f=f+Math.imul(Et,Lt)|0,b=b+Math.imul(Et,At)|0,d=d+Math.imul(Pt,jt)|0,f=f+Math.imul(Pt,Rt)|0,f=f+Math.imul(Ot,jt)|0,b=b+Math.imul(Ot,Rt)|0,d=d+Math.imul(V,St)|0,f=f+Math.imul(V,Xt)|0,f=f+Math.imul(st,St)|0,b=b+Math.imul(st,Xt)|0,d=d+Math.imul(D,Ut)|0,f=f+Math.imul(D,Bt)|0,f=f+Math.imul(F,Ut)|0,b=b+Math.imul(F,Bt)|0,d=d+Math.imul(L,Ht)|0,f=f+Math.imul(L,Ft)|0,f=f+Math.imul(X,Ht)|0,b=b+Math.imul(X,Ft)|0,d=d+Math.imul(c,Zt)|0,f=f+Math.imul(c,Dt)|0,f=f+Math.imul(E,Zt)|0,b=b+Math.imul(E,Dt)|0;var di=(O+d|0)+((f&8191)<<13)|0;O=(b+(f>>>13)|0)+(di>>>26)|0,di&=67108863,d=Math.imul(ot,mt),f=Math.imul(ot,gt),f=f+Math.imul(G,mt)|0,b=Math.imul(G,gt),d=d+Math.imul(z,zt)|0,f=f+Math.imul(z,kt)|0,f=f+Math.imul(R,zt)|0,b=b+Math.imul(R,kt)|0,d=d+Math.imul(vt,Lt)|0,f=f+Math.imul(vt,At)|0,f=f+Math.imul(P,Lt)|0,b=b+Math.imul(P,At)|0,d=d+Math.imul(Nt,jt)|0,f=f+Math.imul(Nt,Rt)|0,f=f+Math.imul(Et,jt)|0,b=b+Math.imul(Et,Rt)|0,d=d+Math.imul(Pt,St)|0,f=f+Math.imul(Pt,Xt)|0,f=f+Math.imul(Ot,St)|0,b=b+Math.imul(Ot,Xt)|0,d=d+Math.imul(V,Ut)|0,f=f+Math.imul(V,Bt)|0,f=f+Math.imul(st,Ut)|0,b=b+Math.imul(st,Bt)|0,d=d+Math.imul(D,Ht)|0,f=f+Math.imul(D,Ft)|0,f=f+Math.imul(F,Ht)|0,b=b+Math.imul(F,Ft)|0,d=d+Math.imul(L,Zt)|0,f=f+Math.imul(L,Dt)|0,f=f+Math.imul(X,Zt)|0,b=b+Math.imul(X,Dt)|0,d=d+Math.imul(c,Ct)|0,f=f+Math.imul(c,It)|0,f=f+Math.imul(E,Ct)|0,b=b+Math.imul(E,It)|0;var pi=(O+d|0)+((f&8191)<<13)|0;O=(b+(f>>>13)|0)+(pi>>>26)|0,pi&=67108863,d=Math.imul(H,mt),f=Math.imul(H,gt),f=f+Math.imul(K,mt)|0,b=Math.imul(K,gt),d=d+Math.imul(ot,zt)|0,f=f+Math.imul(ot,kt)|0,f=f+Math.imul(G,zt)|0,b=b+Math.imul(G,kt)|0,d=d+Math.imul(z,Lt)|0,f=f+Math.imul(z,At)|0,f=f+Math.imul(R,Lt)|0,b=b+Math.imul(R,At)|0,d=d+Math.imul(vt,jt)|0,f=f+Math.imul(vt,Rt)|0,f=f+Math.imul(P,jt)|0,b=b+Math.imul(P,Rt)|0,d=d+Math.imul(Nt,St)|0,f=f+Math.imul(Nt,Xt)|0,f=f+Math.imul(Et,St)|0,b=b+Math.imul(Et,Xt)|0,d=d+Math.imul(Pt,Ut)|0,f=f+Math.imul(Pt,Bt)|0,f=f+Math.imul(Ot,Ut)|0,b=b+Math.imul(Ot,Bt)|0,d=d+Math.imul(V,Ht)|0,f=f+Math.imul(V,Ft)|0,f=f+Math.imul(st,Ht)|0,b=b+Math.imul(st,Ft)|0,d=d+Math.imul(D,Zt)|0,f=f+Math.imul(D,Dt)|0,f=f+Math.imul(F,Zt)|0,b=b+Math.imul(F,Dt)|0,d=d+Math.imul(L,Ct)|0,f=f+Math.imul(L,It)|0,f=f+Math.imul(X,Ct)|0,b=b+Math.imul(X,It)|0,d=d+Math.imul(c,Vt)|0,f=f+Math.imul(c,qt)|0,f=f+Math.imul(E,Vt)|0,b=b+Math.imul(E,qt)|0;var mi=(O+d|0)+((f&8191)<<13)|0;O=(b+(f>>>13)|0)+(mi>>>26)|0,mi&=67108863,d=Math.imul(H,zt),f=Math.imul(H,kt),f=f+Math.imul(K,zt)|0,b=Math.imul(K,kt),d=d+Math.imul(ot,Lt)|0,f=f+Math.imul(ot,At)|0,f=f+Math.imul(G,Lt)|0,b=b+Math.imul(G,At)|0,d=d+Math.imul(z,jt)|0,f=f+Math.imul(z,Rt)|0,f=f+Math.imul(R,jt)|0,b=b+Math.imul(R,Rt)|0,d=d+Math.imul(vt,St)|0,f=f+Math.imul(vt,Xt)|0,f=f+Math.imul(P,St)|0,b=b+Math.imul(P,Xt)|0,d=d+Math.imul(Nt,Ut)|0,f=f+Math.imul(Nt,Bt)|0,f=f+Math.imul(Et,Ut)|0,b=b+Math.imul(Et,Bt)|0,d=d+Math.imul(Pt,Ht)|0,f=f+Math.imul(Pt,Ft)|0,f=f+Math.imul(Ot,Ht)|0,b=b+Math.imul(Ot,Ft)|0,d=d+Math.imul(V,Zt)|0,f=f+Math.imul(V,Dt)|0,f=f+Math.imul(st,Zt)|0,b=b+Math.imul(st,Dt)|0,d=d+Math.imul(D,Ct)|0,f=f+Math.imul(D,It)|0,f=f+Math.imul(F,Ct)|0,b=b+Math.imul(F,It)|0,d=d+Math.imul(L,Vt)|0,f=f+Math.imul(L,qt)|0,f=f+Math.imul(X,Vt)|0,b=b+Math.imul(X,qt)|0;var yi=(O+d|0)+((f&8191)<<13)|0;O=(b+(f>>>13)|0)+(yi>>>26)|0,yi&=67108863,d=Math.imul(H,Lt),f=Math.imul(H,At),f=f+Math.imul(K,Lt)|0,b=Math.imul(K,At),d=d+Math.imul(ot,jt)|0,f=f+Math.imul(ot,Rt)|0,f=f+Math.imul(G,jt)|0,b=b+Math.imul(G,Rt)|0,d=d+Math.imul(z,St)|0,f=f+Math.imul(z,Xt)|0,f=f+Math.imul(R,St)|0,b=b+Math.imul(R,Xt)|0,d=d+Math.imul(vt,Ut)|0,f=f+Math.imul(vt,Bt)|0,f=f+Math.imul(P,Ut)|0,b=b+Math.imul(P,Bt)|0,d=d+Math.imul(Nt,Ht)|0,f=f+Math.imul(Nt,Ft)|0,f=f+Math.imul(Et,Ht)|0,b=b+Math.imul(Et,Ft)|0,d=d+Math.imul(Pt,Zt)|0,f=f+Math.imul(Pt,Dt)|0,f=f+Math.imul(Ot,Zt)|0,b=b+Math.imul(Ot,Dt)|0,d=d+Math.imul(V,Ct)|0,f=f+Math.imul(V,It)|0,f=f+Math.imul(st,Ct)|0,b=b+Math.imul(st,It)|0,d=d+Math.imul(D,Vt)|0,f=f+Math.imul(D,qt)|0,f=f+Math.imul(F,Vt)|0,b=b+Math.imul(F,qt)|0;var bi=(O+d|0)+((f&8191)<<13)|0;O=(b+(f>>>13)|0)+(bi>>>26)|0,bi&=67108863,d=Math.imul(H,jt),f=Math.imul(H,Rt),f=f+Math.imul(K,jt)|0,b=Math.imul(K,Rt),d=d+Math.imul(ot,St)|0,f=f+Math.imul(ot,Xt)|0,f=f+Math.imul(G,St)|0,b=b+Math.imul(G,Xt)|0,d=d+Math.imul(z,Ut)|0,f=f+Math.imul(z,Bt)|0,f=f+Math.imul(R,Ut)|0,b=b+Math.imul(R,Bt)|0,d=d+Math.imul(vt,Ht)|0,f=f+Math.imul(vt,Ft)|0,f=f+Math.imul(P,Ht)|0,b=b+Math.imul(P,Ft)|0,d=d+Math.imul(Nt,Zt)|0,f=f+Math.imul(Nt,Dt)|0,f=f+Math.imul(Et,Zt)|0,b=b+Math.imul(Et,Dt)|0,d=d+Math.imul(Pt,Ct)|0,f=f+Math.imul(Pt,It)|0,f=f+Math.imul(Ot,Ct)|0,b=b+Math.imul(Ot,It)|0,d=d+Math.imul(V,Vt)|0,f=f+Math.imul(V,qt)|0,f=f+Math.imul(st,Vt)|0,b=b+Math.imul(st,qt)|0;var vi=(O+d|0)+((f&8191)<<13)|0;O=(b+(f>>>13)|0)+(vi>>>26)|0,vi&=67108863,d=Math.imul(H,St),f=Math.imul(H,Xt),f=f+Math.imul(K,St)|0,b=Math.imul(K,Xt),d=d+Math.imul(ot,Ut)|0,f=f+Math.imul(ot,Bt)|0,f=f+Math.imul(G,Ut)|0,b=b+Math.imul(G,Bt)|0,d=d+Math.imul(z,Ht)|0,f=f+Math.imul(z,Ft)|0,f=f+Math.imul(R,Ht)|0,b=b+Math.imul(R,Ft)|0,d=d+Math.imul(vt,Zt)|0,f=f+Math.imul(vt,Dt)|0,f=f+Math.imul(P,Zt)|0,b=b+Math.imul(P,Dt)|0,d=d+Math.imul(Nt,Ct)|0,f=f+Math.imul(Nt,It)|0,f=f+Math.imul(Et,Ct)|0,b=b+Math.imul(Et,It)|0,d=d+Math.imul(Pt,Vt)|0,f=f+Math.imul(Pt,qt)|0,f=f+Math.imul(Ot,Vt)|0,b=b+Math.imul(Ot,qt)|0;var wi=(O+d|0)+((f&8191)<<13)|0;O=(b+(f>>>13)|0)+(wi>>>26)|0,wi&=67108863,d=Math.imul(H,Ut),f=Math.imul(H,Bt),f=f+Math.imul(K,Ut)|0,b=Math.imul(K,Bt),d=d+Math.imul(ot,Ht)|0,f=f+Math.imul(ot,Ft)|0,f=f+Math.imul(G,Ht)|0,b=b+Math.imul(G,Ft)|0,d=d+Math.imul(z,Zt)|0,f=f+Math.imul(z,Dt)|0,f=f+Math.imul(R,Zt)|0,b=b+Math.imul(R,Dt)|0,d=d+Math.imul(vt,Ct)|0,f=f+Math.imul(vt,It)|0,f=f+Math.imul(P,Ct)|0,b=b+Math.imul(P,It)|0,d=d+Math.imul(Nt,Vt)|0,f=f+Math.imul(Nt,qt)|0,f=f+Math.imul(Et,Vt)|0,b=b+Math.imul(Et,qt)|0;var gi=(O+d|0)+((f&8191)<<13)|0;O=(b+(f>>>13)|0)+(gi>>>26)|0,gi&=67108863,d=Math.imul(H,Ht),f=Math.imul(H,Ft),f=f+Math.imul(K,Ht)|0,b=Math.imul(K,Ft),d=d+Math.imul(ot,Zt)|0,f=f+Math.imul(ot,Dt)|0,f=f+Math.imul(G,Zt)|0,b=b+Math.imul(G,Dt)|0,d=d+Math.imul(z,Ct)|0,f=f+Math.imul(z,It)|0,f=f+Math.imul(R,Ct)|0,b=b+Math.imul(R,It)|0,d=d+Math.imul(vt,Vt)|0,f=f+Math.imul(vt,qt)|0,f=f+Math.imul(P,Vt)|0,b=b+Math.imul(P,qt)|0;var xi=(O+d|0)+((f&8191)<<13)|0;O=(b+(f>>>13)|0)+(xi>>>26)|0,xi&=67108863,d=Math.imul(H,Zt),f=Math.imul(H,Dt),f=f+Math.imul(K,Zt)|0,b=Math.imul(K,Dt),d=d+Math.imul(ot,Ct)|0,f=f+Math.imul(ot,It)|0,f=f+Math.imul(G,Ct)|0,b=b+Math.imul(G,It)|0,d=d+Math.imul(z,Vt)|0,f=f+Math.imul(z,qt)|0,f=f+Math.imul(R,Vt)|0,b=b+Math.imul(R,qt)|0;var Pi=(O+d|0)+((f&8191)<<13)|0;O=(b+(f>>>13)|0)+(Pi>>>26)|0,Pi&=67108863,d=Math.imul(H,Ct),f=Math.imul(H,It),f=f+Math.imul(K,Ct)|0,b=Math.imul(K,It),d=d+Math.imul(ot,Vt)|0,f=f+Math.imul(ot,qt)|0,f=f+Math.imul(G,Vt)|0,b=b+Math.imul(G,qt)|0;var Oi=(O+d|0)+((f&8191)<<13)|0;O=(b+(f>>>13)|0)+(Oi>>>26)|0,Oi&=67108863,d=Math.imul(H,Vt),f=Math.imul(H,qt),f=f+Math.imul(K,Vt)|0,b=Math.imul(K,qt);var Ni=(O+d|0)+((f&8191)<<13)|0;return O=(b+(f>>>13)|0)+(Ni>>>26)|0,Ni&=67108863,g[0]=Ve,g[1]=qe,g[2]=Ge,g[3]=We,g[4]=Ye,g[5]=li,g[6]=hi,g[7]=di,g[8]=pi,g[9]=mi,g[10]=yi,g[11]=bi,g[12]=vi,g[13]=wi,g[14]=gi,g[15]=xi,g[16]=Pi,g[17]=Oi,g[18]=Ni,O!==0&&(g[19]=O,h.length++),h};Math.imul||($=ft);function et(m,o,u){u.negative=o.negative^m.negative,u.length=m.length+o.length;for(var h=0,p=0,v=0;v<u.length-1;v++){var g=p;p=0;for(var O=h&67108863,d=Math.min(v,o.length-1),f=Math.max(0,v-m.length+1);f<=d;f++){var b=v-f,I=m.words[b]|0,c=o.words[f]|0,E=I*c,k=E&67108863;g=g+(E/67108864|0)|0,k=k+O|0,O=k&67108863,g=g+(k>>>26)|0,p+=g>>>26,g&=67108863}u.words[v]=O,h=g,g=p}return h!==0?u.words[v]=h:u.length--,u._strip()}function S(m,o,u){return et(m,o,u)}s.prototype.mulTo=function(o,u){var h,p=this.length+o.length;return this.length===10&&o.length===10?h=$(this,o,u):p<63?h=ft(this,o,u):p<1024?h=et(this,o,u):h=S(this,o,u),h},s.prototype.mul=function(o){var u=new s(null);return u.words=new Array(this.length+o.length),this.mulTo(o,u)},s.prototype.mulf=function(o){var u=new s(null);return u.words=new Array(this.length+o.length),S(this,o,u)},s.prototype.imul=function(o){return this.clone().mulTo(o,this)},s.prototype.imuln=function(o){var u=o<0;u&&(o=-o),n(typeof o=="number"),n(o<67108864);for(var h=0,p=0;p<this.length;p++){var v=(this.words[p]|0)*o,g=(v&67108863)+(h&67108863);h>>=26,h+=v/67108864|0,h+=g>>>26,this.words[p]=g&67108863}return h!==0&&(this.words[p]=h,this.length++),u?this.ineg():this},s.prototype.muln=function(o){return this.clone().imuln(o)},s.prototype.sqr=function(){return this.mul(this)},s.prototype.isqr=function(){return this.imul(this.clone())},s.prototype.pow=function(o){var u=rt(o);if(u.length===0)return new s(1);for(var h=this,p=0;p<u.length&&u[p]===0;p++,h=h.sqr());if(++p<u.length)for(var v=h.sqr();p<u.length;p++,v=v.sqr())u[p]!==0&&(h=h.mul(v));return h},s.prototype.iushln=function(o){n(typeof o=="number"&&o>=0);var u=o%26,h=(o-u)/26,p=67108863>>>26-u<<26-u,v;if(u!==0){var g=0;for(v=0;v<this.length;v++){var O=this.words[v]&p,d=(this.words[v]|0)-O<<u;this.words[v]=d|g,g=O>>>26-u}g&&(this.words[v]=g,this.length++)}if(h!==0){for(v=this.length-1;v>=0;v--)this.words[v+h]=this.words[v];for(v=0;v<h;v++)this.words[v]=0;this.length+=h}return this._strip()},s.prototype.ishln=function(o){return n(this.negative===0),this.iushln(o)},s.prototype.iushrn=function(o,u,h){n(typeof o=="number"&&o>=0);var p;u?p=(u-u%26)/26:p=0;var v=o%26,g=Math.min((o-v)/26,this.length),O=67108863^67108863>>>v<<v,d=h;if(p-=g,p=Math.max(0,p),d){for(var f=0;f<g;f++)d.words[f]=this.words[f];d.length=g}if(g!==0)if(this.length>g)for(this.length-=g,f=0;f<this.length;f++)this.words[f]=this.words[f+g];else this.words[0]=0,this.length=1;var b=0;for(f=this.length-1;f>=0&&(b!==0||f>=p);f--){var I=this.words[f]|0;this.words[f]=b<<26-v|I>>>v,b=I&O}return d&&b!==0&&(d.words[d.length++]=b),this.length===0&&(this.words[0]=0,this.length=1),this._strip()},s.prototype.ishrn=function(o,u,h){return n(this.negative===0),this.iushrn(o,u,h)},s.prototype.shln=function(o){return this.clone().ishln(o)},s.prototype.ushln=function(o){return this.clone().iushln(o)},s.prototype.shrn=function(o){return this.clone().ishrn(o)},s.prototype.ushrn=function(o){return this.clone().iushrn(o)},s.prototype.testn=function(o){n(typeof o=="number"&&o>=0);var u=o%26,h=(o-u)/26,p=1<<u;if(this.length<=h)return!1;var v=this.words[h];return!!(v&p)},s.prototype.imaskn=function(o){n(typeof o=="number"&&o>=0);var u=o%26,h=(o-u)/26;if(n(this.negative===0,"imaskn works only with positive numbers"),this.length<=h)return this;if(u!==0&&h++,this.length=Math.min(h,this.length),u!==0){var p=67108863^67108863>>>u<<u;this.words[this.length-1]&=p}return this._strip()},s.prototype.maskn=function(o){return this.clone().imaskn(o)},s.prototype.iaddn=function(o){return n(typeof o=="number"),n(o<67108864),o<0?this.isubn(-o):this.negative!==0?this.length===1&&(this.words[0]|0)<=o?(this.words[0]=o-(this.words[0]|0),this.negative=0,this):(this.negative=0,this.isubn(o),this.negative=1,this):this._iaddn(o)},s.prototype._iaddn=function(o){this.words[0]+=o;for(var u=0;u<this.length&&this.words[u]>=67108864;u++)this.words[u]-=67108864,u===this.length-1?this.words[u+1]=1:this.words[u+1]++;return this.length=Math.max(this.length,u+1),this},s.prototype.isubn=function(o){if(n(typeof o=="number"),n(o<67108864),o<0)return this.iaddn(-o);if(this.negative!==0)return this.negative=0,this.iaddn(o),this.negative=1,this;if(this.words[0]-=o,this.length===1&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var u=0;u<this.length&&this.words[u]<0;u++)this.words[u]+=67108864,this.words[u+1]-=1;return this._strip()},s.prototype.addn=function(o){return this.clone().iaddn(o)},s.prototype.subn=function(o){return this.clone().isubn(o)},s.prototype.iabs=function(){return this.negative=0,this},s.prototype.abs=function(){return this.clone().iabs()},s.prototype._ishlnsubmul=function(o,u,h){var p=o.length+h,v;this._expand(p);var g,O=0;for(v=0;v<o.length;v++){g=(this.words[v+h]|0)+O;var d=(o.words[v]|0)*u;g-=d&67108863,O=(g>>26)-(d/67108864|0),this.words[v+h]=g&67108863}for(;v<this.length-h;v++)g=(this.words[v+h]|0)+O,O=g>>26,this.words[v+h]=g&67108863;if(O===0)return this._strip();for(n(O===-1),O=0,v=0;v<this.length;v++)g=-(this.words[v]|0)+O,O=g>>26,this.words[v]=g&67108863;return this.negative=1,this._strip()},s.prototype._wordDiv=function(o,u){var h=this.length-o.length,p=this.clone(),v=o,g=v.words[v.length-1]|0,O=this._countBits(g);h=26-O,h!==0&&(v=v.ushln(h),p.iushln(h),g=v.words[v.length-1]|0);var d=p.length-v.length,f;if(u!=="mod"){f=new s(null),f.length=d+1,f.words=new Array(f.length);for(var b=0;b<f.length;b++)f.words[b]=0}var I=p.clone()._ishlnsubmul(v,1,d);I.negative===0&&(p=I,f&&(f.words[d]=1));for(var c=d-1;c>=0;c--){var E=(p.words[v.length+c]|0)*67108864+(p.words[v.length+c-1]|0);for(E=Math.min(E/g|0,67108863),p._ishlnsubmul(v,E,c);p.negative!==0;)E--,p.negative=0,p._ishlnsubmul(v,1,c),p.isZero()||(p.negative^=1);f&&(f.words[c]=E)}return f&&f._strip(),p._strip(),u!=="div"&&h!==0&&p.iushrn(h),{div:f||null,mod:p}},s.prototype.divmod=function(o,u,h){if(n(!o.isZero()),this.isZero())return{div:new s(0),mod:new s(0)};var p,v,g;return this.negative!==0&&o.negative===0?(g=this.neg().divmod(o,u),u!=="mod"&&(p=g.div.neg()),u!=="div"&&(v=g.mod.neg(),h&&v.negative!==0&&v.iadd(o)),{div:p,mod:v}):this.negative===0&&o.negative!==0?(g=this.divmod(o.neg(),u),u!=="mod"&&(p=g.div.neg()),{div:p,mod:g.mod}):this.negative&o.negative?(g=this.neg().divmod(o.neg(),u),u!=="div"&&(v=g.mod.neg(),h&&v.negative!==0&&v.isub(o)),{div:g.div,mod:v}):o.length>this.length||this.cmp(o)<0?{div:new s(0),mod:this}:o.length===1?u==="div"?{div:this.divn(o.words[0]),mod:null}:u==="mod"?{div:null,mod:new s(this.modrn(o.words[0]))}:{div:this.divn(o.words[0]),mod:new s(this.modrn(o.words[0]))}:this._wordDiv(o,u)},s.prototype.div=function(o){return this.divmod(o,"div",!1).div},s.prototype.mod=function(o){return this.divmod(o,"mod",!1).mod},s.prototype.umod=function(o){return this.divmod(o,"mod",!0).mod},s.prototype.divRound=function(o){var u=this.divmod(o);if(u.mod.isZero())return u.div;var h=u.div.negative!==0?u.mod.isub(o):u.mod,p=o.ushrn(1),v=o.andln(1),g=h.cmp(p);return g<0||v===1&&g===0?u.div:u.div.negative!==0?u.div.isubn(1):u.div.iaddn(1)},s.prototype.modrn=function(o){var u=o<0;u&&(o=-o),n(o<=67108863);for(var h=(1<<26)%o,p=0,v=this.length-1;v>=0;v--)p=(h*p+(this.words[v]|0))%o;return u?-p:p},s.prototype.modn=function(o){return this.modrn(o)},s.prototype.idivn=function(o){var u=o<0;u&&(o=-o),n(o<=67108863);for(var h=0,p=this.length-1;p>=0;p--){var v=(this.words[p]|0)+h*67108864;this.words[p]=v/o|0,h=v%o}return this._strip(),u?this.ineg():this},s.prototype.divn=function(o){return this.clone().idivn(o)},s.prototype.egcd=function(o){n(o.negative===0),n(!o.isZero());var u=this,h=o.clone();u.negative!==0?u=u.umod(o):u=u.clone();for(var p=new s(1),v=new s(0),g=new s(0),O=new s(1),d=0;u.isEven()&&h.isEven();)u.iushrn(1),h.iushrn(1),++d;for(var f=h.clone(),b=u.clone();!u.isZero();){for(var I=0,c=1;!(u.words[0]&c)&&I<26;++I,c<<=1);if(I>0)for(u.iushrn(I);I-- >0;)(p.isOdd()||v.isOdd())&&(p.iadd(f),v.isub(b)),p.iushrn(1),v.iushrn(1);for(var E=0,k=1;!(h.words[0]&k)&&E<26;++E,k<<=1);if(E>0)for(h.iushrn(E);E-- >0;)(g.isOdd()||O.isOdd())&&(g.iadd(f),O.isub(b)),g.iushrn(1),O.iushrn(1);u.cmp(h)>=0?(u.isub(h),p.isub(g),v.isub(O)):(h.isub(u),g.isub(p),O.isub(v))}return{a:g,b:O,gcd:h.iushln(d)}},s.prototype._invmp=function(o){n(o.negative===0),n(!o.isZero());var u=this,h=o.clone();u.negative!==0?u=u.umod(o):u=u.clone();for(var p=new s(1),v=new s(0),g=h.clone();u.cmpn(1)>0&&h.cmpn(1)>0;){for(var O=0,d=1;!(u.words[0]&d)&&O<26;++O,d<<=1);if(O>0)for(u.iushrn(O);O-- >0;)p.isOdd()&&p.iadd(g),p.iushrn(1);for(var f=0,b=1;!(h.words[0]&b)&&f<26;++f,b<<=1);if(f>0)for(h.iushrn(f);f-- >0;)v.isOdd()&&v.iadd(g),v.iushrn(1);u.cmp(h)>=0?(u.isub(h),p.isub(v)):(h.isub(u),v.isub(p))}var I;return u.cmpn(1)===0?I=p:I=v,I.cmpn(0)<0&&I.iadd(o),I},s.prototype.gcd=function(o){if(this.isZero())return o.abs();if(o.isZero())return this.abs();var u=this.clone(),h=o.clone();u.negative=0,h.negative=0;for(var p=0;u.isEven()&&h.isEven();p++)u.iushrn(1),h.iushrn(1);do{for(;u.isEven();)u.iushrn(1);for(;h.isEven();)h.iushrn(1);var v=u.cmp(h);if(v<0){var g=u;u=h,h=g}else if(v===0||h.cmpn(1)===0)break;u.isub(h)}while(!0);return h.iushln(p)},s.prototype.invm=function(o){return this.egcd(o).a.umod(o)},s.prototype.isEven=function(){return(this.words[0]&1)===0},s.prototype.isOdd=function(){return(this.words[0]&1)===1},s.prototype.andln=function(o){return this.words[0]&o},s.prototype.bincn=function(o){n(typeof o=="number");var u=o%26,h=(o-u)/26,p=1<<u;if(this.length<=h)return this._expand(h+1),this.words[h]|=p,this;for(var v=p,g=h;v!==0&&g<this.length;g++){var O=this.words[g]|0;O+=v,v=O>>>26,O&=67108863,this.words[g]=O}return v!==0&&(this.words[g]=v,this.length++),this},s.prototype.isZero=function(){return this.length===1&&this.words[0]===0},s.prototype.cmpn=function(o){var u=o<0;if(this.negative!==0&&!u)return-1;if(this.negative===0&&u)return 1;this._strip();var h;if(this.length>1)h=1;else{u&&(o=-o),n(o<=67108863,"Number is too big");var p=this.words[0]|0;h=p===o?0:p<o?-1:1}return this.negative!==0?-h|0:h},s.prototype.cmp=function(o){if(this.negative!==0&&o.negative===0)return-1;if(this.negative===0&&o.negative!==0)return 1;var u=this.ucmp(o);return this.negative!==0?-u|0:u},s.prototype.ucmp=function(o){if(this.length>o.length)return 1;if(this.length<o.length)return-1;for(var u=0,h=this.length-1;h>=0;h--){var p=this.words[h]|0,v=o.words[h]|0;if(p!==v){p<v?u=-1:p>v&&(u=1);break}}return u},s.prototype.gtn=function(o){return this.cmpn(o)===1},s.prototype.gt=function(o){return this.cmp(o)===1},s.prototype.gten=function(o){return this.cmpn(o)>=0},s.prototype.gte=function(o){return this.cmp(o)>=0},s.prototype.ltn=function(o){return this.cmpn(o)===-1},s.prototype.lt=function(o){return this.cmp(o)===-1},s.prototype.lten=function(o){return this.cmpn(o)<=0},s.prototype.lte=function(o){return this.cmp(o)<=0},s.prototype.eqn=function(o){return this.cmpn(o)===0},s.prototype.eq=function(o){return this.cmp(o)===0},s.red=function(o){return new Z(o)},s.prototype.toRed=function(o){return n(!this.red,"Already a number in reduction context"),n(this.negative===0,"red works only with positives"),o.convertTo(this)._forceRed(o)},s.prototype.fromRed=function(){return n(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},s.prototype._forceRed=function(o){return this.red=o,this},s.prototype.forceRed=function(o){return n(!this.red,"Already a number in reduction context"),this._forceRed(o)},s.prototype.redAdd=function(o){return n(this.red,"redAdd works only with red numbers"),this.red.add(this,o)},s.prototype.redIAdd=function(o){return n(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,o)},s.prototype.redSub=function(o){return n(this.red,"redSub works only with red numbers"),this.red.sub(this,o)},s.prototype.redISub=function(o){return n(this.red,"redISub works only with red numbers"),this.red.isub(this,o)},s.prototype.redShl=function(o){return n(this.red,"redShl works only with red numbers"),this.red.shl(this,o)},s.prototype.redMul=function(o){return n(this.red,"redMul works only with red numbers"),this.red._verify2(this,o),this.red.mul(this,o)},s.prototype.redIMul=function(o){return n(this.red,"redMul works only with red numbers"),this.red._verify2(this,o),this.red.imul(this,o)},s.prototype.redSqr=function(){return n(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},s.prototype.redISqr=function(){return n(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},s.prototype.redSqrt=function(){return n(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},s.prototype.redInvm=function(){return n(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},s.prototype.redNeg=function(){return n(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},s.prototype.redPow=function(o){return n(this.red&&!o.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,o)};var A={k256:null,p224:null,p192:null,p25519:null};function q(m,o){this.name=m,this.p=new s(o,16),this.n=this.p.bitLength(),this.k=new s(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}q.prototype._tmp=function(){var o=new s(null);return o.words=new Array(Math.ceil(this.n/13)),o},q.prototype.ireduce=function(o){var u=o,h;do this.split(u,this.tmp),u=this.imulK(u),u=u.iadd(this.tmp),h=u.bitLength();while(h>this.n);var p=h<this.n?-1:u.ucmp(this.p);return p===0?(u.words[0]=0,u.length=1):p>0?u.isub(this.p):u.strip!==void 0?u.strip():u._strip(),u},q.prototype.split=function(o,u){o.iushrn(this.n,0,u)},q.prototype.imulK=function(o){return o.imul(this.k)};function tt(){q.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}i(tt,q),tt.prototype.split=function(o,u){for(var h=4194303,p=Math.min(o.length,9),v=0;v<p;v++)u.words[v]=o.words[v];if(u.length=p,o.length<=9){o.words[0]=0,o.length=1;return}var g=o.words[9];for(u.words[u.length++]=g&h,v=10;v<o.length;v++){var O=o.words[v]|0;o.words[v-10]=(O&h)<<4|g>>>22,g=O}g>>>=22,o.words[v-10]=g,g===0&&o.length>10?o.length-=10:o.length-=9},tt.prototype.imulK=function(o){o.words[o.length]=0,o.words[o.length+1]=0,o.length+=2;for(var u=0,h=0;h<o.length;h++){var p=o.words[h]|0;u+=p*977,o.words[h]=u&67108863,u=p*64+(u/67108864|0)}return o.words[o.length-1]===0&&(o.length--,o.words[o.length-1]===0&&o.length--),o};function ut(){q.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}i(ut,q);function bt(){q.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}i(bt,q);function W(){q.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}i(W,q),W.prototype.imulK=function(o){for(var u=0,h=0;h<o.length;h++){var p=(o.words[h]|0)*19+u,v=p&67108863;p>>>=26,o.words[h]=v,u=p}return u!==0&&(o.words[o.length++]=u),o},s._prime=function(o){if(A[o])return A[o];var u;if(o==="k256")u=new tt;else if(o==="p224")u=new ut;else if(o==="p192")u=new bt;else if(o==="p25519")u=new W;else throw new Error("Unknown prime "+o);return A[o]=u,u};function Z(m){if(typeof m=="string"){var o=s._prime(m);this.m=o.p,this.prime=o}else n(m.gtn(1),"modulus must be greater than 1"),this.m=m,this.prime=null}Z.prototype._verify1=function(o){n(o.negative===0,"red works only with positives"),n(o.red,"red works only with red numbers")},Z.prototype._verify2=function(o,u){n((o.negative|u.negative)===0,"red works only with positives"),n(o.red&&o.red===u.red,"red works only with red numbers")},Z.prototype.imod=function(o){return this.prime?this.prime.ireduce(o)._forceRed(this):(x(o,o.umod(this.m)._forceRed(this)),o)},Z.prototype.neg=function(o){return o.isZero()?o.clone():this.m.sub(o)._forceRed(this)},Z.prototype.add=function(o,u){this._verify2(o,u);var h=o.add(u);return h.cmp(this.m)>=0&&h.isub(this.m),h._forceRed(this)},Z.prototype.iadd=function(o,u){this._verify2(o,u);var h=o.iadd(u);return h.cmp(this.m)>=0&&h.isub(this.m),h},Z.prototype.sub=function(o,u){this._verify2(o,u);var h=o.sub(u);return h.cmpn(0)<0&&h.iadd(this.m),h._forceRed(this)},Z.prototype.isub=function(o,u){this._verify2(o,u);var h=o.isub(u);return h.cmpn(0)<0&&h.iadd(this.m),h},Z.prototype.shl=function(o,u){return this._verify1(o),this.imod(o.ushln(u))},Z.prototype.imul=function(o,u){return this._verify2(o,u),this.imod(o.imul(u))},Z.prototype.mul=function(o,u){return this._verify2(o,u),this.imod(o.mul(u))},Z.prototype.isqr=function(o){return this.imul(o,o.clone())},Z.prototype.sqr=function(o){return this.mul(o,o)},Z.prototype.sqrt=function(o){if(o.isZero())return o.clone();var u=this.m.andln(3);if(n(u%2===1),u===3){var h=this.m.add(new s(1)).iushrn(2);return this.pow(o,h)}for(var p=this.m.subn(1),v=0;!p.isZero()&&p.andln(1)===0;)v++,p.iushrn(1);n(!p.isZero());var g=new s(1).toRed(this),O=g.redNeg(),d=this.m.subn(1).iushrn(1),f=this.m.bitLength();for(f=new s(2*f*f).toRed(this);this.pow(f,d).cmp(O)!==0;)f.redIAdd(O);for(var b=this.pow(f,p),I=this.pow(o,p.addn(1).iushrn(1)),c=this.pow(o,p),E=v;c.cmp(g)!==0;){for(var k=c,L=0;k.cmp(g)!==0;L++)k=k.redSqr();n(L<E);var X=this.pow(b,new s(1).iushln(E-L-1));I=I.redMul(X),b=X.redSqr(),c=c.redMul(b),E=L}return I},Z.prototype.invm=function(o){var u=o._invmp(this.m);return u.negative!==0?(u.negative=0,this.imod(u).redNeg()):this.imod(u)},Z.prototype.pow=function(o,u){if(u.isZero())return new s(1).toRed(this);if(u.cmpn(1)===0)return o.clone();var h=4,p=new Array(1<<h);p[0]=new s(1).toRed(this),p[1]=o;for(var v=2;v<p.length;v++)p[v]=this.mul(p[v-1],o);var g=p[0],O=0,d=0,f=u.bitLength()%26;for(f===0&&(f=26),v=u.length-1;v>=0;v--){for(var b=u.words[v],I=f-1;I>=0;I--){var c=b>>I&1;if(g!==p[0]&&(g=this.sqr(g)),c===0&&O===0){d=0;continue}O<<=1,O|=c,d++,!(d!==h&&(v!==0||I!==0))&&(g=this.mul(g,p[O]),d=0,O=0)}f=26}return g},Z.prototype.convertTo=function(o){var u=o.umod(this.m);return u===o?u.clone():u},Z.prototype.convertFrom=function(o){var u=o.clone();return u.red=null,u},s.mont=function(o){return new B(o)};function B(m){Z.call(this,m),this.shift=this.m.bitLength(),this.shift%26!==0&&(this.shift+=26-this.shift%26),this.r=new s(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}i(B,Z),B.prototype.convertTo=function(o){return this.imod(o.ushln(this.shift))},B.prototype.convertFrom=function(o){var u=this.imod(o.mul(this.rinv));return u.red=null,u},B.prototype.imul=function(o,u){if(o.isZero()||u.isZero())return o.words[0]=0,o.length=1,o;var h=o.imul(u),p=h.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),v=h.isub(p).iushrn(this.shift),g=v;return v.cmp(this.m)>=0?g=v.isub(this.m):v.cmpn(0)<0&&(g=v.iadd(this.m)),g._forceRed(this)},B.prototype.mul=function(o,u){if(o.isZero()||u.isZero())return new s(0)._forceRed(this);var h=o.mul(u),p=h.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),v=h.isub(p).iushrn(this.shift),g=v;return v.cmp(this.m)>=0?g=v.isub(this.m):v.cmpn(0)<0&&(g=v.iadd(this.m)),g._forceRed(this)},B.prototype.invm=function(o){var u=this.imod(o._invmp(this.m).mul(this.r2));return u._forceRed(this)}})(e,Ur)})(xc);const Ec=_i,Tc="logger/5.7.0";let go=!1,xo=!1;const Ln={debug:1,default:2,info:2,warning:3,error:4,off:5};let Po=Ln.default,Zi=null;function Mc(){try{const e=[];if(["NFD","NFC","NFKD","NFKC"].forEach(t=>{try{if("test".normalize(t)!=="test")throw new Error("bad normalize")}catch{e.push(t)}}),e.length)throw new Error("missing "+e.join(", "));if(String.fromCharCode(233).normalize("NFD")!==String.fromCharCode(101,769))throw new Error("broken implementation")}catch(e){return e.message}return null}const Oo=Mc();var $i;(function(e){e.DEBUG="DEBUG",e.INFO="INFO",e.WARNING="WARNING",e.ERROR="ERROR",e.OFF="OFF"})($i||($i={}));var xe;(function(e){e.UNKNOWN_ERROR="UNKNOWN_ERROR",e.NOT_IMPLEMENTED="NOT_IMPLEMENTED",e.UNSUPPORTED_OPERATION="UNSUPPORTED_OPERATION",e.NETWORK_ERROR="NETWORK_ERROR",e.SERVER_ERROR="SERVER_ERROR",e.TIMEOUT="TIMEOUT",e.BUFFER_OVERRUN="BUFFER_OVERRUN",e.NUMERIC_FAULT="NUMERIC_FAULT",e.MISSING_NEW="MISSING_NEW",e.INVALID_ARGUMENT="INVALID_ARGUMENT",e.MISSING_ARGUMENT="MISSING_ARGUMENT",e.UNEXPECTED_ARGUMENT="UNEXPECTED_ARGUMENT",e.CALL_EXCEPTION="CALL_EXCEPTION",e.INSUFFICIENT_FUNDS="INSUFFICIENT_FUNDS",e.NONCE_EXPIRED="NONCE_EXPIRED",e.REPLACEMENT_UNDERPRICED="REPLACEMENT_UNDERPRICED",e.UNPREDICTABLE_GAS_LIMIT="UNPREDICTABLE_GAS_LIMIT",e.TRANSACTION_REPLACED="TRANSACTION_REPLACED",e.ACTION_REJECTED="ACTION_REJECTED"})(xe||(xe={}));const No="0123456789abcdef";class nt{constructor(t){Object.defineProperty(this,"version",{enumerable:!0,value:t,writable:!1})}_log(t,r){const n=t.toLowerCase();Ln[n]==null&&this.throwArgumentError("invalid log level name","logLevel",t),!(Po>Ln[n])&&console.log.apply(console,r)}debug(...t){this._log(nt.levels.DEBUG,t)}info(...t){this._log(nt.levels.INFO,t)}warn(...t){this._log(nt.levels.WARNING,t)}makeError(t,r,n){if(xo)return this.makeError("censored error",r,{});r||(r=nt.errors.UNKNOWN_ERROR),n||(n={});const i=[];Object.keys(n).forEach(y=>{const w=n[y];try{if(w instanceof Uint8Array){let x="";for(let T=0;T<w.length;T++)x+=No[w[T]>>4],x+=No[w[T]&15];i.push(y+"=Uint8Array(0x"+x+")")}else i.push(y+"="+JSON.stringify(w))}catch{i.push(y+"="+JSON.stringify(n[y].toString()))}}),i.push(`code=${r}`),i.push(`version=${this.version}`);const s=t;let a="";switch(r){case xe.NUMERIC_FAULT:{a="NUMERIC_FAULT";const y=t;switch(y){case"overflow":case"underflow":case"division-by-zero":a+="-"+y;break;case"negative-power":case"negative-width":a+="-unsupported";break;case"unbound-bitwise-result":a+="-unbound-result";break}break}case xe.CALL_EXCEPTION:case xe.INSUFFICIENT_FUNDS:case xe.MISSING_NEW:case xe.NONCE_EXPIRED:case xe.REPLACEMENT_UNDERPRICED:case xe.TRANSACTION_REPLACED:case xe.UNPREDICTABLE_GAS_LIMIT:a=r;break}a&&(t+=" [ See: https://links.ethers.org/v5-errors-"+a+" ]"),i.length&&(t+=" ("+i.join(", ")+")");const l=new Error(t);return l.reason=s,l.code=r,Object.keys(n).forEach(function(y){l[y]=n[y]}),l}throwError(t,r,n){throw this.makeError(t,r,n)}throwArgumentError(t,r,n){return this.throwError(t,nt.errors.INVALID_ARGUMENT,{argument:r,value:n})}assert(t,r,n,i){t||this.throwError(r,n,i)}assertArgument(t,r,n,i){t||this.throwArgumentError(r,n,i)}checkNormalize(t){Oo&&this.throwError("platform missing String.prototype.normalize",nt.errors.UNSUPPORTED_OPERATION,{operation:"String.prototype.normalize",form:Oo})}checkSafeUint53(t,r){typeof t=="number"&&(r==null&&(r="value not safe"),(t<0||t>=9007199254740991)&&this.throwError(r,nt.errors.NUMERIC_FAULT,{operation:"checkSafeInteger",fault:"out-of-safe-range",value:t}),t%1&&this.throwError(r,nt.errors.NUMERIC_FAULT,{operation:"checkSafeInteger",fault:"non-integer",value:t}))}checkArgumentCount(t,r,n){n?n=": "+n:n="",t<r&&this.throwError("missing argument"+n,nt.errors.MISSING_ARGUMENT,{count:t,expectedCount:r}),t>r&&this.throwError("too many arguments"+n,nt.errors.UNEXPECTED_ARGUMENT,{count:t,expectedCount:r})}checkNew(t,r){(t===Object||t==null)&&this.throwError("missing new",nt.errors.MISSING_NEW,{name:r.name})}checkAbstract(t,r){t===r?this.throwError("cannot instantiate abstract class "+JSON.stringify(r.name)+" directly; use a sub-class",nt.errors.UNSUPPORTED_OPERATION,{name:t.name,operation:"new"}):(t===Object||t==null)&&this.throwError("missing new",nt.errors.MISSING_NEW,{name:r.name})}static globalLogger(){return Zi||(Zi=new nt(Tc)),Zi}static setCensorship(t,r){if(!t&&r&&this.globalLogger().throwError("cannot permanently disable censorship",nt.errors.UNSUPPORTED_OPERATION,{operation:"setCensorship"}),go){if(!t)return;this.globalLogger().throwError("error censorship permanent",nt.errors.UNSUPPORTED_OPERATION,{operation:"setCensorship"})}xo=!!t,go=!!r}static setLogLevel(t){const r=Ln[t.toLowerCase()];if(r==null){nt.globalLogger().warn("invalid log level - "+t);return}Po=r}static from(t){return new nt(t)}}nt.errors=xe;nt.levels=$i;const zc="bytes/5.7.0",Be=new nt(zc);function za(e){return!!e.toHexString}function Kr(e){return e.slice||(e.slice=function(){const t=Array.prototype.slice.call(arguments);return Kr(new Uint8Array(Array.prototype.slice.apply(e,t)))}),e}function Eo(e){return typeof e=="number"&&e==e&&e%1===0}function Es(e){if(e==null)return!1;if(e.constructor===Uint8Array)return!0;if(typeof e=="string"||!Eo(e.length)||e.length<0)return!1;for(let t=0;t<e.length;t++){const r=e[t];if(!Eo(r)||r<0||r>=256)return!1}return!0}function se(e,t){if(t||(t={}),typeof e=="number"){Be.checkSafeUint53(e,"invalid arrayify value");const r=[];for(;e;)r.unshift(e&255),e=parseInt(String(e/256));return r.length===0&&r.push(0),Kr(new Uint8Array(r))}if(t.allowMissingPrefix&&typeof e=="string"&&e.substring(0,2)!=="0x"&&(e="0x"+e),za(e)&&(e=e.toHexString()),Ee(e)){let r=e.substring(2);r.length%2&&(t.hexPad==="left"?r="0"+r:t.hexPad==="right"?r+="0":Be.throwArgumentError("hex data is odd-length","value",e));const n=[];for(let i=0;i<r.length;i+=2)n.push(parseInt(r.substring(i,i+2),16));return Kr(new Uint8Array(n))}return Es(e)?Kr(new Uint8Array(e)):Be.throwArgumentError("invalid arrayify value","value",e)}function vr(e){const t=e.map(i=>se(i)),r=t.reduce((i,s)=>i+s.length,0),n=new Uint8Array(r);return t.reduce((i,s)=>(n.set(s,i),i+s.length),0),Kr(n)}function Ee(e,t){return!(typeof e!="string"||!e.match(/^0x[0-9A-Fa-f]*$/)||t&&e.length!==2+2*t)}const Di="0123456789abcdef";function Kt(e,t){if(t||(t={}),typeof e=="number"){Be.checkSafeUint53(e,"invalid hexlify value");let r="";for(;e;)r=Di[e&15]+r,e=Math.floor(e/16);return r.length?(r.length%2&&(r="0"+r),"0x"+r):"0x00"}if(typeof e=="bigint")return e=e.toString(16),e.length%2?"0x0"+e:"0x"+e;if(t.allowMissingPrefix&&typeof e=="string"&&e.substring(0,2)!=="0x"&&(e="0x"+e),za(e))return e.toHexString();if(Ee(e))return e.length%2&&(t.hexPad==="left"?e="0x0"+e.substring(2):t.hexPad==="right"?e+="0":Be.throwArgumentError("hex data is odd-length","value",e)),e.toLowerCase();if(Es(e)){let r="0x";for(let n=0;n<e.length;n++){let i=e[n];r+=Di[(i&240)>>4]+Di[i&15]}return r}return Be.throwArgumentError("invalid hexlify value","value",e)}function kc(e,t,r){return typeof e!="string"?e=Kt(e):(!Ee(e)||e.length%2)&&Be.throwArgumentError("invalid hexData","value",e),t=2+2*t,r!=null?"0x"+e.substring(t,2+2*r):"0x"+e.substring(t)}function Lc(e){let t="0x";return e.forEach(r=>{t+=Kt(r).substring(2)}),t}function ka(e,t){for(typeof e!="string"?e=Kt(e):Ee(e)||Be.throwArgumentError("invalid hex string","value",e),e.length>2*t+2&&Be.throwArgumentError("value out of range","value",arguments[1]);e.length<2*t+2;)e="0x0"+e.substring(2);return e}const Ac="bignumber/5.7.0";var Dn=Ec.BN;const Se=new nt(Ac),Ci={},To=9007199254740991;let Mo=!1;class Gt{constructor(t,r){t!==Ci&&Se.throwError("cannot call constructor directly; use BigNumber.from",nt.errors.UNSUPPORTED_OPERATION,{operation:"new (BigNumber)"}),this._hex=r,this._isBigNumber=!0,Object.freeze(this)}fromTwos(t){return oe(ht(this).fromTwos(t))}toTwos(t){return oe(ht(this).toTwos(t))}abs(){return this._hex[0]==="-"?Gt.from(this._hex.substring(1)):this}add(t){return oe(ht(this).add(ht(t)))}sub(t){return oe(ht(this).sub(ht(t)))}div(t){return Gt.from(t).isZero()&&pe("division-by-zero","div"),oe(ht(this).div(ht(t)))}mul(t){return oe(ht(this).mul(ht(t)))}mod(t){const r=ht(t);return r.isNeg()&&pe("division-by-zero","mod"),oe(ht(this).umod(r))}pow(t){const r=ht(t);return r.isNeg()&&pe("negative-power","pow"),oe(ht(this).pow(r))}and(t){const r=ht(t);return(this.isNegative()||r.isNeg())&&pe("unbound-bitwise-result","and"),oe(ht(this).and(r))}or(t){const r=ht(t);return(this.isNegative()||r.isNeg())&&pe("unbound-bitwise-result","or"),oe(ht(this).or(r))}xor(t){const r=ht(t);return(this.isNegative()||r.isNeg())&&pe("unbound-bitwise-result","xor"),oe(ht(this).xor(r))}mask(t){return(this.isNegative()||t<0)&&pe("negative-width","mask"),oe(ht(this).maskn(t))}shl(t){return(this.isNegative()||t<0)&&pe("negative-width","shl"),oe(ht(this).shln(t))}shr(t){return(this.isNegative()||t<0)&&pe("negative-width","shr"),oe(ht(this).shrn(t))}eq(t){return ht(this).eq(ht(t))}lt(t){return ht(this).lt(ht(t))}lte(t){return ht(this).lte(ht(t))}gt(t){return ht(this).gt(ht(t))}gte(t){return ht(this).gte(ht(t))}isNegative(){return this._hex[0]==="-"}isZero(){return ht(this).isZero()}toNumber(){try{return ht(this).toNumber()}catch{pe("overflow","toNumber",this.toString())}return null}toBigInt(){try{return BigInt(this.toString())}catch{}return Se.throwError("this platform does not support BigInt",nt.errors.UNSUPPORTED_OPERATION,{value:this.toString()})}toString(){return arguments.length>0&&(arguments[0]===10?Mo||(Mo=!0,Se.warn("BigNumber.toString does not accept any parameters; base-10 is assumed")):arguments[0]===16?Se.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()",nt.errors.UNEXPECTED_ARGUMENT,{}):Se.throwError("BigNumber.toString does not accept parameters",nt.errors.UNEXPECTED_ARGUMENT,{})),ht(this).toString(10)}toHexString(){return this._hex}toJSON(t){return{type:"BigNumber",hex:this.toHexString()}}static from(t){if(t instanceof Gt)return t;if(typeof t=="string")return t.match(/^-?0x[0-9a-f]+$/i)?new Gt(Ci,en(t)):t.match(/^-?[0-9]+$/)?new Gt(Ci,en(new Dn(t))):Se.throwArgumentError("invalid BigNumber string","value",t);if(typeof t=="number")return t%1&&pe("underflow","BigNumber.from",t),(t>=To||t<=-To)&&pe("overflow","BigNumber.from",t),Gt.from(String(t));const r=t;if(typeof r=="bigint")return Gt.from(r.toString());if(Es(r))return Gt.from(Kt(r));if(r)if(r.toHexString){const n=r.toHexString();if(typeof n=="string")return Gt.from(n)}else{let n=r._hex;if(n==null&&r.type==="BigNumber"&&(n=r.hex),typeof n=="string"&&(Ee(n)||n[0]==="-"&&Ee(n.substring(1))))return Gt.from(n)}return Se.throwArgumentError("invalid BigNumber value","value",t)}static isBigNumber(t){return!!(t&&t._isBigNumber)}}function en(e){if(typeof e!="string")return en(e.toString(16));if(e[0]==="-")return e=e.substring(1),e[0]==="-"&&Se.throwArgumentError("invalid hex","value",e),e=en(e),e==="0x00"?e:"-"+e;if(e.substring(0,2)!=="0x"&&(e="0x"+e),e==="0x")return"0x00";for(e.length%2&&(e="0x0"+e.substring(2));e.length>4&&e.substring(0,4)==="0x00";)e="0x"+e.substring(4);return e}function oe(e){return Gt.from(en(e))}function ht(e){const t=Gt.from(e).toHexString();return t[0]==="-"?new Dn("-"+t.substring(3),16):new Dn(t.substring(2),16)}function pe(e,t,r){const n={fault:e,operation:t};return r!=null&&(n.value=r),Se.throwError(e,nt.errors.NUMERIC_FAULT,n)}function jc(e){return new Dn(e,36).toString(16)}const Rc="properties/5.7.0";globalThis&&globalThis.__awaiter;const La=new nt(Rc);function ee(e,t,r){Object.defineProperty(e,t,{enumerable:!0,value:r,writable:!1})}function yn(e,t){for(let r=0;r<32;r++){if(e[t])return e[t];if(!e.prototype||typeof e.prototype!="object")break;e=Object.getPrototypeOf(e.prototype).constructor}return null}const Sc={bigint:!0,boolean:!0,function:!0,number:!0,string:!0};function Aa(e){if(e==null||Sc[typeof e])return!0;if(Array.isArray(e)||typeof e=="object"){if(!Object.isFrozen(e))return!1;const t=Object.keys(e);for(let r=0;r<t.length;r++){let n=null;try{n=e[t[r]]}catch{continue}if(!Aa(n))return!1}return!0}return La.throwArgumentError(`Cannot deepCopy ${typeof e}`,"object",e)}function Xc(e){if(Aa(e))return e;if(Array.isArray(e))return Object.freeze(e.map(t=>ts(t)));if(typeof e=="object"){const t={};for(const r in e){const n=e[r];n!==void 0&&ee(t,r,ts(n))}return t}return La.throwArgumentError(`Cannot deepCopy ${typeof e}`,"object",e)}function ts(e){return Xc(e)}class ri{constructor(t){for(const r in t)this[r]=ts(t[r])}}const ln="abi/5.7.0",pt=new nt(ln),wr={};let zo={calldata:!0,memory:!0,storage:!0},Uc={calldata:!0,memory:!0};function bn(e,t){if(e==="bytes"||e==="string"){if(zo[t])return!0}else if(e==="address"){if(t==="payable")return!0}else if((e.indexOf("[")>=0||e==="tuple")&&Uc[t])return!0;return(zo[t]||t==="payable")&&pt.throwArgumentError("invalid modifier","name",t),!1}function Bc(e,t){let r=e;function n(l){pt.throwArgumentError(`unexpected character at position ${l}`,"param",e)}e=e.replace(/\s/g," ");function i(l){let y={type:"",name:"",parent:l,state:{allowType:!0}};return t&&(y.indexed=!1),y}let s={type:"",name:"",state:{allowType:!0}},a=s;for(let l=0;l<e.length;l++){let y=e[l];switch(y){case"(":a.state.allowType&&a.type===""?a.type="tuple":a.state.allowParams||n(l),a.state.allowType=!1,a.type=zr(a.type),a.components=[i(a)],a=a.components[0];break;case")":delete a.state,a.name==="indexed"&&(t||n(l),a.indexed=!0,a.name=""),bn(a.type,a.name)&&(a.name=""),a.type=zr(a.type);let w=a;a=a.parent,a||n(l),delete w.parent,a.state.allowParams=!1,a.state.allowName=!0,a.state.allowArray=!0;break;case",":delete a.state,a.name==="indexed"&&(t||n(l),a.indexed=!0,a.name=""),bn(a.type,a.name)&&(a.name=""),a.type=zr(a.type);let x=i(a.parent);a.parent.components.push(x),delete a.parent,a=x;break;case" ":a.state.allowType&&a.type!==""&&(a.type=zr(a.type),delete a.state.allowType,a.state.allowName=!0,a.state.allowParams=!0),a.state.allowName&&a.name!==""&&(a.name==="indexed"?(t||n(l),a.indexed&&n(l),a.indexed=!0,a.name=""):bn(a.type,a.name)?a.name="":a.state.allowName=!1);break;case"[":a.state.allowArray||n(l),a.type+=y,a.state.allowArray=!1,a.state.allowName=!1,a.state.readArray=!0;break;case"]":a.state.readArray||n(l),a.type+=y,a.state.readArray=!1,a.state.allowArray=!0,a.state.allowName=!0;break;default:a.state.allowType?(a.type+=y,a.state.allowParams=!0,a.state.allowArray=!0):a.state.allowName?(a.name+=y,delete a.state.allowArray):a.state.readArray?a.type+=y:n(l)}}return a.parent&&pt.throwArgumentError("unexpected eof","param",e),delete s.state,a.name==="indexed"?(t||n(r.length-7),a.indexed&&n(r.length-7),a.indexed=!0,a.name=""):bn(a.type,a.name)&&(a.name=""),s.type=zr(s.type),s}function An(e,t){for(let r in t)ee(e,r,t[r])}const yt=Object.freeze({sighash:"sighash",minimal:"minimal",full:"full",json:"json"}),Hc=new RegExp(/^(.*)\[([0-9]*)\]$/);class $t{constructor(t,r){t!==wr&&pt.throwError("use fromString",nt.errors.UNSUPPORTED_OPERATION,{operation:"new ParamType()"}),An(this,r);let n=this.type.match(Hc);n?An(this,{arrayLength:parseInt(n[2]||"-1"),arrayChildren:$t.fromObject({type:n[1],components:this.components}),baseType:"array"}):An(this,{arrayLength:null,arrayChildren:null,baseType:this.components!=null?"tuple":this.type}),this._isParamType=!0,Object.freeze(this)}format(t){if(t||(t=yt.sighash),yt[t]||pt.throwArgumentError("invalid format type","format",t),t===yt.json){let n={type:this.baseType==="tuple"?"tuple":this.type,name:this.name||void 0};return typeof this.indexed=="boolean"&&(n.indexed=this.indexed),this.components&&(n.components=this.components.map(i=>JSON.parse(i.format(t)))),JSON.stringify(n)}let r="";return this.baseType==="array"?(r+=this.arrayChildren.format(t),r+="["+(this.arrayLength<0?"":String(this.arrayLength))+"]"):this.baseType==="tuple"?(t!==yt.sighash&&(r+=this.type),r+="("+this.components.map(n=>n.format(t)).join(t===yt.full?", ":",")+")"):r+=this.type,t!==yt.sighash&&(this.indexed===!0&&(r+=" indexed"),t===yt.full&&this.name&&(r+=" "+this.name)),r}static from(t,r){return typeof t=="string"?$t.fromString(t,r):$t.fromObject(t)}static fromObject(t){return $t.isParamType(t)?t:new $t(wr,{name:t.name||null,type:zr(t.type),indexed:t.indexed==null?null:!!t.indexed,components:t.components?t.components.map($t.fromObject):null})}static fromString(t,r){function n(i){return $t.fromObject({name:i.name,type:i.type,indexed:i.indexed,components:i.components})}return n(Bc(t,!!r))}static isParamType(t){return!!(t!=null&&t._isParamType)}}function rn(e,t){return Zc(e).map(r=>$t.fromString(r,t))}class Me{constructor(t,r){t!==wr&&pt.throwError("use a static from method",nt.errors.UNSUPPORTED_OPERATION,{operation:"new Fragment()"}),An(this,r),this._isFragment=!0,Object.freeze(this)}static from(t){return Me.isFragment(t)?t:typeof t=="string"?Me.fromString(t):Me.fromObject(t)}static fromObject(t){if(Me.isFragment(t))return t;switch(t.type){case"function":return Ne.fromObject(t);case"event":return Te.fromObject(t);case"constructor":return Oe.fromObject(t);case"error":return Ue.fromObject(t);case"fallback":case"receive":return null}return pt.throwArgumentError("invalid fragment object","value",t)}static fromString(t){return t=t.replace(/\s/g," "),t=t.replace(/\(/g," (").replace(/\)/g,") ").replace(/\s+/g," "),t=t.trim(),t.split(" ")[0]==="event"?Te.fromString(t.substring(5).trim()):t.split(" ")[0]==="function"?Ne.fromString(t.substring(8).trim()):t.split("(")[0].trim()==="constructor"?Oe.fromString(t.trim()):t.split(" ")[0]==="error"?Ue.fromString(t.substring(5).trim()):pt.throwArgumentError("unsupported fragment","value",t)}static isFragment(t){return!!(t&&t._isFragment)}}class Te extends Me{format(t){if(t||(t=yt.sighash),yt[t]||pt.throwArgumentError("invalid format type","format",t),t===yt.json)return JSON.stringify({type:"event",anonymous:this.anonymous,name:this.name,inputs:this.inputs.map(n=>JSON.parse(n.format(t)))});let r="";return t!==yt.sighash&&(r+="event "),r+=this.name+"("+this.inputs.map(n=>n.format(t)).join(t===yt.full?", ":",")+") ",t!==yt.sighash&&this.anonymous&&(r+="anonymous "),r.trim()}static from(t){return typeof t=="string"?Te.fromString(t):Te.fromObject(t)}static fromObject(t){if(Te.isEventFragment(t))return t;t.type!=="event"&&pt.throwArgumentError("invalid event object","value",t);const r={name:nn(t.name),anonymous:t.anonymous,inputs:t.inputs?t.inputs.map($t.fromObject):[],type:"event"};return new Te(wr,r)}static fromString(t){let r=t.match(sn);r||pt.throwArgumentError("invalid event string","value",t);let n=!1;return r[3].split(" ").forEach(i=>{switch(i.trim()){case"anonymous":n=!0;break;case"":break;default:pt.warn("unknown modifier: "+i)}}),Te.fromObject({name:r[1].trim(),anonymous:n,inputs:rn(r[2],!0),type:"event"})}static isEventFragment(t){return t&&t._isFragment&&t.type==="event"}}function ja(e,t){t.gas=null;let r=e.split("@");return r.length!==1?(r.length>2&&pt.throwArgumentError("invalid human-readable ABI signature","value",e),r[1].match(/^[0-9]+$/)||pt.throwArgumentError("invalid human-readable ABI signature gas","value",e),t.gas=Gt.from(r[1]),r[0]):e}function Ra(e,t){t.constant=!1,t.payable=!1,t.stateMutability="nonpayable",e.split(" ").forEach(r=>{switch(r.trim()){case"constant":t.constant=!0;break;case"payable":t.payable=!0,t.stateMutability="payable";break;case"nonpayable":t.payable=!1,t.stateMutability="nonpayable";break;case"pure":t.constant=!0,t.stateMutability="pure";break;case"view":t.constant=!0,t.stateMutability="view";break;case"external":case"public":case"":break;default:console.log("unknown modifier: "+r)}})}function Sa(e){let t={constant:!1,payable:!0,stateMutability:"payable"};return e.stateMutability!=null?(t.stateMutability=e.stateMutability,t.constant=t.stateMutability==="view"||t.stateMutability==="pure",e.constant!=null&&!!e.constant!==t.constant&&pt.throwArgumentError("cannot have constant function with mutability "+t.stateMutability,"value",e),t.payable=t.stateMutability==="payable",e.payable!=null&&!!e.payable!==t.payable&&pt.throwArgumentError("cannot have payable function with mutability "+t.stateMutability,"value",e)):e.payable!=null?(t.payable=!!e.payable,e.constant==null&&!t.payable&&e.type!=="constructor"&&pt.throwArgumentError("unable to determine stateMutability","value",e),t.constant=!!e.constant,t.constant?t.stateMutability="view":t.stateMutability=t.payable?"payable":"nonpayable",t.payable&&t.constant&&pt.throwArgumentError("cannot have constant payable function","value",e)):e.constant!=null?(t.constant=!!e.constant,t.payable=!t.constant,t.stateMutability=t.constant?"view":"payable"):e.type!=="constructor"&&pt.throwArgumentError("unable to determine stateMutability","value",e),t}class Oe extends Me{format(t){if(t||(t=yt.sighash),yt[t]||pt.throwArgumentError("invalid format type","format",t),t===yt.json)return JSON.stringify({type:"constructor",stateMutability:this.stateMutability!=="nonpayable"?this.stateMutability:void 0,payable:this.payable,gas:this.gas?this.gas.toNumber():void 0,inputs:this.inputs.map(n=>JSON.parse(n.format(t)))});t===yt.sighash&&pt.throwError("cannot format a constructor for sighash",nt.errors.UNSUPPORTED_OPERATION,{operation:"format(sighash)"});let r="constructor("+this.inputs.map(n=>n.format(t)).join(t===yt.full?", ":",")+") ";return this.stateMutability&&this.stateMutability!=="nonpayable"&&(r+=this.stateMutability+" "),r.trim()}static from(t){return typeof t=="string"?Oe.fromString(t):Oe.fromObject(t)}static fromObject(t){if(Oe.isConstructorFragment(t))return t;t.type!=="constructor"&&pt.throwArgumentError("invalid constructor object","value",t);let r=Sa(t);r.constant&&pt.throwArgumentError("constructor cannot be constant","value",t);const n={name:null,type:t.type,inputs:t.inputs?t.inputs.map($t.fromObject):[],payable:r.payable,stateMutability:r.stateMutability,gas:t.gas?Gt.from(t.gas):null};return new Oe(wr,n)}static fromString(t){let r={type:"constructor"};t=ja(t,r);let n=t.match(sn);return(!n||n[1].trim()!=="constructor")&&pt.throwArgumentError("invalid constructor string","value",t),r.inputs=rn(n[2].trim(),!1),Ra(n[3].trim(),r),Oe.fromObject(r)}static isConstructorFragment(t){return t&&t._isFragment&&t.type==="constructor"}}class Ne extends Oe{format(t){if(t||(t=yt.sighash),yt[t]||pt.throwArgumentError("invalid format type","format",t),t===yt.json)return JSON.stringify({type:"function",name:this.name,constant:this.constant,stateMutability:this.stateMutability!=="nonpayable"?this.stateMutability:void 0,payable:this.payable,gas:this.gas?this.gas.toNumber():void 0,inputs:this.inputs.map(n=>JSON.parse(n.format(t))),outputs:this.outputs.map(n=>JSON.parse(n.format(t)))});let r="";return t!==yt.sighash&&(r+="function "),r+=this.name+"("+this.inputs.map(n=>n.format(t)).join(t===yt.full?", ":",")+") ",t!==yt.sighash&&(this.stateMutability?this.stateMutability!=="nonpayable"&&(r+=this.stateMutability+" "):this.constant&&(r+="view "),this.outputs&&this.outputs.length&&(r+="returns ("+this.outputs.map(n=>n.format(t)).join(", ")+") "),this.gas!=null&&(r+="@"+this.gas.toString()+" ")),r.trim()}static from(t){return typeof t=="string"?Ne.fromString(t):Ne.fromObject(t)}static fromObject(t){if(Ne.isFunctionFragment(t))return t;t.type!=="function"&&pt.throwArgumentError("invalid function object","value",t);let r=Sa(t);const n={type:t.type,name:nn(t.name),constant:r.constant,inputs:t.inputs?t.inputs.map($t.fromObject):[],outputs:t.outputs?t.outputs.map($t.fromObject):[],payable:r.payable,stateMutability:r.stateMutability,gas:t.gas?Gt.from(t.gas):null};return new Ne(wr,n)}static fromString(t){let r={type:"function"};t=ja(t,r);let n=t.split(" returns ");n.length>2&&pt.throwArgumentError("invalid function string","value",t);let i=n[0].match(sn);if(i||pt.throwArgumentError("invalid function signature","value",t),r.name=i[1].trim(),r.name&&nn(r.name),r.inputs=rn(i[2],!1),Ra(i[3].trim(),r),n.length>1){let s=n[1].match(sn);(s[1].trim()!=""||s[3].trim()!="")&&pt.throwArgumentError("unexpected tokens","value",t),r.outputs=rn(s[2],!1)}else r.outputs=[];return Ne.fromObject(r)}static isFunctionFragment(t){return t&&t._isFragment&&t.type==="function"}}function ko(e){const t=e.format();return(t==="Error(string)"||t==="Panic(uint256)")&&pt.throwArgumentError(`cannot specify user defined ${t} error`,"fragment",e),e}class Ue extends Me{format(t){if(t||(t=yt.sighash),yt[t]||pt.throwArgumentError("invalid format type","format",t),t===yt.json)return JSON.stringify({type:"error",name:this.name,inputs:this.inputs.map(n=>JSON.parse(n.format(t)))});let r="";return t!==yt.sighash&&(r+="error "),r+=this.name+"("+this.inputs.map(n=>n.format(t)).join(t===yt.full?", ":",")+") ",r.trim()}static from(t){return typeof t=="string"?Ue.fromString(t):Ue.fromObject(t)}static fromObject(t){if(Ue.isErrorFragment(t))return t;t.type!=="error"&&pt.throwArgumentError("invalid error object","value",t);const r={type:t.type,name:nn(t.name),inputs:t.inputs?t.inputs.map($t.fromObject):[]};return ko(new Ue(wr,r))}static fromString(t){let r={type:"error"},n=t.match(sn);return n||pt.throwArgumentError("invalid error signature","value",t),r.name=n[1].trim(),r.name&&nn(r.name),r.inputs=rn(n[2],!1),ko(Ue.fromObject(r))}static isErrorFragment(t){return t&&t._isFragment&&t.type==="error"}}function zr(e){return e.match(/^uint($|[^1-9])/)?e="uint256"+e.substring(4):e.match(/^int($|[^1-9])/)&&(e="int256"+e.substring(3)),e}const Fc=new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");function nn(e){return(!e||!e.match(Fc))&&pt.throwArgumentError(`invalid identifier "${e}"`,"value",e),e}const sn=new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");function Zc(e){e=e.trim();let t=[],r="",n=0;for(let i=0;i<e.length;i++){let s=e[i];s===","&&n===0?(t.push(r),r=""):(r+=s,s==="("?n++:s===")"&&(n--,n===-1&&pt.throwArgumentError("unbalanced parenthesis","value",e)))}return r&&t.push(r),t}const Ts=new nt(ln);function Dc(e){const t=[],r=function(n,i){if(Array.isArray(i))for(let s in i){const a=n.slice();a.push(s);try{r(a,i[s])}catch(l){t.push({path:a,error:l})}}};return r([],e),t}let Ze=class{constructor(t,r,n,i){this.name=t,this.type=r,this.localName=n,this.dynamic=i}_throwError(t,r){Ts.throwArgumentError(t,this.localName,r)}};class es{constructor(t){ee(this,"wordSize",t||32),this._data=[],this._dataLength=0,this._padding=new Uint8Array(t)}get data(){return Lc(this._data)}get length(){return this._dataLength}_writeData(t){return this._data.push(t),this._dataLength+=t.length,t.length}appendWriter(t){return this._writeData(vr(t._data))}writeBytes(t){let r=se(t);const n=r.length%this.wordSize;return n&&(r=vr([r,this._padding.slice(n)])),this._writeData(r)}_getValue(t){let r=se(Gt.from(t));return r.length>this.wordSize&&Ts.throwError("value out-of-bounds",nt.errors.BUFFER_OVERRUN,{length:this.wordSize,offset:r.length}),r.length%this.wordSize&&(r=vr([this._padding.slice(r.length%this.wordSize),r])),r}writeValue(t){return this._writeData(this._getValue(t))}writeUpdatableValue(){const t=this._data.length;return this._data.push(this._padding),this._dataLength+=this.wordSize,r=>{this._data[t]=this._getValue(r)}}}class Cn{constructor(t,r,n,i){ee(this,"_data",se(t)),ee(this,"wordSize",r||32),ee(this,"_coerceFunc",n),ee(this,"allowLoose",i),this._offset=0}get data(){return Kt(this._data)}get consumed(){return this._offset}static coerce(t,r){let n=t.match("^u?int([0-9]+)$");return n&&parseInt(n[1])<=48&&(r=r.toNumber()),r}coerce(t,r){return this._coerceFunc?this._coerceFunc(t,r):Cn.coerce(t,r)}_peekBytes(t,r,n){let i=Math.ceil(r/this.wordSize)*this.wordSize;return this._offset+i>this._data.length&&(this.allowLoose&&n&&this._offset+r<=this._data.length?i=r:Ts.throwError("data out-of-bounds",nt.errors.BUFFER_OVERRUN,{length:this._data.length,offset:this._offset+i})),this._data.slice(this._offset,this._offset+i)}subReader(t){return new Cn(this._data.slice(this._offset+t),this.wordSize,this._coerceFunc,this.allowLoose)}readBytes(t,r){let n=this._peekBytes(0,t,!!r);return this._offset+=n.length,n.slice(0,t)}readValue(){return Gt.from(this.readBytes(this.wordSize))}}var rs={},Cc={get exports(){return rs},set exports(e){rs=e}};/**
 * [js-sha3]{@link https://github.com/emn178/js-sha3}
 *
 * @version 0.8.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2015-2018
 * @license MIT
 */(function(e){(function(){var t="input is invalid type",r="finalize already called",n=typeof window=="object",i=n?window:{};i.JS_SHA3_NO_WINDOW&&(n=!1);var s=!n&&typeof self=="object",a=!i.JS_SHA3_NO_NODE_JS&&typeof process=="object"&&process.versions&&process.versions.node;a?i=Ur:s&&(i=self);var l=!i.JS_SHA3_NO_COMMON_JS&&!0&&e.exports,y=!i.JS_SHA3_NO_ARRAY_BUFFER&&typeof ArrayBuffer<"u",w="0123456789abcdef".split(""),x=[31,7936,2031616,520093696],T=[4,1024,262144,67108864],N=[1,256,65536,16777216],j=[6,1536,393216,100663296],U=[0,8,16,24],Y=[1,0,32898,0,32906,2147483648,2147516416,2147483648,32907,0,2147483649,0,2147516545,2147483648,32777,2147483648,138,0,136,0,2147516425,0,2147483658,0,2147516555,0,139,2147483648,32905,2147483648,32771,2147483648,32770,2147483648,128,2147483648,32778,0,2147483658,2147483648,2147516545,2147483648,32896,2147483648,2147483649,0,2147516424,2147483648],rt=[224,256,384,512],ft=[128,256],$=["hex","buffer","arrayBuffer","array","digest"],et={128:168,256:136};(i.JS_SHA3_NO_NODE_JS||!Array.isArray)&&(Array.isArray=function(c){return Object.prototype.toString.call(c)==="[object Array]"}),y&&(i.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW||!ArrayBuffer.isView)&&(ArrayBuffer.isView=function(c){return typeof c=="object"&&c.buffer&&c.buffer.constructor===ArrayBuffer});for(var S=function(c,E,k){return function(L){return new f(c,E,c).update(L)[k]()}},A=function(c,E,k){return function(L,X){return new f(c,E,X).update(L)[k]()}},q=function(c,E,k){return function(L,X,_,D){return o["cshake"+c].update(L,X,_,D)[k]()}},tt=function(c,E,k){return function(L,X,_,D){return o["kmac"+c].update(L,X,_,D)[k]()}},ut=function(c,E,k,L){for(var X=0;X<$.length;++X){var _=$[X];c[_]=E(k,L,_)}return c},bt=function(c,E){var k=S(c,E,"hex");return k.create=function(){return new f(c,E,c)},k.update=function(L){return k.create().update(L)},ut(k,S,c,E)},W=function(c,E){var k=A(c,E,"hex");return k.create=function(L){return new f(c,E,L)},k.update=function(L,X){return k.create(X).update(L)},ut(k,A,c,E)},Z=function(c,E){var k=et[c],L=q(c,E,"hex");return L.create=function(X,_,D){return!_&&!D?o["shake"+c].create(X):new f(c,E,X).bytepad([_,D],k)},L.update=function(X,_,D,F){return L.create(_,D,F).update(X)},ut(L,q,c,E)},B=function(c,E){var k=et[c],L=tt(c,E,"hex");return L.create=function(X,_,D){return new b(c,E,_).bytepad(["KMAC",D],k).bytepad([X],k)},L.update=function(X,_,D,F){return L.create(X,D,F).update(_)},ut(L,tt,c,E)},m=[{name:"keccak",padding:N,bits:rt,createMethod:bt},{name:"sha3",padding:j,bits:rt,createMethod:bt},{name:"shake",padding:x,bits:ft,createMethod:W},{name:"cshake",padding:T,bits:ft,createMethod:Z},{name:"kmac",padding:T,bits:ft,createMethod:B}],o={},u=[],h=0;h<m.length;++h)for(var p=m[h],v=p.bits,g=0;g<v.length;++g){var O=p.name+"_"+v[g];if(u.push(O),o[O]=p.createMethod(v[g],p.padding),p.name!=="sha3"){var d=p.name+v[g];u.push(d),o[d]=o[O]}}function f(c,E,k){this.blocks=[],this.s=[],this.padding=E,this.outputBits=k,this.reset=!0,this.finalized=!1,this.block=0,this.start=0,this.blockCount=1600-(c<<1)>>5,this.byteCount=this.blockCount<<2,this.outputBlocks=k>>5,this.extraBytes=(k&31)>>3;for(var L=0;L<50;++L)this.s[L]=0}f.prototype.update=function(c){if(this.finalized)throw new Error(r);var E,k=typeof c;if(k!=="string"){if(k==="object"){if(c===null)throw new Error(t);if(y&&c.constructor===ArrayBuffer)c=new Uint8Array(c);else if(!Array.isArray(c)&&(!y||!ArrayBuffer.isView(c)))throw new Error(t)}else throw new Error(t);E=!0}for(var L=this.blocks,X=this.byteCount,_=c.length,D=this.blockCount,F=0,Mt=this.s,V,st;F<_;){if(this.reset)for(this.reset=!1,L[0]=this.block,V=1;V<D+1;++V)L[V]=0;if(E)for(V=this.start;F<_&&V<X;++F)L[V>>2]|=c[F]<<U[V++&3];else for(V=this.start;F<_&&V<X;++F)st=c.charCodeAt(F),st<128?L[V>>2]|=st<<U[V++&3]:st<2048?(L[V>>2]|=(192|st>>6)<<U[V++&3],L[V>>2]|=(128|st&63)<<U[V++&3]):st<55296||st>=57344?(L[V>>2]|=(224|st>>12)<<U[V++&3],L[V>>2]|=(128|st>>6&63)<<U[V++&3],L[V>>2]|=(128|st&63)<<U[V++&3]):(st=65536+((st&1023)<<10|c.charCodeAt(++F)&1023),L[V>>2]|=(240|st>>18)<<U[V++&3],L[V>>2]|=(128|st>>12&63)<<U[V++&3],L[V>>2]|=(128|st>>6&63)<<U[V++&3],L[V>>2]|=(128|st&63)<<U[V++&3]);if(this.lastByteIndex=V,V>=X){for(this.start=V-X,this.block=L[D],V=0;V<D;++V)Mt[V]^=L[V];I(Mt),this.reset=!0}else this.start=V}return this},f.prototype.encode=function(c,E){var k=c&255,L=1,X=[k];for(c=c>>8,k=c&255;k>0;)X.unshift(k),c=c>>8,k=c&255,++L;return E?X.push(L):X.unshift(L),this.update(X),X.length},f.prototype.encodeString=function(c){var E,k=typeof c;if(k!=="string"){if(k==="object"){if(c===null)throw new Error(t);if(y&&c.constructor===ArrayBuffer)c=new Uint8Array(c);else if(!Array.isArray(c)&&(!y||!ArrayBuffer.isView(c)))throw new Error(t)}else throw new Error(t);E=!0}var L=0,X=c.length;if(E)L=X;else for(var _=0;_<c.length;++_){var D=c.charCodeAt(_);D<128?L+=1:D<2048?L+=2:D<55296||D>=57344?L+=3:(D=65536+((D&1023)<<10|c.charCodeAt(++_)&1023),L+=4)}return L+=this.encode(L*8),this.update(c),L},f.prototype.bytepad=function(c,E){for(var k=this.encode(E),L=0;L<c.length;++L)k+=this.encodeString(c[L]);var X=E-k%E,_=[];return _.length=X,this.update(_),this},f.prototype.finalize=function(){if(!this.finalized){this.finalized=!0;var c=this.blocks,E=this.lastByteIndex,k=this.blockCount,L=this.s;if(c[E>>2]|=this.padding[E&3],this.lastByteIndex===this.byteCount)for(c[0]=c[k],E=1;E<k+1;++E)c[E]=0;for(c[k-1]|=2147483648,E=0;E<k;++E)L[E]^=c[E];I(L)}},f.prototype.toString=f.prototype.hex=function(){this.finalize();for(var c=this.blockCount,E=this.s,k=this.outputBlocks,L=this.extraBytes,X=0,_=0,D="",F;_<k;){for(X=0;X<c&&_<k;++X,++_)F=E[X],D+=w[F>>4&15]+w[F&15]+w[F>>12&15]+w[F>>8&15]+w[F>>20&15]+w[F>>16&15]+w[F>>28&15]+w[F>>24&15];_%c===0&&(I(E),X=0)}return L&&(F=E[X],D+=w[F>>4&15]+w[F&15],L>1&&(D+=w[F>>12&15]+w[F>>8&15]),L>2&&(D+=w[F>>20&15]+w[F>>16&15])),D},f.prototype.arrayBuffer=function(){this.finalize();var c=this.blockCount,E=this.s,k=this.outputBlocks,L=this.extraBytes,X=0,_=0,D=this.outputBits>>3,F;L?F=new ArrayBuffer(k+1<<2):F=new ArrayBuffer(D);for(var Mt=new Uint32Array(F);_<k;){for(X=0;X<c&&_<k;++X,++_)Mt[_]=E[X];_%c===0&&I(E)}return L&&(Mt[X]=E[X],F=F.slice(0,D)),F},f.prototype.buffer=f.prototype.arrayBuffer,f.prototype.digest=f.prototype.array=function(){this.finalize();for(var c=this.blockCount,E=this.s,k=this.outputBlocks,L=this.extraBytes,X=0,_=0,D=[],F,Mt;_<k;){for(X=0;X<c&&_<k;++X,++_)F=_<<2,Mt=E[X],D[F]=Mt&255,D[F+1]=Mt>>8&255,D[F+2]=Mt>>16&255,D[F+3]=Mt>>24&255;_%c===0&&I(E)}return L&&(F=_<<2,Mt=E[X],D[F]=Mt&255,L>1&&(D[F+1]=Mt>>8&255),L>2&&(D[F+2]=Mt>>16&255)),D};function b(c,E,k){f.call(this,c,E,k)}b.prototype=new f,b.prototype.finalize=function(){return this.encode(this.outputBits,!0),f.prototype.finalize.call(this)};var I=function(c){var E,k,L,X,_,D,F,Mt,V,st,je,Pt,Ot,be,Nt,Et,Re,vt,P,M,z,R,J,ot,G,it,H,K,ct,mt,gt,sr,zt,kt,or,Lt,At,ar,jt,Rt,fr,St,Xt,ur,Ut,Bt,cr,Ht,Ft,lr,Zt,Dt,hr,Ct,It,dr,Vt,qt,Ve,qe,Ge,We,Ye;for(L=0;L<48;L+=2)X=c[0]^c[10]^c[20]^c[30]^c[40],_=c[1]^c[11]^c[21]^c[31]^c[41],D=c[2]^c[12]^c[22]^c[32]^c[42],F=c[3]^c[13]^c[23]^c[33]^c[43],Mt=c[4]^c[14]^c[24]^c[34]^c[44],V=c[5]^c[15]^c[25]^c[35]^c[45],st=c[6]^c[16]^c[26]^c[36]^c[46],je=c[7]^c[17]^c[27]^c[37]^c[47],Pt=c[8]^c[18]^c[28]^c[38]^c[48],Ot=c[9]^c[19]^c[29]^c[39]^c[49],E=Pt^(D<<1|F>>>31),k=Ot^(F<<1|D>>>31),c[0]^=E,c[1]^=k,c[10]^=E,c[11]^=k,c[20]^=E,c[21]^=k,c[30]^=E,c[31]^=k,c[40]^=E,c[41]^=k,E=X^(Mt<<1|V>>>31),k=_^(V<<1|Mt>>>31),c[2]^=E,c[3]^=k,c[12]^=E,c[13]^=k,c[22]^=E,c[23]^=k,c[32]^=E,c[33]^=k,c[42]^=E,c[43]^=k,E=D^(st<<1|je>>>31),k=F^(je<<1|st>>>31),c[4]^=E,c[5]^=k,c[14]^=E,c[15]^=k,c[24]^=E,c[25]^=k,c[34]^=E,c[35]^=k,c[44]^=E,c[45]^=k,E=Mt^(Pt<<1|Ot>>>31),k=V^(Ot<<1|Pt>>>31),c[6]^=E,c[7]^=k,c[16]^=E,c[17]^=k,c[26]^=E,c[27]^=k,c[36]^=E,c[37]^=k,c[46]^=E,c[47]^=k,E=st^(X<<1|_>>>31),k=je^(_<<1|X>>>31),c[8]^=E,c[9]^=k,c[18]^=E,c[19]^=k,c[28]^=E,c[29]^=k,c[38]^=E,c[39]^=k,c[48]^=E,c[49]^=k,be=c[0],Nt=c[1],Bt=c[11]<<4|c[10]>>>28,cr=c[10]<<4|c[11]>>>28,K=c[20]<<3|c[21]>>>29,ct=c[21]<<3|c[20]>>>29,qe=c[31]<<9|c[30]>>>23,Ge=c[30]<<9|c[31]>>>23,St=c[40]<<18|c[41]>>>14,Xt=c[41]<<18|c[40]>>>14,kt=c[2]<<1|c[3]>>>31,or=c[3]<<1|c[2]>>>31,Et=c[13]<<12|c[12]>>>20,Re=c[12]<<12|c[13]>>>20,Ht=c[22]<<10|c[23]>>>22,Ft=c[23]<<10|c[22]>>>22,mt=c[33]<<13|c[32]>>>19,gt=c[32]<<13|c[33]>>>19,We=c[42]<<2|c[43]>>>30,Ye=c[43]<<2|c[42]>>>30,Ct=c[5]<<30|c[4]>>>2,It=c[4]<<30|c[5]>>>2,Lt=c[14]<<6|c[15]>>>26,At=c[15]<<6|c[14]>>>26,vt=c[25]<<11|c[24]>>>21,P=c[24]<<11|c[25]>>>21,lr=c[34]<<15|c[35]>>>17,Zt=c[35]<<15|c[34]>>>17,sr=c[45]<<29|c[44]>>>3,zt=c[44]<<29|c[45]>>>3,ot=c[6]<<28|c[7]>>>4,G=c[7]<<28|c[6]>>>4,dr=c[17]<<23|c[16]>>>9,Vt=c[16]<<23|c[17]>>>9,ar=c[26]<<25|c[27]>>>7,jt=c[27]<<25|c[26]>>>7,M=c[36]<<21|c[37]>>>11,z=c[37]<<21|c[36]>>>11,Dt=c[47]<<24|c[46]>>>8,hr=c[46]<<24|c[47]>>>8,ur=c[8]<<27|c[9]>>>5,Ut=c[9]<<27|c[8]>>>5,it=c[18]<<20|c[19]>>>12,H=c[19]<<20|c[18]>>>12,qt=c[29]<<7|c[28]>>>25,Ve=c[28]<<7|c[29]>>>25,Rt=c[38]<<8|c[39]>>>24,fr=c[39]<<8|c[38]>>>24,R=c[48]<<14|c[49]>>>18,J=c[49]<<14|c[48]>>>18,c[0]=be^~Et&vt,c[1]=Nt^~Re&P,c[10]=ot^~it&K,c[11]=G^~H&ct,c[20]=kt^~Lt&ar,c[21]=or^~At&jt,c[30]=ur^~Bt&Ht,c[31]=Ut^~cr&Ft,c[40]=Ct^~dr&qt,c[41]=It^~Vt&Ve,c[2]=Et^~vt&M,c[3]=Re^~P&z,c[12]=it^~K&mt,c[13]=H^~ct&gt,c[22]=Lt^~ar&Rt,c[23]=At^~jt&fr,c[32]=Bt^~Ht&lr,c[33]=cr^~Ft&Zt,c[42]=dr^~qt&qe,c[43]=Vt^~Ve&Ge,c[4]=vt^~M&R,c[5]=P^~z&J,c[14]=K^~mt&sr,c[15]=ct^~gt&zt,c[24]=ar^~Rt&St,c[25]=jt^~fr&Xt,c[34]=Ht^~lr&Dt,c[35]=Ft^~Zt&hr,c[44]=qt^~qe&We,c[45]=Ve^~Ge&Ye,c[6]=M^~R&be,c[7]=z^~J&Nt,c[16]=mt^~sr&ot,c[17]=gt^~zt&G,c[26]=Rt^~St&kt,c[27]=fr^~Xt&or,c[36]=lr^~Dt&ur,c[37]=Zt^~hr&Ut,c[46]=qe^~We&Ct,c[47]=Ge^~Ye&It,c[8]=R^~be&Et,c[9]=J^~Nt&Re,c[18]=sr^~ot&it,c[19]=zt^~G&H,c[28]=St^~kt&Lt,c[29]=Xt^~or&At,c[38]=Dt^~ur&Bt,c[39]=hr^~Ut&cr,c[48]=We^~Ct&dr,c[49]=Ye^~It&Vt,c[0]^=Y[L],c[1]^=Y[L+1]};if(l)e.exports=o;else for(h=0;h<u.length;++h)i[u[h]]=o[u[h]]})()})(Cc);const Ic=rs;function on(e){return"0x"+Ic.keccak_256(se(e))}const Vc=Object.freeze(Object.defineProperty({__proto__:null,keccak256:on},Symbol.toStringTag,{value:"Module"})),qc="address/5.7.0",Yr=new nt(qc);function Lo(e){Ee(e,20)||Yr.throwArgumentError("invalid address","address",e),e=e.toLowerCase();const t=e.substring(2).split(""),r=new Uint8Array(40);for(let i=0;i<40;i++)r[i]=t[i].charCodeAt(0);const n=se(on(r));for(let i=0;i<40;i+=2)n[i>>1]>>4>=8&&(t[i]=t[i].toUpperCase()),(n[i>>1]&15)>=8&&(t[i+1]=t[i+1].toUpperCase());return"0x"+t.join("")}const Gc=9007199254740991;function Wc(e){return Math.log10?Math.log10(e):Math.log(e)/Math.LN10}const Ms={};for(let e=0;e<10;e++)Ms[String(e)]=String(e);for(let e=0;e<26;e++)Ms[String.fromCharCode(65+e)]=String(10+e);const Ao=Math.floor(Wc(Gc));function Yc(e){e=e.toUpperCase(),e=e.substring(4)+e.substring(0,2)+"00";let t=e.split("").map(n=>Ms[n]).join("");for(;t.length>=Ao;){let n=t.substring(0,Ao);t=parseInt(n,10)%97+t.substring(n.length)}let r=String(98-parseInt(t,10)%97);for(;r.length<2;)r="0"+r;return r}function ns(e){let t=null;if(typeof e!="string"&&Yr.throwArgumentError("invalid address","address",e),e.match(/^(0x)?[0-9a-fA-F]{40}$/))e.substring(0,2)!=="0x"&&(e="0x"+e),t=Lo(e),e.match(/([A-F].*[a-f])|([a-f].*[A-F])/)&&t!==e&&Yr.throwArgumentError("bad address checksum","address",e);else if(e.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)){for(e.substring(2,4)!==Yc(e)&&Yr.throwArgumentError("bad icap checksum","address",e),t=jc(e.substring(4));t.length<40;)t="0"+t;t=Lo("0x"+t)}else Yr.throwArgumentError("invalid address","address",e);return t}class Jc extends Ze{constructor(t){super("address","address",t,!1)}defaultValue(){return"0x0000000000000000000000000000000000000000"}encode(t,r){try{r=ns(r)}catch(n){this._throwError(n.message,r)}return t.writeValue(r)}decode(t){return ns(ka(t.readValue().toHexString(),20))}}class Kc extends Ze{constructor(t){super(t.name,t.type,void 0,t.dynamic),this.coder=t}defaultValue(){return this.coder.defaultValue()}encode(t,r){return this.coder.encode(t,r)}decode(t){return this.coder.decode(t)}}const Lr=new nt(ln);function Xa(e,t,r){let n=null;if(Array.isArray(r))n=r;else if(r&&typeof r=="object"){let y={};n=t.map(w=>{const x=w.localName;return x||Lr.throwError("cannot encode object for signature with missing names",nt.errors.INVALID_ARGUMENT,{argument:"values",coder:w,value:r}),y[x]&&Lr.throwError("cannot encode object for signature with duplicate names",nt.errors.INVALID_ARGUMENT,{argument:"values",coder:w,value:r}),y[x]=!0,r[x]})}else Lr.throwArgumentError("invalid tuple value","tuple",r);t.length!==n.length&&Lr.throwArgumentError("types/value length mismatch","tuple",r);let i=new es(e.wordSize),s=new es(e.wordSize),a=[];t.forEach((y,w)=>{let x=n[w];if(y.dynamic){let T=s.length;y.encode(s,x);let N=i.writeUpdatableValue();a.push(j=>{N(j+T)})}else y.encode(i,x)}),a.forEach(y=>{y(i.length)});let l=e.appendWriter(i);return l+=e.appendWriter(s),l}function Ua(e,t){let r=[],n=e.subReader(0);t.forEach(s=>{let a=null;if(s.dynamic){let l=e.readValue(),y=n.subReader(l.toNumber());try{a=s.decode(y)}catch(w){if(w.code===nt.errors.BUFFER_OVERRUN)throw w;a=w,a.baseType=s.name,a.name=s.localName,a.type=s.type}}else try{a=s.decode(e)}catch(l){if(l.code===nt.errors.BUFFER_OVERRUN)throw l;a=l,a.baseType=s.name,a.name=s.localName,a.type=s.type}a!=null&&r.push(a)});const i=t.reduce((s,a)=>{const l=a.localName;return l&&(s[l]||(s[l]=0),s[l]++),s},{});t.forEach((s,a)=>{let l=s.localName;if(!l||i[l]!==1||(l==="length"&&(l="_length"),r[l]!=null))return;const y=r[a];y instanceof Error?Object.defineProperty(r,l,{enumerable:!0,get:()=>{throw y}}):r[l]=y});for(let s=0;s<r.length;s++){const a=r[s];a instanceof Error&&Object.defineProperty(r,s,{enumerable:!0,get:()=>{throw a}})}return Object.freeze(r)}class Qc extends Ze{constructor(t,r,n){const i=t.type+"["+(r>=0?r:"")+"]",s=r===-1||t.dynamic;super("array",i,n,s),this.coder=t,this.length=r}defaultValue(){const t=this.coder.defaultValue(),r=[];for(let n=0;n<this.length;n++)r.push(t);return r}encode(t,r){Array.isArray(r)||this._throwError("expected array value",r);let n=this.length;n===-1&&(n=r.length,t.writeValue(r.length)),Lr.checkArgumentCount(r.length,n,"coder array"+(this.localName?" "+this.localName:""));let i=[];for(let s=0;s<r.length;s++)i.push(this.coder);return Xa(t,i,r)}decode(t){let r=this.length;r===-1&&(r=t.readValue().toNumber(),r*32>t._data.length&&Lr.throwError("insufficient data length",nt.errors.BUFFER_OVERRUN,{length:t._data.length,count:r}));let n=[];for(let i=0;i<r;i++)n.push(new Kc(this.coder));return t.coerce(this.name,Ua(t,n))}}class _c extends Ze{constructor(t){super("bool","bool",t,!1)}defaultValue(){return!1}encode(t,r){return t.writeValue(r?1:0)}decode(t){return t.coerce(this.type,!t.readValue().isZero())}}class Ba extends Ze{constructor(t,r){super(t,t,r,!0)}defaultValue(){return"0x"}encode(t,r){r=se(r);let n=t.writeValue(r.length);return n+=t.writeBytes(r),n}decode(t){return t.readBytes(t.readValue().toNumber(),!0)}}class $c extends Ba{constructor(t){super("bytes",t)}decode(t){return t.coerce(this.name,Kt(super.decode(t)))}}class tl extends Ze{constructor(t,r){let n="bytes"+String(t);super(n,n,r,!1),this.size=t}defaultValue(){return"0x0000000000000000000000000000000000000000000000000000000000000000".substring(0,2+this.size*2)}encode(t,r){let n=se(r);return n.length!==this.size&&this._throwError("incorrect data length",r),t.writeBytes(n)}decode(t){return t.coerce(this.name,Kt(t.readBytes(this.size)))}}class el extends Ze{constructor(t){super("null","",t,!1)}defaultValue(){return null}encode(t,r){return r!=null&&this._throwError("not null",r),t.writeBytes([])}decode(t){return t.readBytes(0),t.coerce(this.name,null)}}const rl=Gt.from(-1),nl=Gt.from(0),il=Gt.from(1),sl=Gt.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),ol="0x0000000000000000000000000000000000000000000000000000000000000000";class al extends Ze{constructor(t,r,n){const i=(r?"int":"uint")+t*8;super(i,i,n,!1),this.size=t,this.signed=r}defaultValue(){return 0}encode(t,r){let n=Gt.from(r),i=sl.mask(t.wordSize*8);if(this.signed){let s=i.mask(this.size*8-1);(n.gt(s)||n.lt(s.add(il).mul(rl)))&&this._throwError("value out-of-bounds",r)}else(n.lt(nl)||n.gt(i.mask(this.size*8)))&&this._throwError("value out-of-bounds",r);return n=n.toTwos(this.size*8).mask(this.size*8),this.signed&&(n=n.fromTwos(this.size*8).toTwos(8*t.wordSize)),t.writeValue(n)}decode(t){let r=t.readValue().mask(this.size*8);return this.signed&&(r=r.fromTwos(this.size*8)),t.coerce(this.name,r)}}const fl="strings/5.7.0",Ha=new nt(fl);var gr;(function(e){e.current="",e.NFC="NFC",e.NFD="NFD",e.NFKC="NFKC",e.NFKD="NFKD"})(gr||(gr={}));var ae;(function(e){e.UNEXPECTED_CONTINUE="unexpected continuation byte",e.BAD_PREFIX="bad codepoint prefix",e.OVERRUN="string overrun",e.MISSING_CONTINUE="missing continuation byte",e.OUT_OF_RANGE="out of UTF-8 range",e.UTF16_SURROGATE="UTF-16 surrogate",e.OVERLONG="overlong representation"})(ae||(ae={}));function ul(e,t,r,n,i){return Ha.throwArgumentError(`invalid codepoint at offset ${t}; ${e}`,"bytes",r)}function Fa(e,t,r,n,i){if(e===ae.BAD_PREFIX||e===ae.UNEXPECTED_CONTINUE){let s=0;for(let a=t+1;a<r.length&&r[a]>>6===2;a++)s++;return s}return e===ae.OVERRUN?r.length-t-1:0}function cl(e,t,r,n,i){return e===ae.OVERLONG?(n.push(i),0):(n.push(65533),Fa(e,t,r))}const Za=Object.freeze({error:ul,ignore:Fa,replace:cl});function zs(e,t){t==null&&(t=Za.error),e=se(e);const r=[];let n=0;for(;n<e.length;){const i=e[n++];if(!(i>>7)){r.push(i);continue}let s=null,a=null;if((i&224)===192)s=1,a=127;else if((i&240)===224)s=2,a=2047;else if((i&248)===240)s=3,a=65535;else{(i&192)===128?n+=t(ae.UNEXPECTED_CONTINUE,n-1,e,r):n+=t(ae.BAD_PREFIX,n-1,e,r);continue}if(n-1+s>=e.length){n+=t(ae.OVERRUN,n-1,e,r);continue}let l=i&(1<<8-s-1)-1;for(let y=0;y<s;y++){let w=e[n];if((w&192)!=128){n+=t(ae.MISSING_CONTINUE,n,e,r),l=null;break}l=l<<6|w&63,n++}if(l!==null){if(l>1114111){n+=t(ae.OUT_OF_RANGE,n-1-s,e,r,l);continue}if(l>=55296&&l<=57343){n+=t(ae.UTF16_SURROGATE,n-1-s,e,r,l);continue}if(l<=a){n+=t(ae.OVERLONG,n-1-s,e,r,l);continue}r.push(l)}}return r}function hn(e,t=gr.current){t!=gr.current&&(Ha.checkNormalize(),e=e.normalize(t));let r=[];for(let n=0;n<e.length;n++){const i=e.charCodeAt(n);if(i<128)r.push(i);else if(i<2048)r.push(i>>6|192),r.push(i&63|128);else if((i&64512)==55296){n++;const s=e.charCodeAt(n);if(n>=e.length||(s&64512)!==56320)throw new Error("invalid utf-8 string");const a=65536+((i&1023)<<10)+(s&1023);r.push(a>>18|240),r.push(a>>12&63|128),r.push(a>>6&63|128),r.push(a&63|128)}else r.push(i>>12|224),r.push(i>>6&63|128),r.push(i&63|128)}return se(r)}function Ii(e){const t="0000"+e.toString(16);return"\\u"+t.substring(t.length-4)}function ll(e,t){return'"'+zs(e,t).map(r=>{if(r<256){switch(r){case 8:return"\\b";case 9:return"\\t";case 10:return"\\n";case 13:return"\\r";case 34:return'\\"';case 92:return"\\\\"}if(r>=32&&r<127)return String.fromCharCode(r)}return r<=65535?Ii(r):(r-=65536,Ii((r>>10&1023)+55296)+Ii((r&1023)+56320))}).join("")+'"'}function is(e){return e.map(t=>t<=65535?String.fromCharCode(t):(t-=65536,String.fromCharCode((t>>10&1023)+55296,(t&1023)+56320))).join("")}function ks(e,t){return is(zs(e,t))}function ss(e,t=gr.current){return zs(hn(e,t))}function hl(e){const t=hn(e);if(t.length>31)throw new Error("bytes32 string must be less than 32 bytes");return Kt(vr([t,ol]).slice(0,32))}function dl(e){const t=se(e);if(t.length!==32)throw new Error("invalid bytes32 - not 32 bytes long");if(t[31]!==0)throw new Error("invalid bytes32 string - no null terminator");let r=31;for(;t[r-1]===0;)r--;return ks(t.slice(0,r))}function pl(e){if(e.length%4!==0)throw new Error("bad data");let t=[];for(let r=0;r<e.length;r+=4)t.push(parseInt(e.substring(r,r+4),16));return t}function Ls(e,t){t||(t=function(i){return[parseInt(i,16)]});let r=0,n={};return e.split(",").forEach(i=>{let s=i.split(":");r+=parseInt(s[0],16),n[r]=t(s[1])}),n}function Da(e){let t=0;return e.split(",").map(r=>{let n=r.split("-");n.length===1?n[1]="0":n[1]===""&&(n[1]="1");let i=t+parseInt(n[0],16);return t=parseInt(n[1],16),{l:i,h:t}})}function As(e,t){let r=0;for(let n=0;n<t.length;n++){let i=t[n];if(r+=i.l,e>=r&&e<=r+i.h&&(e-r)%(i.d||1)===0){if(i.e&&i.e.indexOf(e-r)!==-1)continue;return i}}return null}const ml=Da("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d"),yl="ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map(e=>parseInt(e,16)),bl=[{h:25,s:32,l:65},{h:30,s:32,e:[23],l:127},{h:54,s:1,e:[48],l:64,d:2},{h:14,s:1,l:57,d:2},{h:44,s:1,l:17,d:2},{h:10,s:1,e:[2,6,8],l:61,d:2},{h:16,s:1,l:68,d:2},{h:84,s:1,e:[18,24,66],l:19,d:2},{h:26,s:32,e:[17],l:435},{h:22,s:1,l:71,d:2},{h:15,s:80,l:40},{h:31,s:32,l:16},{h:32,s:1,l:80,d:2},{h:52,s:1,l:42,d:2},{h:12,s:1,l:55,d:2},{h:40,s:1,e:[38],l:15,d:2},{h:14,s:1,l:48,d:2},{h:37,s:48,l:49},{h:148,s:1,l:6351,d:2},{h:88,s:1,l:160,d:2},{h:15,s:16,l:704},{h:25,s:26,l:854},{h:25,s:32,l:55915},{h:37,s:40,l:1247},{h:25,s:-119711,l:53248},{h:25,s:-119763,l:52},{h:25,s:-119815,l:52},{h:25,s:-119867,e:[1,4,5,7,8,11,12,17],l:52},{h:25,s:-119919,l:52},{h:24,s:-119971,e:[2,7,8,17],l:52},{h:24,s:-120023,e:[2,7,13,15,16,17],l:52},{h:25,s:-120075,l:52},{h:25,s:-120127,l:52},{h:25,s:-120179,l:52},{h:25,s:-120231,l:52},{h:25,s:-120283,l:52},{h:25,s:-120335,l:52},{h:24,s:-119543,e:[17],l:56},{h:24,s:-119601,e:[17],l:58},{h:24,s:-119659,e:[17],l:58},{h:24,s:-119717,e:[17],l:58},{h:24,s:-119775,e:[17],l:58}],vl=Ls("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3"),wl=Ls("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7"),gl=Ls("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D",pl),xl=Da("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");function Pl(e){return e.reduce((t,r)=>(r.forEach(n=>{t.push(n)}),t),[])}function Ol(e){return!!As(e,ml)}function Nl(e){let t=As(e,bl);if(t)return[e+t.s];let r=vl[e];if(r)return r;let n=wl[e];if(n)return[e+n[0]];let i=gl[e];return i||null}function El(e){return!!As(e,xl)}function Tl(e){if(e.match(/^[a-z0-9-]*$/i)&&e.length<=59)return e.toLowerCase();let t=ss(e);t=Pl(t.map(n=>{if(yl.indexOf(n)>=0)return[];if(n>=65024&&n<=65039)return[];let i=Nl(n);return i||[n]})),t=ss(is(t),gr.NFKC),t.forEach(n=>{if(El(n))throw new Error("STRINGPREP_CONTAINS_PROHIBITED")}),t.forEach(n=>{if(Ol(n))throw new Error("STRINGPREP_CONTAINS_UNASSIGNED")});let r=is(t);if(r.substring(0,1)==="-"||r.substring(2,4)==="--"||r.substring(r.length-1)==="-")throw new Error("invalid hyphen");return r}const Ml=Object.freeze(Object.defineProperty({__proto__:null,get UnicodeNormalizationForm(){return gr},Utf8ErrorFuncs:Za,get Utf8ErrorReason(){return ae},_toEscapedUtf8String:ll,formatBytes32String:hl,nameprep:Tl,parseBytes32String:dl,toUtf8Bytes:hn,toUtf8CodePoints:ss,toUtf8String:ks},Symbol.toStringTag,{value:"Module"}));class zl extends Ba{constructor(t){super("string",t)}defaultValue(){return""}encode(t,r){return super.encode(t,hn(r))}decode(t){return ks(super.decode(t))}}class vn extends Ze{constructor(t,r){let n=!1;const i=[];t.forEach(a=>{a.dynamic&&(n=!0),i.push(a.type)});const s="tuple("+i.join(",")+")";super("tuple",s,r,n),this.coders=t}defaultValue(){const t=[];this.coders.forEach(n=>{t.push(n.defaultValue())});const r=this.coders.reduce((n,i)=>{const s=i.localName;return s&&(n[s]||(n[s]=0),n[s]++),n},{});return this.coders.forEach((n,i)=>{let s=n.localName;!s||r[s]!==1||(s==="length"&&(s="_length"),t[s]==null&&(t[s]=t[i]))}),Object.freeze(t)}encode(t,r){return Xa(t,this.coders,r)}decode(t){return t.coerce(this.name,Ua(t,this.coders))}}const wn=new nt(ln),kl=new RegExp(/^bytes([0-9]*)$/),Ll=new RegExp(/^(u?int)([0-9]*)$/);class Ca{constructor(t){ee(this,"coerceFunc",t||null)}_getCoder(t){switch(t.baseType){case"address":return new Jc(t.name);case"bool":return new _c(t.name);case"string":return new zl(t.name);case"bytes":return new $c(t.name);case"array":return new Qc(this._getCoder(t.arrayChildren),t.arrayLength,t.name);case"tuple":return new vn((t.components||[]).map(n=>this._getCoder(n)),t.name);case"":return new el(t.name)}let r=t.type.match(Ll);if(r){let n=parseInt(r[2]||"256");return(n===0||n>256||n%8!==0)&&wn.throwArgumentError("invalid "+r[1]+" bit length","param",t),new al(n/8,r[1]==="int",t.name)}if(r=t.type.match(kl),r){let n=parseInt(r[1]);return(n===0||n>32)&&wn.throwArgumentError("invalid bytes length","param",t),new tl(n,t.name)}return wn.throwArgumentError("invalid type","type",t.type)}_getWordSize(){return 32}_getReader(t,r){return new Cn(t,this._getWordSize(),this.coerceFunc,r)}_getWriter(){return new es(this._getWordSize())}getDefaultValue(t){const r=t.map(i=>this._getCoder($t.from(i)));return new vn(r,"_").defaultValue()}encode(t,r){t.length!==r.length&&wn.throwError("types/values length mismatch",nt.errors.INVALID_ARGUMENT,{count:{types:t.length,values:r.length},value:{types:t,values:r}});const n=t.map(a=>this._getCoder($t.from(a))),i=new vn(n,"_"),s=this._getWriter();return i.encode(s,r),s.data}decode(t,r,n){const i=t.map(a=>this._getCoder($t.from(a)));return new vn(i,"_").decode(this._getReader(se(r),n))}}const Ia=new Ca;function gn(e){return on(hn(e))}const Wt=new nt(ln);class Va extends ri{}class qa extends ri{}class Al extends ri{}class os extends ri{static isIndexed(t){return!!(t&&t._isIndexed)}}const jl={"0x08c379a0":{signature:"Error(string)",name:"Error",inputs:["string"],reason:!0},"0x4e487b71":{signature:"Panic(uint256)",name:"Panic",inputs:["uint256"]}};function jo(e,t){const r=new Error(`deferred error during ABI decoding triggered accessing ${e}`);return r.error=t,r}class Rl{constructor(t){let r=[];typeof t=="string"?r=JSON.parse(t):r=t,ee(this,"fragments",r.map(n=>Me.from(n)).filter(n=>n!=null)),ee(this,"_abiCoder",yn(new.target,"getAbiCoder")()),ee(this,"functions",{}),ee(this,"errors",{}),ee(this,"events",{}),ee(this,"structs",{}),this.fragments.forEach(n=>{let i=null;switch(n.type){case"constructor":if(this.deploy){Wt.warn("duplicate definition - constructor");return}ee(this,"deploy",n);return;case"function":i=this.functions;break;case"event":i=this.events;break;case"error":i=this.errors;break;default:return}let s=n.format();if(i[s]){Wt.warn("duplicate definition - "+s);return}i[s]=n}),this.deploy||ee(this,"deploy",Oe.from({payable:!1,type:"constructor"})),ee(this,"_isInterface",!0)}format(t){t||(t=yt.full),t===yt.sighash&&Wt.throwArgumentError("interface does not support formatting sighash","format",t);const r=this.fragments.map(n=>n.format(t));return t===yt.json?JSON.stringify(r.map(n=>JSON.parse(n))):r}static getAbiCoder(){return Ia}static getAddress(t){return ns(t)}static getSighash(t){return kc(gn(t.format()),0,4)}static getEventTopic(t){return gn(t.format())}getFunction(t){if(Ee(t)){for(const n in this.functions)if(t===this.getSighash(n))return this.functions[n];Wt.throwArgumentError("no matching function","sighash",t)}if(t.indexOf("(")===-1){const n=t.trim(),i=Object.keys(this.functions).filter(s=>s.split("(")[0]===n);return i.length===0?Wt.throwArgumentError("no matching function","name",n):i.length>1&&Wt.throwArgumentError("multiple matching functions","name",n),this.functions[i[0]]}const r=this.functions[Ne.fromString(t).format()];return r||Wt.throwArgumentError("no matching function","signature",t),r}getEvent(t){if(Ee(t)){const n=t.toLowerCase();for(const i in this.events)if(n===this.getEventTopic(i))return this.events[i];Wt.throwArgumentError("no matching event","topichash",n)}if(t.indexOf("(")===-1){const n=t.trim(),i=Object.keys(this.events).filter(s=>s.split("(")[0]===n);return i.length===0?Wt.throwArgumentError("no matching event","name",n):i.length>1&&Wt.throwArgumentError("multiple matching events","name",n),this.events[i[0]]}const r=this.events[Te.fromString(t).format()];return r||Wt.throwArgumentError("no matching event","signature",t),r}getError(t){if(Ee(t)){const n=yn(this.constructor,"getSighash");for(const i in this.errors){const s=this.errors[i];if(t===n(s))return this.errors[i]}Wt.throwArgumentError("no matching error","sighash",t)}if(t.indexOf("(")===-1){const n=t.trim(),i=Object.keys(this.errors).filter(s=>s.split("(")[0]===n);return i.length===0?Wt.throwArgumentError("no matching error","name",n):i.length>1&&Wt.throwArgumentError("multiple matching errors","name",n),this.errors[i[0]]}const r=this.errors[Ne.fromString(t).format()];return r||Wt.throwArgumentError("no matching error","signature",t),r}getSighash(t){if(typeof t=="string")try{t=this.getFunction(t)}catch(r){try{t=this.getError(t)}catch{throw r}}return yn(this.constructor,"getSighash")(t)}getEventTopic(t){return typeof t=="string"&&(t=this.getEvent(t)),yn(this.constructor,"getEventTopic")(t)}_decodeParams(t,r){return this._abiCoder.decode(t,r)}_encodeParams(t,r){return this._abiCoder.encode(t,r)}encodeDeploy(t){return this._encodeParams(this.deploy.inputs,t||[])}decodeErrorResult(t,r){typeof t=="string"&&(t=this.getError(t));const n=se(r);return Kt(n.slice(0,4))!==this.getSighash(t)&&Wt.throwArgumentError(`data signature does not match error ${t.name}.`,"data",Kt(n)),this._decodeParams(t.inputs,n.slice(4))}encodeErrorResult(t,r){return typeof t=="string"&&(t=this.getError(t)),Kt(vr([this.getSighash(t),this._encodeParams(t.inputs,r||[])]))}decodeFunctionData(t,r){typeof t=="string"&&(t=this.getFunction(t));const n=se(r);return Kt(n.slice(0,4))!==this.getSighash(t)&&Wt.throwArgumentError(`data signature does not match function ${t.name}.`,"data",Kt(n)),this._decodeParams(t.inputs,n.slice(4))}encodeFunctionData(t,r){return typeof t=="string"&&(t=this.getFunction(t)),Kt(vr([this.getSighash(t),this._encodeParams(t.inputs,r||[])]))}decodeFunctionResult(t,r){typeof t=="string"&&(t=this.getFunction(t));let n=se(r),i=null,s="",a=null,l=null,y=null;switch(n.length%this._abiCoder._getWordSize()){case 0:try{return this._abiCoder.decode(t.outputs,n)}catch{}break;case 4:{const w=Kt(n.slice(0,4)),x=jl[w];if(x)a=this._abiCoder.decode(x.inputs,n.slice(4)),l=x.name,y=x.signature,x.reason&&(i=a[0]),l==="Error"?s=`; VM Exception while processing transaction: reverted with reason string ${JSON.stringify(a[0])}`:l==="Panic"&&(s=`; VM Exception while processing transaction: reverted with panic code ${a[0]}`);else try{const T=this.getError(w);a=this._abiCoder.decode(T.inputs,n.slice(4)),l=T.name,y=T.format()}catch{}break}}return Wt.throwError("call revert exception"+s,nt.errors.CALL_EXCEPTION,{method:t.format(),data:Kt(r),errorArgs:a,errorName:l,errorSignature:y,reason:i})}encodeFunctionResult(t,r){return typeof t=="string"&&(t=this.getFunction(t)),Kt(this._abiCoder.encode(t.outputs,r||[]))}encodeFilterTopics(t,r){typeof t=="string"&&(t=this.getEvent(t)),r.length>t.inputs.length&&Wt.throwError("too many arguments for "+t.format(),nt.errors.UNEXPECTED_ARGUMENT,{argument:"values",value:r});let n=[];t.anonymous||n.push(this.getEventTopic(t));const i=(s,a)=>s.type==="string"?gn(a):s.type==="bytes"?on(Kt(a)):(s.type==="bool"&&typeof a=="boolean"&&(a=a?"0x01":"0x00"),s.type.match(/^u?int/)&&(a=Gt.from(a).toHexString()),s.type==="address"&&this._abiCoder.encode(["address"],[a]),ka(Kt(a),32));for(r.forEach((s,a)=>{let l=t.inputs[a];if(!l.indexed){s!=null&&Wt.throwArgumentError("cannot filter non-indexed parameters; must be null","contract."+l.name,s);return}s==null?n.push(null):l.baseType==="array"||l.baseType==="tuple"?Wt.throwArgumentError("filtering with tuples or arrays not supported","contract."+l.name,s):Array.isArray(s)?n.push(s.map(y=>i(l,y))):n.push(i(l,s))});n.length&&n[n.length-1]===null;)n.pop();return n}encodeEventLog(t,r){typeof t=="string"&&(t=this.getEvent(t));const n=[],i=[],s=[];return t.anonymous||n.push(this.getEventTopic(t)),r.length!==t.inputs.length&&Wt.throwArgumentError("event arguments/values mismatch","values",r),t.inputs.forEach((a,l)=>{const y=r[l];if(a.indexed)if(a.type==="string")n.push(gn(y));else if(a.type==="bytes")n.push(on(y));else{if(a.baseType==="tuple"||a.baseType==="array")throw new Error("not implemented");n.push(this._abiCoder.encode([a.type],[y]))}else i.push(a),s.push(y)}),{data:this._abiCoder.encode(i,s),topics:n}}decodeEventLog(t,r,n){if(typeof t=="string"&&(t=this.getEvent(t)),n!=null&&!t.anonymous){let N=this.getEventTopic(t);(!Ee(n[0],32)||n[0].toLowerCase()!==N)&&Wt.throwError("fragment/topic mismatch",nt.errors.INVALID_ARGUMENT,{argument:"topics[0]",expected:N,value:n[0]}),n=n.slice(1)}let i=[],s=[],a=[];t.inputs.forEach((N,j)=>{N.indexed?N.type==="string"||N.type==="bytes"||N.baseType==="tuple"||N.baseType==="array"?(i.push($t.fromObject({type:"bytes32",name:N.name})),a.push(!0)):(i.push(N),a.push(!1)):(s.push(N),a.push(!1))});let l=n!=null?this._abiCoder.decode(i,vr(n)):null,y=this._abiCoder.decode(s,r,!0),w=[],x=0,T=0;t.inputs.forEach((N,j)=>{if(N.indexed)if(l==null)w[j]=new os({_isIndexed:!0,hash:null});else if(a[j])w[j]=new os({_isIndexed:!0,hash:l[T++]});else try{w[j]=l[T++]}catch(U){w[j]=U}else try{w[j]=y[x++]}catch(U){w[j]=U}if(N.name&&w[N.name]==null){const U=w[j];U instanceof Error?Object.defineProperty(w,N.name,{enumerable:!0,get:()=>{throw jo(`property ${JSON.stringify(N.name)}`,U)}}):w[N.name]=U}});for(let N=0;N<w.length;N++){const j=w[N];j instanceof Error&&Object.defineProperty(w,N,{enumerable:!0,get:()=>{throw jo(`index ${N}`,j)}})}return Object.freeze(w)}parseTransaction(t){let r=this.getFunction(t.data.substring(0,10).toLowerCase());return r?new qa({args:this._abiCoder.decode(r.inputs,"0x"+t.data.substring(10)),functionFragment:r,name:r.name,signature:r.format(),sighash:this.getSighash(r),value:Gt.from(t.value||"0")}):null}parseLog(t){let r=this.getEvent(t.topics[0]);return!r||r.anonymous?null:new Va({eventFragment:r,name:r.name,signature:r.format(),topic:this.getEventTopic(r),args:this.decodeEventLog(r,t.data,t.topics)})}parseError(t){const r=Kt(t);let n=this.getError(r.substring(0,10).toLowerCase());return n?new Al({args:this._abiCoder.decode(n.inputs,"0x"+r.substring(10)),errorFragment:n,name:n.name,signature:n.format(),sighash:this.getSighash(n)}):null}static isInterface(t){return!!(t&&t._isInterface)}}const Sl=Object.freeze(Object.defineProperty({__proto__:null,AbiCoder:Ca,ConstructorFragment:Oe,ErrorFragment:Ue,EventFragment:Te,FormatTypes:yt,Fragment:Me,FunctionFragment:Ne,Indexed:os,Interface:Rl,LogDescription:Va,ParamType:$t,TransactionDescription:qa,checkResultErrors:Dc,defaultAbiCoder:Ia},Symbol.toStringTag,{value:"Module"})),Xl=Qn(Sl),Ul=Qn(Vc),Bl=Qn(Ml);var Hl=Ur&&Ur.__spreadArray||function(e,t,r){if(r||arguments.length===2)for(var n=0,i=t.length,s;n<i;n++)(s||!(n in t))&&(s||(s=Array.prototype.slice.call(t,0,n)),s[n]=t[n]);return e.concat(s||Array.prototype.slice.call(t))};Object.defineProperty(Ns,"__esModule",{value:!0});var Ga=Ns.Coder=void 0,Yt=Xl,Fl=Ul,Zl=Bl,Dl=function(){function e(t){Object.defineProperty(this,"abi",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.abi=t}return Object.defineProperty(e.prototype,"getFunctionSelector",{enumerable:!1,configurable:!0,writable:!0,value:function(t){var r=this.getFunctionByName(t),n=r==null?void 0:r.inputs;if(!n)throw Error;var i=n.map(function(l){return Yt.ParamType.fromObject(l)}),s=e.getSignature(t,i),a=Er(s);return a.substring(0,10)}}),Object.defineProperty(e.prototype,"getEventTopic",{enumerable:!1,configurable:!0,writable:!0,value:function(t){var r=this.getEventByName(t),n=r==null?void 0:r.inputs;if(!n)throw Error;var i=n.map(function(a){return Yt.ParamType.fromObject(a)}),s=e.getSignature(t,i);return Er(s)}}),Object.defineProperty(e.prototype,"decodeConstructor",{enumerable:!1,configurable:!0,writable:!0,value:function(t){var r=this.getConstructor(),n=r==null?void 0:r.inputs;if(!n)throw Error;var i=n.map(function(l){return Yt.ParamType.fromObject(l)}),s=Yt.defaultAbiCoder.decode(i,t),a=xn(s,i);return{inputs:i,values:a}}}),Object.defineProperty(e.prototype,"decodeEvent",{enumerable:!1,configurable:!0,writable:!0,value:function(t,r){var n=this.getEventByTopic(t[0]),i=t.slice(1),s=n==null?void 0:n.inputs;if(!s)throw Error;var a=s.map(function($){return Yt.ParamType.fromObject($)}),l=a.filter(function($){return $.indexed}),y=l.map(function($,et){var S=i[et],A=Yt.defaultAbiCoder.decode([$],S),q=A[0];return q}),w=a.filter(function($){return!$.indexed}),x=Yt.defaultAbiCoder.decode(w,r);if(!n.name)throw Error;for(var T=0,N=0,j=[],U=0,Y=a;U<Y.length;U++){var rt=Y[U];rt.indexed?(j.push(y[T]),T++):(j.push(x[N]),N++)}var ft=xn(j,a);return{name:n.name,inputs:a,values:ft}}}),Object.defineProperty(e.prototype,"decodeFunction",{enumerable:!1,configurable:!0,writable:!0,value:function(t){var r=t.substring(0,10),n=this.getFunctionBySelector(r),i=n==null?void 0:n.inputs;if(!i)throw Error;var s=i.map(function(w){return Yt.ParamType.fromObject(w)}),a="0x".concat(t.substring(10)),l=Yt.defaultAbiCoder.decode(s,a),y=xn(l,s);if(!n.name)throw Error;return{name:n.name,inputs:s,values:y}}}),Object.defineProperty(e.prototype,"decodeFunctionOutput",{enumerable:!1,configurable:!0,writable:!0,value:function(t,r){var n=this.getFunctionByName(t),i=n==null?void 0:n.outputs;if(!i)throw Error;var s=i.map(function(y){return Yt.ParamType.fromObject(y)}),a=Yt.defaultAbiCoder.decode(s,r),l=xn(a,s);return{name:t,outputs:s,values:l}}}),Object.defineProperty(e.prototype,"encodeConstructor",{enumerable:!1,configurable:!0,writable:!0,value:function(t){var r=this.getConstructor(),n=r==null?void 0:r.inputs;if(!n)throw Error;var i=n.map(function(a){return Yt.ParamType.fromObject(a)}),s=Vi(t,i);return Yt.defaultAbiCoder.encode(i,s)}}),Object.defineProperty(e.prototype,"encodeEvent",{enumerable:!1,configurable:!0,writable:!0,value:function(t,r){var n=this.getEventByName(t),i=n==null?void 0:n.inputs;if(!i)throw Error;for(var s=i.map(function($){return Yt.ParamType.fromObject($)}),a=e.getSignature(t,s),l=Er(a),y=[],w=[],x=0;x<s.length;x++){var T=s[x],N=r[T.name];T.indexed?y.push(N):w.push(N)}var j=s.filter(function($){return $.indexed}),U=j.map(function($,et){return Yt.defaultAbiCoder.encode([$],[y[et]])}),Y=Hl([l],U,!0),rt=s.filter(function($){return!$.indexed}),ft=Yt.defaultAbiCoder.encode(rt,w);return{topics:Y,data:ft}}}),Object.defineProperty(e.prototype,"encodeFunction",{enumerable:!1,configurable:!0,writable:!0,value:function(t,r){var n=this.getFunctionByName(t),i=n==null?void 0:n.inputs;if(!i)throw Error;var s=i.map(function(N){return Yt.ParamType.fromObject(N)}),a=e.getSignature(t,s),l=Er(a).substring(2,10),y=Vi(r,s),w=Yt.defaultAbiCoder.encode(s,y),x=w.substring(2),T="0x".concat(l).concat(x);return T}}),Object.defineProperty(e.prototype,"encodeFunctionOutput",{enumerable:!1,configurable:!0,writable:!0,value:function(t,r){var n=this.getFunctionByName(t),i=n.outputs;if(!i)throw Error;var s=i.map(function(l){return Yt.ParamType.fromObject(l)}),a=Vi(r,s);return Yt.defaultAbiCoder.encode(s,a)}}),Object.defineProperty(e.prototype,"getConstructor",{enumerable:!1,configurable:!0,writable:!0,value:function(){var t=this.abi.find(function(r){return r.type==="constructor"});if(!t)throw Error;return t}}),Object.defineProperty(e.prototype,"getFunctionByName",{enumerable:!1,configurable:!0,writable:!0,value:function(t){var r=this.abi.find(function(n){return n.type==="function"&&n.name===t});if(!r)throw Error;return r}}),Object.defineProperty(e.prototype,"getFunctionBySelector",{enumerable:!1,configurable:!0,writable:!0,value:function(t){var r=this.abi.filter(function(i){return i.type==="function"||i.type==="error"}),n=r.find(function(i){var s=i.name,a=i.inputs;if(!s||!a)return!1;var l=a.map(function(T){return Yt.ParamType.fromObject(T)}),y=e.getSignature(s,l),w=Er(y),x=w.substring(0,10);return x===t});if(!n)throw Error;return n}}),Object.defineProperty(e.prototype,"getEventByName",{enumerable:!1,configurable:!0,writable:!0,value:function(t){var r=this.abi.find(function(n){return n.type==="event"&&n.name===t});if(!r)throw Error;return r}}),Object.defineProperty(e.prototype,"getEventByTopic",{enumerable:!1,configurable:!0,writable:!0,value:function(t){var r=this.abi.filter(function(i){return i.type==="event"}),n=r.find(function(i){var s=i.name,a=i.inputs;if(!s||!a)return!1;var l=a.map(function(x){return Yt.ParamType.fromObject(x)}),y=e.getSignature(s,l),w=Er(y);return w===t});if(!n)throw Error;return n}}),Object.defineProperty(e,"getSignature",{enumerable:!1,configurable:!0,writable:!0,value:function(t,r){for(var n=[],i=0,s=r;i<s.length;i++){var a=s[i];if(a.type.startsWith("tuple")){var l=e.getSignature("",a.components),y=a.type.substring(5),w="".concat(l).concat(y);n.push(w)}else n.push(a.type)}var x=n.join(","),T="".concat(t,"(").concat(x,")");return T}}),e}();Ga=Ns.Coder=Dl;function Er(e){return(0,Fl.keccak256)((0,Zl.toUtf8Bytes)(e))}function xn(e,t){return Object.fromEntries(e.map(function(r,n){var i=t[n];return[i.name,r]}))}function Vi(e,t){return t.map(function(r){return e[r.name]})}var qi=typeof self=="object"?self.FormData:window.FormData;const Ae=Object.create(null);Ae.open="0";Ae.close="1";Ae.ping="2";Ae.pong="3";Ae.message="4";Ae.upgrade="5";Ae.noop="6";const jn=Object.create(null);Object.keys(Ae).forEach(e=>{jn[Ae[e]]=e});const Cl={type:"error",data:"parser error"},Il=typeof Blob=="function"||typeof Blob<"u"&&Object.prototype.toString.call(Blob)==="[object BlobConstructor]",Vl=typeof ArrayBuffer=="function",ql=e=>typeof ArrayBuffer.isView=="function"?ArrayBuffer.isView(e):e&&e.buffer instanceof ArrayBuffer,Wa=({type:e,data:t},r,n)=>Il&&t instanceof Blob?r?n(t):Ro(t,n):Vl&&(t instanceof ArrayBuffer||ql(t))?r?n(t):Ro(new Blob([t]),n):n(Ae[e]+(t||"")),Ro=(e,t)=>{const r=new FileReader;return r.onload=function(){const n=r.result.split(",")[1];t("b"+(n||""))},r.readAsDataURL(e)},So="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",Jr=typeof Uint8Array>"u"?[]:new Uint8Array(256);for(let e=0;e<So.length;e++)Jr[So.charCodeAt(e)]=e;const Gl=e=>{let t=e.length*.75,r=e.length,n,i=0,s,a,l,y;e[e.length-1]==="="&&(t--,e[e.length-2]==="="&&t--);const w=new ArrayBuffer(t),x=new Uint8Array(w);for(n=0;n<r;n+=4)s=Jr[e.charCodeAt(n)],a=Jr[e.charCodeAt(n+1)],l=Jr[e.charCodeAt(n+2)],y=Jr[e.charCodeAt(n+3)],x[i++]=s<<2|a>>4,x[i++]=(a&15)<<4|l>>2,x[i++]=(l&3)<<6|y&63;return w},Wl=typeof ArrayBuffer=="function",Ya=(e,t)=>{if(typeof e!="string")return{type:"message",data:Ja(e,t)};const r=e.charAt(0);return r==="b"?{type:"message",data:Yl(e.substring(1),t)}:jn[r]?e.length>1?{type:jn[r],data:e.substring(1)}:{type:jn[r]}:Cl},Yl=(e,t)=>{if(Wl){const r=Gl(e);return Ja(r,t)}else return{base64:!0,data:e}},Ja=(e,t)=>{switch(t){case"blob":return e instanceof ArrayBuffer?new Blob([e]):e;case"arraybuffer":default:return e}},Ka=String.fromCharCode(30),Jl=(e,t)=>{const r=e.length,n=new Array(r);let i=0;e.forEach((s,a)=>{Wa(s,!1,l=>{n[a]=l,++i===r&&t(n.join(Ka))})})},Kl=(e,t)=>{const r=e.split(Ka),n=[];for(let i=0;i<r.length;i++){const s=Ya(r[i],t);if(n.push(s),s.type==="error")break}return n},Qa=4;function Qt(e){if(e)return Ql(e)}function Ql(e){for(var t in Qt.prototype)e[t]=Qt.prototype[t];return e}Qt.prototype.on=Qt.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t),this};Qt.prototype.once=function(e,t){function r(){this.off(e,r),t.apply(this,arguments)}return r.fn=t,this.on(e,r),this};Qt.prototype.off=Qt.prototype.removeListener=Qt.prototype.removeAllListeners=Qt.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},arguments.length==0)return this._callbacks={},this;var r=this._callbacks["$"+e];if(!r)return this;if(arguments.length==1)return delete this._callbacks["$"+e],this;for(var n,i=0;i<r.length;i++)if(n=r[i],n===t||n.fn===t){r.splice(i,1);break}return r.length===0&&delete this._callbacks["$"+e],this};Qt.prototype.emit=function(e){this._callbacks=this._callbacks||{};for(var t=new Array(arguments.length-1),r=this._callbacks["$"+e],n=1;n<arguments.length;n++)t[n-1]=arguments[n];if(r){r=r.slice(0);for(var n=0,i=r.length;n<i;++n)r[n].apply(this,t)}return this};Qt.prototype.emitReserved=Qt.prototype.emit;Qt.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]};Qt.prototype.hasListeners=function(e){return!!this.listeners(e).length};const tr=(()=>typeof self<"u"?self:typeof window<"u"?window:Function("return this")())();function _a(e,...t){return t.reduce((r,n)=>(e.hasOwnProperty(n)&&(r[n]=e[n]),r),{})}const _l=setTimeout,$l=clearTimeout;function ni(e,t){t.useNativeTimers?(e.setTimeoutFn=_l.bind(tr),e.clearTimeoutFn=$l.bind(tr)):(e.setTimeoutFn=setTimeout.bind(tr),e.clearTimeoutFn=clearTimeout.bind(tr))}const th=1.33;function eh(e){return typeof e=="string"?rh(e):Math.ceil((e.byteLength||e.size)*th)}function rh(e){let t=0,r=0;for(let n=0,i=e.length;n<i;n++)t=e.charCodeAt(n),t<128?r+=1:t<2048?r+=2:t<55296||t>=57344?r+=3:(n++,r+=4);return r}class nh extends Error{constructor(t,r,n){super(t),this.description=r,this.context=n,this.type="TransportError"}}class $a extends Qt{constructor(t){super(),this.writable=!1,ni(this,t),this.opts=t,this.query=t.query,this.readyState="",this.socket=t.socket}onError(t,r,n){return super.emitReserved("error",new nh(t,r,n)),this}open(){return(this.readyState==="closed"||this.readyState==="")&&(this.readyState="opening",this.doOpen()),this}close(){return(this.readyState==="opening"||this.readyState==="open")&&(this.doClose(),this.onClose()),this}send(t){this.readyState==="open"&&this.write(t)}onOpen(){this.readyState="open",this.writable=!0,super.emitReserved("open")}onData(t){const r=Ya(t,this.socket.binaryType);this.onPacket(r)}onPacket(t){super.emitReserved("packet",t)}onClose(t){this.readyState="closed",super.emitReserved("close",t)}}const tf="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),as=64,ih={};let Xo=0,Pn=0,Uo;function Bo(e){let t="";do t=tf[e%as]+t,e=Math.floor(e/as);while(e>0);return t}function ef(){const e=Bo(+new Date);return e!==Uo?(Xo=0,Uo=e):e+"."+Bo(Xo++)}for(;Pn<as;Pn++)ih[tf[Pn]]=Pn;function rf(e){let t="";for(let r in e)e.hasOwnProperty(r)&&(t.length&&(t+="&"),t+=encodeURIComponent(r)+"="+encodeURIComponent(e[r]));return t}function sh(e){let t={},r=e.split("&");for(let n=0,i=r.length;n<i;n++){let s=r[n].split("=");t[decodeURIComponent(s[0])]=decodeURIComponent(s[1])}return t}let nf=!1;try{nf=typeof XMLHttpRequest<"u"&&"withCredentials"in new XMLHttpRequest}catch{}const oh=nf;function sf(e){const t=e.xdomain;try{if(typeof XMLHttpRequest<"u"&&(!t||oh))return new XMLHttpRequest}catch{}if(!t)try{return new tr[["Active"].concat("Object").join("X")]("Microsoft.XMLHTTP")}catch{}}function ah(){}const fh=function(){return new sf({xdomain:!1}).responseType!=null}();class uh extends $a{constructor(t){if(super(t),this.polling=!1,typeof location<"u"){const n=location.protocol==="https:";let i=location.port;i||(i=n?"443":"80"),this.xd=typeof location<"u"&&t.hostname!==location.hostname||i!==t.port,this.xs=t.secure!==n}const r=t&&t.forceBase64;this.supportsBinary=fh&&!r}get name(){return"polling"}doOpen(){this.poll()}pause(t){this.readyState="pausing";const r=()=>{this.readyState="paused",t()};if(this.polling||!this.writable){let n=0;this.polling&&(n++,this.once("pollComplete",function(){--n||r()})),this.writable||(n++,this.once("drain",function(){--n||r()}))}else r()}poll(){this.polling=!0,this.doPoll(),this.emitReserved("poll")}onData(t){const r=n=>{if(this.readyState==="opening"&&n.type==="open"&&this.onOpen(),n.type==="close")return this.onClose({description:"transport closed by the server"}),!1;this.onPacket(n)};Kl(t,this.socket.binaryType).forEach(r),this.readyState!=="closed"&&(this.polling=!1,this.emitReserved("pollComplete"),this.readyState==="open"&&this.poll())}doClose(){const t=()=>{this.write([{type:"close"}])};this.readyState==="open"?t():this.once("open",t)}write(t){this.writable=!1,Jl(t,r=>{this.doWrite(r,()=>{this.writable=!0,this.emitReserved("drain")})})}uri(){let t=this.query||{};const r=this.opts.secure?"https":"http";let n="";this.opts.timestampRequests!==!1&&(t[this.opts.timestampParam]=ef()),!this.supportsBinary&&!t.sid&&(t.b64=1),this.opts.port&&(r==="https"&&Number(this.opts.port)!==443||r==="http"&&Number(this.opts.port)!==80)&&(n=":"+this.opts.port);const i=rf(t),s=this.opts.hostname.indexOf(":")!==-1;return r+"://"+(s?"["+this.opts.hostname+"]":this.opts.hostname)+n+this.opts.path+(i.length?"?"+i:"")}request(t={}){return Object.assign(t,{xd:this.xd,xs:this.xs},this.opts),new ke(this.uri(),t)}doWrite(t,r){const n=this.request({method:"POST",data:t});n.on("success",r),n.on("error",(i,s)=>{this.onError("xhr post error",i,s)})}doPoll(){const t=this.request();t.on("data",this.onData.bind(this)),t.on("error",(r,n)=>{this.onError("xhr poll error",r,n)}),this.pollXhr=t}}class ke extends Qt{constructor(t,r){super(),ni(this,r),this.opts=r,this.method=r.method||"GET",this.uri=t,this.async=r.async!==!1,this.data=r.data!==void 0?r.data:null,this.create()}create(){const t=_a(this.opts,"agent","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","autoUnref");t.xdomain=!!this.opts.xd,t.xscheme=!!this.opts.xs;const r=this.xhr=new sf(t);try{r.open(this.method,this.uri,this.async);try{if(this.opts.extraHeaders){r.setDisableHeaderCheck&&r.setDisableHeaderCheck(!0);for(let n in this.opts.extraHeaders)this.opts.extraHeaders.hasOwnProperty(n)&&r.setRequestHeader(n,this.opts.extraHeaders[n])}}catch{}if(this.method==="POST")try{r.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch{}try{r.setRequestHeader("Accept","*/*")}catch{}"withCredentials"in r&&(r.withCredentials=this.opts.withCredentials),this.opts.requestTimeout&&(r.timeout=this.opts.requestTimeout),r.onreadystatechange=()=>{r.readyState===4&&(r.status===200||r.status===1223?this.onLoad():this.setTimeoutFn(()=>{this.onError(typeof r.status=="number"?r.status:0)},0))},r.send(this.data)}catch(n){this.setTimeoutFn(()=>{this.onError(n)},0);return}typeof document<"u"&&(this.index=ke.requestsCount++,ke.requests[this.index]=this)}onError(t){this.emitReserved("error",t,this.xhr),this.cleanup(!0)}cleanup(t){if(!(typeof this.xhr>"u"||this.xhr===null)){if(this.xhr.onreadystatechange=ah,t)try{this.xhr.abort()}catch{}typeof document<"u"&&delete ke.requests[this.index],this.xhr=null}}onLoad(){const t=this.xhr.responseText;t!==null&&(this.emitReserved("data",t),this.emitReserved("success"),this.cleanup())}abort(){this.cleanup()}}ke.requestsCount=0;ke.requests={};if(typeof document<"u"){if(typeof attachEvent=="function")attachEvent("onunload",Ho);else if(typeof addEventListener=="function"){const e="onpagehide"in tr?"pagehide":"unload";addEventListener(e,Ho,!1)}}function Ho(){for(let e in ke.requests)ke.requests.hasOwnProperty(e)&&ke.requests[e].abort()}const of=(()=>typeof Promise=="function"&&typeof Promise.resolve=="function"?t=>Promise.resolve().then(t):(t,r)=>r(t,0))(),On=tr.WebSocket||tr.MozWebSocket,Fo=!0,ch="arraybuffer",Zo=typeof navigator<"u"&&typeof navigator.product=="string"&&navigator.product.toLowerCase()==="reactnative";class lh extends $a{constructor(t){super(t),this.supportsBinary=!t.forceBase64}get name(){return"websocket"}doOpen(){if(!this.check())return;const t=this.uri(),r=this.opts.protocols,n=Zo?{}:_a(this.opts,"agent","perMessageDeflate","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","localAddress","protocolVersion","origin","maxPayload","family","checkServerIdentity");this.opts.extraHeaders&&(n.headers=this.opts.extraHeaders);try{this.ws=Fo&&!Zo?r?new On(t,r):new On(t):new On(t,r,n)}catch(i){return this.emitReserved("error",i)}this.ws.binaryType=this.socket.binaryType||ch,this.addEventListeners()}addEventListeners(){this.ws.onopen=()=>{this.opts.autoUnref&&this.ws._socket.unref(),this.onOpen()},this.ws.onclose=t=>this.onClose({description:"websocket connection closed",context:t}),this.ws.onmessage=t=>this.onData(t.data),this.ws.onerror=t=>this.onError("websocket error",t)}write(t){this.writable=!1;for(let r=0;r<t.length;r++){const n=t[r],i=r===t.length-1;Wa(n,this.supportsBinary,s=>{const a={};try{Fo&&this.ws.send(s)}catch{}i&&of(()=>{this.writable=!0,this.emitReserved("drain")},this.setTimeoutFn)})}}doClose(){typeof this.ws<"u"&&(this.ws.close(),this.ws=null)}uri(){let t=this.query||{};const r=this.opts.secure?"wss":"ws";let n="";this.opts.port&&(r==="wss"&&Number(this.opts.port)!==443||r==="ws"&&Number(this.opts.port)!==80)&&(n=":"+this.opts.port),this.opts.timestampRequests&&(t[this.opts.timestampParam]=ef()),this.supportsBinary||(t.b64=1);const i=rf(t),s=this.opts.hostname.indexOf(":")!==-1;return r+"://"+(s?"["+this.opts.hostname+"]":this.opts.hostname)+n+this.opts.path+(i.length?"?"+i:"")}check(){return!!On}}const hh={websocket:lh,polling:uh},dh=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,ph=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];function fs(e){const t=e,r=e.indexOf("["),n=e.indexOf("]");r!=-1&&n!=-1&&(e=e.substring(0,r)+e.substring(r,n).replace(/:/g,";")+e.substring(n,e.length));let i=dh.exec(e||""),s={},a=14;for(;a--;)s[ph[a]]=i[a]||"";return r!=-1&&n!=-1&&(s.source=t,s.host=s.host.substring(1,s.host.length-1).replace(/;/g,":"),s.authority=s.authority.replace("[","").replace("]","").replace(/;/g,":"),s.ipv6uri=!0),s.pathNames=mh(s,s.path),s.queryKey=yh(s,s.query),s}function mh(e,t){const r=/\/{2,9}/g,n=t.replace(r,"/").split("/");return(t.slice(0,1)=="/"||t.length===0)&&n.splice(0,1),t.slice(-1)=="/"&&n.splice(n.length-1,1),n}function yh(e,t){const r={};return t.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,function(n,i,s){i&&(r[i]=s)}),r}let pr=class extends Qt{constructor(t,r={}){super(),t&&typeof t=="object"&&(r=t,t=null),t?(t=fs(t),r.hostname=t.host,r.secure=t.protocol==="https"||t.protocol==="wss",r.port=t.port,t.query&&(r.query=t.query)):r.host&&(r.hostname=fs(r.host).host),ni(this,r),this.secure=r.secure!=null?r.secure:typeof location<"u"&&location.protocol==="https:",r.hostname&&!r.port&&(r.port=this.secure?"443":"80"),this.hostname=r.hostname||(typeof location<"u"?location.hostname:"localhost"),this.port=r.port||(typeof location<"u"&&location.port?location.port:this.secure?"443":"80"),this.transports=r.transports||["polling","websocket"],this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.opts=Object.assign({path:"/engine.io",agent:!1,withCredentials:!1,upgrade:!0,timestampParam:"t",rememberUpgrade:!1,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{},closeOnBeforeunload:!0},r),this.opts.path=this.opts.path.replace(/\/$/,"")+"/",typeof this.opts.query=="string"&&(this.opts.query=sh(this.opts.query)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingTimeoutTimer=null,typeof addEventListener=="function"&&(this.opts.closeOnBeforeunload&&(this.beforeunloadEventListener=()=>{this.transport&&(this.transport.removeAllListeners(),this.transport.close())},addEventListener("beforeunload",this.beforeunloadEventListener,!1)),this.hostname!=="localhost"&&(this.offlineEventListener=()=>{this.onClose("transport close",{description:"network connection lost"})},addEventListener("offline",this.offlineEventListener,!1))),this.open()}createTransport(t){const r=Object.assign({},this.opts.query);r.EIO=Qa,r.transport=t,this.id&&(r.sid=this.id);const n=Object.assign({},this.opts.transportOptions[t],this.opts,{query:r,socket:this,hostname:this.hostname,secure:this.secure,port:this.port});return new hh[t](n)}open(){let t;if(this.opts.rememberUpgrade&&pr.priorWebsocketSuccess&&this.transports.indexOf("websocket")!==-1)t="websocket";else if(this.transports.length===0){this.setTimeoutFn(()=>{this.emitReserved("error","No transports available")},0);return}else t=this.transports[0];this.readyState="opening";try{t=this.createTransport(t)}catch{this.transports.shift(),this.open();return}t.open(),this.setTransport(t)}setTransport(t){this.transport&&this.transport.removeAllListeners(),this.transport=t,t.on("drain",this.onDrain.bind(this)).on("packet",this.onPacket.bind(this)).on("error",this.onError.bind(this)).on("close",r=>this.onClose("transport close",r))}probe(t){let r=this.createTransport(t),n=!1;pr.priorWebsocketSuccess=!1;const i=()=>{n||(r.send([{type:"ping",data:"probe"}]),r.once("packet",T=>{if(!n)if(T.type==="pong"&&T.data==="probe"){if(this.upgrading=!0,this.emitReserved("upgrading",r),!r)return;pr.priorWebsocketSuccess=r.name==="websocket",this.transport.pause(()=>{n||this.readyState!=="closed"&&(x(),this.setTransport(r),r.send([{type:"upgrade"}]),this.emitReserved("upgrade",r),r=null,this.upgrading=!1,this.flush())})}else{const N=new Error("probe error");N.transport=r.name,this.emitReserved("upgradeError",N)}}))};function s(){n||(n=!0,x(),r.close(),r=null)}const a=T=>{const N=new Error("probe error: "+T);N.transport=r.name,s(),this.emitReserved("upgradeError",N)};function l(){a("transport closed")}function y(){a("socket closed")}function w(T){r&&T.name!==r.name&&s()}const x=()=>{r.removeListener("open",i),r.removeListener("error",a),r.removeListener("close",l),this.off("close",y),this.off("upgrading",w)};r.once("open",i),r.once("error",a),r.once("close",l),this.once("close",y),this.once("upgrading",w),r.open()}onOpen(){if(this.readyState="open",pr.priorWebsocketSuccess=this.transport.name==="websocket",this.emitReserved("open"),this.flush(),this.readyState==="open"&&this.opts.upgrade&&this.transport.pause){let t=0;const r=this.upgrades.length;for(;t<r;t++)this.probe(this.upgrades[t])}}onPacket(t){if(this.readyState==="opening"||this.readyState==="open"||this.readyState==="closing")switch(this.emitReserved("packet",t),this.emitReserved("heartbeat"),t.type){case"open":this.onHandshake(JSON.parse(t.data));break;case"ping":this.resetPingTimeout(),this.sendPacket("pong"),this.emitReserved("ping"),this.emitReserved("pong");break;case"error":const r=new Error("server error");r.code=t.data,this.onError(r);break;case"message":this.emitReserved("data",t.data),this.emitReserved("message",t.data);break}}onHandshake(t){this.emitReserved("handshake",t),this.id=t.sid,this.transport.query.sid=t.sid,this.upgrades=this.filterUpgrades(t.upgrades),this.pingInterval=t.pingInterval,this.pingTimeout=t.pingTimeout,this.maxPayload=t.maxPayload,this.onOpen(),this.readyState!=="closed"&&this.resetPingTimeout()}resetPingTimeout(){this.clearTimeoutFn(this.pingTimeoutTimer),this.pingTimeoutTimer=this.setTimeoutFn(()=>{this.onClose("ping timeout")},this.pingInterval+this.pingTimeout),this.opts.autoUnref&&this.pingTimeoutTimer.unref()}onDrain(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,this.writeBuffer.length===0?this.emitReserved("drain"):this.flush()}flush(){if(this.readyState!=="closed"&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length){const t=this.getWritablePackets();this.transport.send(t),this.prevBufferLen=t.length,this.emitReserved("flush")}}getWritablePackets(){if(!(this.maxPayload&&this.transport.name==="polling"&&this.writeBuffer.length>1))return this.writeBuffer;let r=1;for(let n=0;n<this.writeBuffer.length;n++){const i=this.writeBuffer[n].data;if(i&&(r+=eh(i)),n>0&&r>this.maxPayload)return this.writeBuffer.slice(0,n);r+=2}return this.writeBuffer}write(t,r,n){return this.sendPacket("message",t,r,n),this}send(t,r,n){return this.sendPacket("message",t,r,n),this}sendPacket(t,r,n,i){if(typeof r=="function"&&(i=r,r=void 0),typeof n=="function"&&(i=n,n=null),this.readyState==="closing"||this.readyState==="closed")return;n=n||{},n.compress=n.compress!==!1;const s={type:t,data:r,options:n};this.emitReserved("packetCreate",s),this.writeBuffer.push(s),i&&this.once("flush",i),this.flush()}close(){const t=()=>{this.onClose("forced close"),this.transport.close()},r=()=>{this.off("upgrade",r),this.off("upgradeError",r),t()},n=()=>{this.once("upgrade",r),this.once("upgradeError",r)};return(this.readyState==="opening"||this.readyState==="open")&&(this.readyState="closing",this.writeBuffer.length?this.once("drain",()=>{this.upgrading?n():t()}):this.upgrading?n():t()),this}onError(t){pr.priorWebsocketSuccess=!1,this.emitReserved("error",t),this.onClose("transport error",t)}onClose(t,r){(this.readyState==="opening"||this.readyState==="open"||this.readyState==="closing")&&(this.clearTimeoutFn(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),typeof removeEventListener=="function"&&(removeEventListener("beforeunload",this.beforeunloadEventListener,!1),removeEventListener("offline",this.offlineEventListener,!1)),this.readyState="closed",this.id=null,this.emitReserved("close",t,r),this.writeBuffer=[],this.prevBufferLen=0)}filterUpgrades(t){const r=[];let n=0;const i=t.length;for(;n<i;n++)~this.transports.indexOf(t[n])&&r.push(t[n]);return r}};pr.protocol=Qa;function bh(e,t="",r){let n=e;r=r||typeof location<"u"&&location,e==null&&(e=r.protocol+"//"+r.host),typeof e=="string"&&(e.charAt(0)==="/"&&(e.charAt(1)==="/"?e=r.protocol+e:e=r.host+e),/^(https?|wss?):\/\//.test(e)||(typeof r<"u"?e=r.protocol+"//"+e:e="https://"+e),n=fs(e)),n.port||(/^(http|ws)$/.test(n.protocol)?n.port="80":/^(http|ws)s$/.test(n.protocol)&&(n.port="443")),n.path=n.path||"/";const s=n.host.indexOf(":")!==-1?"["+n.host+"]":n.host;return n.id=n.protocol+"://"+s+":"+n.port+t,n.href=n.protocol+"://"+s+(r&&r.port===n.port?"":":"+n.port),n}const vh=typeof ArrayBuffer=="function",wh=e=>typeof ArrayBuffer.isView=="function"?ArrayBuffer.isView(e):e.buffer instanceof ArrayBuffer,af=Object.prototype.toString,gh=typeof Blob=="function"||typeof Blob<"u"&&af.call(Blob)==="[object BlobConstructor]",xh=typeof File=="function"||typeof File<"u"&&af.call(File)==="[object FileConstructor]";function js(e){return vh&&(e instanceof ArrayBuffer||wh(e))||gh&&e instanceof Blob||xh&&e instanceof File}function Rn(e,t){if(!e||typeof e!="object")return!1;if(Array.isArray(e)){for(let r=0,n=e.length;r<n;r++)if(Rn(e[r]))return!0;return!1}if(js(e))return!0;if(e.toJSON&&typeof e.toJSON=="function"&&arguments.length===1)return Rn(e.toJSON(),!0);for(const r in e)if(Object.prototype.hasOwnProperty.call(e,r)&&Rn(e[r]))return!0;return!1}function Ph(e){const t=[],r=e.data,n=e;return n.data=us(r,t),n.attachments=t.length,{packet:n,buffers:t}}function us(e,t){if(!e)return e;if(js(e)){const r={_placeholder:!0,num:t.length};return t.push(e),r}else if(Array.isArray(e)){const r=new Array(e.length);for(let n=0;n<e.length;n++)r[n]=us(e[n],t);return r}else if(typeof e=="object"&&!(e instanceof Date)){const r={};for(const n in e)Object.prototype.hasOwnProperty.call(e,n)&&(r[n]=us(e[n],t));return r}return e}function Oh(e,t){return e.data=cs(e.data,t),delete e.attachments,e}function cs(e,t){if(!e)return e;if(e&&e._placeholder===!0){if(typeof e.num=="number"&&e.num>=0&&e.num<t.length)return t[e.num];throw new Error("illegal attachments")}else if(Array.isArray(e))for(let r=0;r<e.length;r++)e[r]=cs(e[r],t);else if(typeof e=="object")for(const r in e)Object.prototype.hasOwnProperty.call(e,r)&&(e[r]=cs(e[r],t));return e}const Nh=5;var dt;(function(e){e[e.CONNECT=0]="CONNECT",e[e.DISCONNECT=1]="DISCONNECT",e[e.EVENT=2]="EVENT",e[e.ACK=3]="ACK",e[e.CONNECT_ERROR=4]="CONNECT_ERROR",e[e.BINARY_EVENT=5]="BINARY_EVENT",e[e.BINARY_ACK=6]="BINARY_ACK"})(dt||(dt={}));class Eh{constructor(t){this.replacer=t}encode(t){return(t.type===dt.EVENT||t.type===dt.ACK)&&Rn(t)?this.encodeAsBinary({type:t.type===dt.EVENT?dt.BINARY_EVENT:dt.BINARY_ACK,nsp:t.nsp,data:t.data,id:t.id}):[this.encodeAsString(t)]}encodeAsString(t){let r=""+t.type;return(t.type===dt.BINARY_EVENT||t.type===dt.BINARY_ACK)&&(r+=t.attachments+"-"),t.nsp&&t.nsp!=="/"&&(r+=t.nsp+","),t.id!=null&&(r+=t.id),t.data!=null&&(r+=JSON.stringify(t.data,this.replacer)),r}encodeAsBinary(t){const r=Ph(t),n=this.encodeAsString(r.packet),i=r.buffers;return i.unshift(n),i}}class Rs extends Qt{constructor(t){super(),this.reviver=t}add(t){let r;if(typeof t=="string"){if(this.reconstructor)throw new Error("got plaintext data when reconstructing a packet");r=this.decodeString(t);const n=r.type===dt.BINARY_EVENT;n||r.type===dt.BINARY_ACK?(r.type=n?dt.EVENT:dt.ACK,this.reconstructor=new Th(r),r.attachments===0&&super.emitReserved("decoded",r)):super.emitReserved("decoded",r)}else if(js(t)||t.base64)if(this.reconstructor)r=this.reconstructor.takeBinaryData(t),r&&(this.reconstructor=null,super.emitReserved("decoded",r));else throw new Error("got binary data when not reconstructing a packet");else throw new Error("Unknown type: "+t)}decodeString(t){let r=0;const n={type:Number(t.charAt(0))};if(dt[n.type]===void 0)throw new Error("unknown packet type "+n.type);if(n.type===dt.BINARY_EVENT||n.type===dt.BINARY_ACK){const s=r+1;for(;t.charAt(++r)!=="-"&&r!=t.length;);const a=t.substring(s,r);if(a!=Number(a)||t.charAt(r)!=="-")throw new Error("Illegal attachments");n.attachments=Number(a)}if(t.charAt(r+1)==="/"){const s=r+1;for(;++r&&!(t.charAt(r)===","||r===t.length););n.nsp=t.substring(s,r)}else n.nsp="/";const i=t.charAt(r+1);if(i!==""&&Number(i)==i){const s=r+1;for(;++r;){const a=t.charAt(r);if(a==null||Number(a)!=a){--r;break}if(r===t.length)break}n.id=Number(t.substring(s,r+1))}if(t.charAt(++r)){const s=this.tryParse(t.substr(r));if(Rs.isPayloadValid(n.type,s))n.data=s;else throw new Error("invalid payload")}return n}tryParse(t){try{return JSON.parse(t,this.reviver)}catch{return!1}}static isPayloadValid(t,r){switch(t){case dt.CONNECT:return typeof r=="object";case dt.DISCONNECT:return r===void 0;case dt.CONNECT_ERROR:return typeof r=="string"||typeof r=="object";case dt.EVENT:case dt.BINARY_EVENT:return Array.isArray(r)&&r.length>0;case dt.ACK:case dt.BINARY_ACK:return Array.isArray(r)}}destroy(){this.reconstructor&&(this.reconstructor.finishedReconstruction(),this.reconstructor=null)}}class Th{constructor(t){this.packet=t,this.buffers=[],this.reconPack=t}takeBinaryData(t){if(this.buffers.push(t),this.buffers.length===this.reconPack.attachments){const r=Oh(this.reconPack,this.buffers);return this.finishedReconstruction(),r}return null}finishedReconstruction(){this.reconPack=null,this.buffers=[]}}const Mh=Object.freeze(Object.defineProperty({__proto__:null,Decoder:Rs,Encoder:Eh,get PacketType(){return dt},protocol:Nh},Symbol.toStringTag,{value:"Module"}));function Pe(e,t,r){return e.on(t,r),function(){e.off(t,r)}}const zh=Object.freeze({connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1});class ff extends Qt{constructor(t,r,n){super(),this.connected=!1,this.receiveBuffer=[],this.sendBuffer=[],this.ids=0,this.acks={},this.flags={},this.io=t,this.nsp=r,n&&n.auth&&(this.auth=n.auth),this.io._autoConnect&&this.open()}get disconnected(){return!this.connected}subEvents(){if(this.subs)return;const t=this.io;this.subs=[Pe(t,"open",this.onopen.bind(this)),Pe(t,"packet",this.onpacket.bind(this)),Pe(t,"error",this.onerror.bind(this)),Pe(t,"close",this.onclose.bind(this))]}get active(){return!!this.subs}connect(){return this.connected?this:(this.subEvents(),this.io._reconnecting||this.io.open(),this.io._readyState==="open"&&this.onopen(),this)}open(){return this.connect()}send(...t){return t.unshift("message"),this.emit.apply(this,t),this}emit(t,...r){if(zh.hasOwnProperty(t))throw new Error('"'+t.toString()+'" is a reserved event name');r.unshift(t);const n={type:dt.EVENT,data:r};if(n.options={},n.options.compress=this.flags.compress!==!1,typeof r[r.length-1]=="function"){const a=this.ids++,l=r.pop();this._registerAckCallback(a,l),n.id=a}const i=this.io.engine&&this.io.engine.transport&&this.io.engine.transport.writable;return this.flags.volatile&&(!i||!this.connected)||(this.connected?(this.notifyOutgoingListeners(n),this.packet(n)):this.sendBuffer.push(n)),this.flags={},this}_registerAckCallback(t,r){const n=this.flags.timeout;if(n===void 0){this.acks[t]=r;return}const i=this.io.setTimeoutFn(()=>{delete this.acks[t];for(let s=0;s<this.sendBuffer.length;s++)this.sendBuffer[s].id===t&&this.sendBuffer.splice(s,1);r.call(this,new Error("operation has timed out"))},n);this.acks[t]=(...s)=>{this.io.clearTimeoutFn(i),r.apply(this,[null,...s])}}packet(t){t.nsp=this.nsp,this.io._packet(t)}onopen(){typeof this.auth=="function"?this.auth(t=>{this.packet({type:dt.CONNECT,data:t})}):this.packet({type:dt.CONNECT,data:this.auth})}onerror(t){this.connected||this.emitReserved("connect_error",t)}onclose(t,r){this.connected=!1,delete this.id,this.emitReserved("disconnect",t,r)}onpacket(t){if(t.nsp===this.nsp)switch(t.type){case dt.CONNECT:if(t.data&&t.data.sid){const i=t.data.sid;this.onconnect(i)}else this.emitReserved("connect_error",new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));break;case dt.EVENT:case dt.BINARY_EVENT:this.onevent(t);break;case dt.ACK:case dt.BINARY_ACK:this.onack(t);break;case dt.DISCONNECT:this.ondisconnect();break;case dt.CONNECT_ERROR:this.destroy();const n=new Error(t.data.message);n.data=t.data.data,this.emitReserved("connect_error",n);break}}onevent(t){const r=t.data||[];t.id!=null&&r.push(this.ack(t.id)),this.connected?this.emitEvent(r):this.receiveBuffer.push(Object.freeze(r))}emitEvent(t){if(this._anyListeners&&this._anyListeners.length){const r=this._anyListeners.slice();for(const n of r)n.apply(this,t)}super.emit.apply(this,t)}ack(t){const r=this;let n=!1;return function(...i){n||(n=!0,r.packet({type:dt.ACK,id:t,data:i}))}}onack(t){const r=this.acks[t.id];typeof r=="function"&&(r.apply(this,t.data),delete this.acks[t.id])}onconnect(t){this.id=t,this.connected=!0,this.emitBuffered(),this.emitReserved("connect")}emitBuffered(){this.receiveBuffer.forEach(t=>this.emitEvent(t)),this.receiveBuffer=[],this.sendBuffer.forEach(t=>{this.notifyOutgoingListeners(t),this.packet(t)}),this.sendBuffer=[]}ondisconnect(){this.destroy(),this.onclose("io server disconnect")}destroy(){this.subs&&(this.subs.forEach(t=>t()),this.subs=void 0),this.io._destroy(this)}disconnect(){return this.connected&&this.packet({type:dt.DISCONNECT}),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}close(){return this.disconnect()}compress(t){return this.flags.compress=t,this}get volatile(){return this.flags.volatile=!0,this}timeout(t){return this.flags.timeout=t,this}onAny(t){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(t),this}prependAny(t){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(t),this}offAny(t){if(!this._anyListeners)return this;if(t){const r=this._anyListeners;for(let n=0;n<r.length;n++)if(t===r[n])return r.splice(n,1),this}else this._anyListeners=[];return this}listenersAny(){return this._anyListeners||[]}onAnyOutgoing(t){return this._anyOutgoingListeners=this._anyOutgoingListeners||[],this._anyOutgoingListeners.push(t),this}prependAnyOutgoing(t){return this._anyOutgoingListeners=this._anyOutgoingListeners||[],this._anyOutgoingListeners.unshift(t),this}offAnyOutgoing(t){if(!this._anyOutgoingListeners)return this;if(t){const r=this._anyOutgoingListeners;for(let n=0;n<r.length;n++)if(t===r[n])return r.splice(n,1),this}else this._anyOutgoingListeners=[];return this}listenersAnyOutgoing(){return this._anyOutgoingListeners||[]}notifyOutgoingListeners(t){if(this._anyOutgoingListeners&&this._anyOutgoingListeners.length){const r=this._anyOutgoingListeners.slice();for(const n of r)n.apply(this,t.data)}}}function Cr(e){e=e||{},this.ms=e.min||100,this.max=e.max||1e4,this.factor=e.factor||2,this.jitter=e.jitter>0&&e.jitter<=1?e.jitter:0,this.attempts=0}Cr.prototype.duration=function(){var e=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var t=Math.random(),r=Math.floor(t*this.jitter*e);e=Math.floor(t*10)&1?e+r:e-r}return Math.min(e,this.max)|0};Cr.prototype.reset=function(){this.attempts=0};Cr.prototype.setMin=function(e){this.ms=e};Cr.prototype.setMax=function(e){this.max=e};Cr.prototype.setJitter=function(e){this.jitter=e};class ls extends Qt{constructor(t,r){var n;super(),this.nsps={},this.subs=[],t&&typeof t=="object"&&(r=t,t=void 0),r=r||{},r.path=r.path||"/socket.io",this.opts=r,ni(this,r),this.reconnection(r.reconnection!==!1),this.reconnectionAttempts(r.reconnectionAttempts||1/0),this.reconnectionDelay(r.reconnectionDelay||1e3),this.reconnectionDelayMax(r.reconnectionDelayMax||5e3),this.randomizationFactor((n=r.randomizationFactor)!==null&&n!==void 0?n:.5),this.backoff=new Cr({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(r.timeout==null?2e4:r.timeout),this._readyState="closed",this.uri=t;const i=r.parser||Mh;this.encoder=new i.Encoder,this.decoder=new i.Decoder,this._autoConnect=r.autoConnect!==!1,this._autoConnect&&this.open()}reconnection(t){return arguments.length?(this._reconnection=!!t,this):this._reconnection}reconnectionAttempts(t){return t===void 0?this._reconnectionAttempts:(this._reconnectionAttempts=t,this)}reconnectionDelay(t){var r;return t===void 0?this._reconnectionDelay:(this._reconnectionDelay=t,(r=this.backoff)===null||r===void 0||r.setMin(t),this)}randomizationFactor(t){var r;return t===void 0?this._randomizationFactor:(this._randomizationFactor=t,(r=this.backoff)===null||r===void 0||r.setJitter(t),this)}reconnectionDelayMax(t){var r;return t===void 0?this._reconnectionDelayMax:(this._reconnectionDelayMax=t,(r=this.backoff)===null||r===void 0||r.setMax(t),this)}timeout(t){return arguments.length?(this._timeout=t,this):this._timeout}maybeReconnectOnOpen(){!this._reconnecting&&this._reconnection&&this.backoff.attempts===0&&this.reconnect()}open(t){if(~this._readyState.indexOf("open"))return this;this.engine=new pr(this.uri,this.opts);const r=this.engine,n=this;this._readyState="opening",this.skipReconnect=!1;const i=Pe(r,"open",function(){n.onopen(),t&&t()}),s=Pe(r,"error",a=>{n.cleanup(),n._readyState="closed",this.emitReserved("error",a),t?t(a):n.maybeReconnectOnOpen()});if(this._timeout!==!1){const a=this._timeout;a===0&&i();const l=this.setTimeoutFn(()=>{i(),r.close(),r.emit("error",new Error("timeout"))},a);this.opts.autoUnref&&l.unref(),this.subs.push(function(){clearTimeout(l)})}return this.subs.push(i),this.subs.push(s),this}connect(t){return this.open(t)}onopen(){this.cleanup(),this._readyState="open",this.emitReserved("open");const t=this.engine;this.subs.push(Pe(t,"ping",this.onping.bind(this)),Pe(t,"data",this.ondata.bind(this)),Pe(t,"error",this.onerror.bind(this)),Pe(t,"close",this.onclose.bind(this)),Pe(this.decoder,"decoded",this.ondecoded.bind(this)))}onping(){this.emitReserved("ping")}ondata(t){try{this.decoder.add(t)}catch(r){this.onclose("parse error",r)}}ondecoded(t){of(()=>{this.emitReserved("packet",t)},this.setTimeoutFn)}onerror(t){this.emitReserved("error",t)}socket(t,r){let n=this.nsps[t];return n||(n=new ff(this,t,r),this.nsps[t]=n),n}_destroy(t){const r=Object.keys(this.nsps);for(const n of r)if(this.nsps[n].active)return;this._close()}_packet(t){const r=this.encoder.encode(t);for(let n=0;n<r.length;n++)this.engine.write(r[n],t.options)}cleanup(){this.subs.forEach(t=>t()),this.subs.length=0,this.decoder.destroy()}_close(){this.skipReconnect=!0,this._reconnecting=!1,this.onclose("forced close"),this.engine&&this.engine.close()}disconnect(){return this._close()}onclose(t,r){this.cleanup(),this.backoff.reset(),this._readyState="closed",this.emitReserved("close",t,r),this._reconnection&&!this.skipReconnect&&this.reconnect()}reconnect(){if(this._reconnecting||this.skipReconnect)return this;const t=this;if(this.backoff.attempts>=this._reconnectionAttempts)this.backoff.reset(),this.emitReserved("reconnect_failed"),this._reconnecting=!1;else{const r=this.backoff.duration();this._reconnecting=!0;const n=this.setTimeoutFn(()=>{t.skipReconnect||(this.emitReserved("reconnect_attempt",t.backoff.attempts),!t.skipReconnect&&t.open(i=>{i?(t._reconnecting=!1,t.reconnect(),this.emitReserved("reconnect_error",i)):t.onreconnect()}))},r);this.opts.autoUnref&&n.unref(),this.subs.push(function(){clearTimeout(n)})}}onreconnect(){const t=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),this.emitReserved("reconnect",t)}}const Vr={};function Sn(e,t){typeof e=="object"&&(t=e,e=void 0),t=t||{};const r=bh(e,t.path||"/socket.io"),n=r.source,i=r.id,s=r.path,a=Vr[i]&&s in Vr[i].nsps,l=t.forceNew||t["force new connection"]||t.multiplex===!1||a;let y;return l?y=new ls(n,t):(Vr[i]||(Vr[i]=new ls(n,t)),y=Vr[i]),r.query&&!t.query&&(t.query=r.queryKey),y.socket(r.path,t)}Object.assign(Sn,{Manager:ls,Socket:ff,io:Sn,connect:Sn});var Q=(e=>(e.GET="GET",e.POST="POST",e.DELETE="DELETE",e.PATCH="PATCH",e.PUT="PUT",e))(Q||{});class he{constructor(t){this.client=t,this.client.options.baseUrl=this.client.options.baseUrl.replace(/\/$/,"")}async query(t,r){return(await this.client.instance({method:Q.GET,baseURL:this.baseUrl,url:t,params:r})).data}async postRequest(t,r,n){return(await this.client.instance({method:Q.POST,baseURL:this.baseUrl,url:t,data:r,params:n})).data}}const uf=e=>typeof e=="object"&&!!e&&"signerPayloadJSON"in e,Do=e=>uf(e)&&!!e&&"signature"in e;function cf(e){return new Promise(t=>{setTimeout(t,e)})}var kh=Object.defineProperty,Lh=Object.defineProperties,Ah=Object.getOwnPropertyDescriptors,Co=Object.getOwnPropertySymbols,jh=Object.prototype.hasOwnProperty,Rh=Object.prototype.propertyIsEnumerable,Io=(e,t,r)=>t in e?kh(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,Nn=(e,t)=>{for(var r in t||(t={}))jh.call(t,r)&&Io(e,r,t[r]);if(Co)for(var r of Co(t))Rh.call(t,r)&&Io(e,r,t[r]);return e},En=(e,t)=>Lh(e,Ah(t));class at{constructor(t,r,n){this.client=t,this.method=r,this.path=n,this.url=`${this.client.options.baseUrl}/${this.path}`}async buildBatch(t,r){return(await this.client.instance({method:this.method,url:this.url,params:En(Nn({},r),{use:"BuildBatch"}),data:t})).data}async build(t,r){return(await this.client.instance({method:this.method,url:this.url,params:En(Nn({},r),{use:"Build"}),data:t})).data}async getFee(t){const r=await this.client.instance({method:this.method,url:this.url,params:{use:"GetFee"},data:t});return r==null?void 0:r.data}async sign(t,r){const n=uf(t)?t:await this.build(t,r),{signerPayloadJSON:i}=n,{signature:s}=await this.client.extrinsics.sign(n,r==null?void 0:r.signer);return{signature:s,signerPayloadJSON:i}}async submit(t,r){const n=Do(t)?t:await this.sign(t,r);return(await this.client.instance({method:this.method,url:this.url,params:En(Nn({},r),{use:"Submit"}),data:n})).data}async submitWatch(t,r){const n=Do(t)?t:await this.sign(t,r);return(await this.client.instance({method:this.method,url:this.url,params:En(Nn({},r),{use:"SubmitWatch"}),data:n})).data}async submitWaitResult(t,r){const{hash:n}=await this.submitWatch(t,r);let i,s=0;for(;(!i||!(i!=null&&i.isCompleted))&&s<=this.client.params.maximumNumberOfStatusRequests;){if(s+=1,i=await this.client.extrinsics.status({hash:n}),i.isCompleted||i.error)return i;await cf(this.client.params.waitBetweenStatusRequestsInMs)}throw new Error}}class Sh extends he{constructor(){super(...arguments),this.path="balance",this.baseUrl=`${this.client.options.baseUrl}/${this.path}`,this.transfer=new at(this.client,Q.POST,`${this.path}/transfer`),this.get=t=>this.query("",t)}}class Xh extends he{constructor(){super(...arguments),this.path="chain",this.baseUrl=`${this.client.options.baseUrl}/${this.path}`,this.properties=()=>this.query("properties")}}class Uh extends he{constructor(){super(...arguments),this.path="collections",this.baseUrl=`${this.client.options.baseUrl}/${this.path}`,this.setProperties=new at(this.client,Q.POST,`${this.path}/properties`),this.deleteProperties=new at(this.client,Q.DELETE,`${this.path}/properties`),this.setPropertyPermissions=new at(this.client,Q.POST,`${this.path}/property-permissions`),this.properties=t=>this.query("properties",t),this.tokens=t=>this.query("tokens",t),this.propertyPermissions=t=>this.query("property-permissions",t),this.creation=new at(this.client,Q.POST,this.path),this.getLimits=t=>this.query("limits",t),this.setLimits=new at(this.client,Q.POST,`${this.path}/set-limits`),this.get=t=>this.query("",t),this.transfer=new at(this.client,Q.PATCH,`${this.path}/transfer`),this.destroy=new at(this.client,Q.DELETE,this.path),this.stats=()=>this.query("stats"),this.setTransfersEnabled=new at(this.client,Q.POST,`${this.path}/transfers-enabled`),this.setPermissions=new at(this.client,Q.POST,`${this.path}/permissions`),this.nextSponsored=t=>this.query("next-sponsored",t),this.lastTokenId=t=>this.query("last-token-id",t),this.allowList=t=>this.query("allow-list",t),this.allowed=t=>this.query("allowed",t),this.addToAllowList=new at(this.client,Q.POST,`${this.path}/add-allow-list`),this.removeFromAllowList=new at(this.client,Q.POST,`${this.path}/remove-from-allow-list`),this.admins=t=>this.query("admins",t),this.addAdmin=new at(this.client,Q.POST,`${this.path}/admins`),this.removeAdmin=new at(this.client,Q.DELETE,`${this.path}/admins`),this.setSponsorship=new at(this.client,Q.POST,`${this.path}/sponsorship`),this.confirmSponsorship=new at(this.client,Q.POST,`${this.path}/sponsorship/confirm`),this.removeSponsorship=new at(this.client,Q.DELETE,`${this.path}/sponsorship`),this.totalSupply=({collectionId:t})=>this.query("total-supply",{collectionId:t})}}class Bh extends he{constructor(){super(...arguments),this.path="erc721",this.baseUrl=`${this.client.options.baseUrl}/${this.path}`,this.createCollection=new at(this.client,Q.POST,`${this.path}/collection`),this.createToken=new at(this.client,Q.POST,`${this.path}/token`)}}const Hh=(e,t)=>{const r=new Ga(t),n=[],i=[];return e.filter(s=>s.section==="evm"&&s.method==="Log").forEach(s=>{const a=s.data[0],{topics:l,data:y}=a;try{const w=r.decodeEvent(l,y);n.push({name:w.name,values:w.values})}catch{i.push({topics:l,data:y})}}),{parsedEvents:n,unknownEvents:i}};var Fh=Object.defineProperty,Vo=Object.getOwnPropertySymbols,Zh=Object.prototype.hasOwnProperty,Dh=Object.prototype.propertyIsEnumerable,qo=(e,t,r)=>t in e?Fh(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,Ch=(e,t)=>{for(var r in t||(t={}))Zh.call(t,r)&&qo(e,r,t[r]);if(Vo)for(var r of Vo(t))Dh.call(t,r)&&qo(e,r,t[r]);return e};class Ih extends at{constructor(t,r,n,i){super(t,r,n),this.contract=i}async build(t){return super.build(Ch({contractAddress:this.contract.contractAddress,abi:this.contract.abi},t))}async submitWaitResult(t){const r=await super.submitWaitResult(t),{parsedEvents:n,unknownEvents:i}=Hh(r.events,this.contract.abi);return r.parsed.parsedEvents=n,r.parsed.unknownEvents=i,r}}var Vh=Object.defineProperty,Go=Object.getOwnPropertySymbols,qh=Object.prototype.hasOwnProperty,Gh=Object.prototype.propertyIsEnumerable,Wo=(e,t,r)=>t in e?Vh(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,Wh=(e,t)=>{for(var r in t||(t={}))qh.call(t,r)&&Wo(e,r,t[r]);if(Go)for(var r of Go(t))Gh.call(t,r)&&Wo(e,r,t[r]);return e};class Yh extends he{constructor(t,r,n){super(t),this.contractAddress=r,this.abi=n,this.path="evm",this.baseUrl=`${this.client.options.baseUrl}/${this.path}`,this.send=new Ih(this.client,Q.POST,`${this.path}/send`,this)}async call(t){return(await this.client.instance({method:Q.POST,baseURL:this.baseUrl,url:"call",data:Wh({contractAddress:this.contractAddress,abi:this.abi},t)})).data}}class Jh extends he{constructor(){super(...arguments),this.path="evm",this.baseUrl=`${this.client.options.baseUrl}/${this.path}`,this.send=new at(this.client,Q.POST,`${this.path}/send`),this.contractExists=t=>this.query("contract-exists",t),this.call=t=>this.postRequest("call",t)}async contractConnect(t,r){const{exists:n}=await this.contractExists({contractAddress:t});if(!n)throw new Error("Contract is not exists");return new Yh(this.client,t,r)}}class Kh extends he{constructor(){super(...arguments),this.path="extrinsic",this.baseUrl=`${this.client.options.baseUrl}/${this.path}`}async build(t){return(await this.client.instance({method:Q.POST,baseURL:this.baseUrl,url:"build",data:t})).data}async getFee(t){return(await this.client.instance({method:Q.POST,baseURL:this.baseUrl,url:"calculate-fee",data:t})).data}async sign(t,r=this.client.options.signer){if(!r)throw new Error("No signer provided");return r.sign(t)}async submit(t){return(await this.client.instance({method:Q.POST,baseURL:this.baseUrl,url:"submit",data:t})).data}async submitWatch(t,r=this.client.options.signer){const n=await this.client.extrinsics.build(t),i=await this.client.extrinsics.sign(n,r);return await this.client.extrinsics.submit({signerPayloadJSON:n.signerPayloadJSON,signature:i.signature})}async submitWaitResult(t,r=this.client.options.signer){const{hash:n}=await this.client.extrinsics.submitWatch(t,r);let i,s=0;for(;(!i||!(i!=null&&i.isCompleted))&&s<=this.client.params.maximumNumberOfStatusRequests;){if(s+=1,i=await this.client.extrinsics.status({hash:n}),i.isCompleted||i.error)return i;await cf(this.client.params.waitBetweenStatusRequestsInMs)}throw new Error}async status(t){return(await this.client.instance({method:Q.GET,baseURL:this.baseUrl,url:"status",params:t})).data}async get(t){return(await this.client.instance({method:Q.GET,baseURL:this.baseUrl,url:"",params:t})).data}}class Qh extends he{constructor(){super(...arguments),this.path="fungible",this.baseUrl=`${this.client.options.baseUrl}/${this.path}`,this.transfer=new at(this.client,Q.POST,`${this.path}/transfer`),this.getCollection=t=>this.query("collection",t),this.burn=new at(this.client,Q.DELETE,this.path),this.createCollection=new at(this.client,Q.POST,`${this.path}/collection`),this.getBalance=t=>this.query("balance",t),this.addTokens=new at(this.client,Q.POST,`${this.path}/tokens`),this.transferTokens=new at(this.client,Q.POST,`${this.path}/tokens/transfer`),this.approveTokens=new at(this.client,Q.POST,`${this.path}/tokens/approve`),this.allowanceTokens=t=>this.query("tokens/allowance",t),this.totalPieces=t=>this.query("total-pieces",t)}}class _h extends he{constructor(){super(...arguments),this.path="refungible",this.baseUrl=`${this.client.options.baseUrl}/${this.path}`,this.getCollection=t=>this.query("collection",t),this.burn=new at(this.client,Q.DELETE,this.path),this.getBalance=t=>this.query("tokens/balance",t),this.createCollection=new at(this.client,Q.POST,`${this.path}/collection`),this.createToken=new at(this.client,Q.POST,`${this.path}/tokens`),this.transferToken=new at(this.client,Q.POST,`${this.path}/tokens/transfer`),this.approveToken=new at(this.client,Q.POST,`${this.path}/tokens/approve`),this.allowanceToken=t=>this.query("tokens/allowance",t),this.repartitionToken=new at(this.client,Q.POST,`${this.path}/tokens/repartition`),this.totalPieces=t=>this.query("tokens/total-pieces",t),this.accountTokens=t=>this.query("tokens/account-tokens",t)}}const $h=e=>Object.hasOwnProperty.call(e,"content");class In extends he{constructor(){super(...arguments),this.path="ipfs",this.headers={"Content-Type":"multipart/form-data"},this.baseUrl=`${this.client.options.baseUrl}/${this.path}`}async uploadFile({file:t}){const r=new qi;return r.append("file",t,"file"),(await this.client.instance({method:Q.POST,url:`${this.baseUrl}/upload-file`,data:r,headers:this.headers})).data}async uploadFiles({files:t}){const r=In.filesToFormData(t);return(await this.client.instance({method:Q.POST,url:`${this.baseUrl}/upload-files`,data:r,headers:this.headers})).data}async addFiles({cid:t,files:r}){const n=In.filesToFormData(r);return n.append("cid",t),(await this.client.instance({method:Q.PATCH,url:`${this.baseUrl}/add-files`,data:n,headers:this.headers})).data}async uploadZip({file:t}){const r=new qi;return r.append("file",t,"file"),(await this.client.instance({method:Q.POST,url:`${this.baseUrl}/upload-zip`,data:r,headers:{"Content-Type":"multipart/form-data"}})).data}static filesToFormData(t){const r=new qi;return t.forEach(n=>{r.append("files",$h(n)?n.content:n,n.name)}),r}}class td extends he{constructor(){super(...arguments),this.path="tokens",this.baseUrl=`${this.client.options.baseUrl}/${this.path}`,this.setProperties=new at(this.client,Q.POST,`${this.path}/properties`),this.deleteProperties=new at(this.client,Q.DELETE,`${this.path}/properties`),this.properties=t=>this.query("properties",t),this.create=new at(this.client,Q.POST,this.path),this.createMultiple=new at(this.client,Q.POST,`${this.path}/create-multiple`),this.accountTokens=t=>this.query("account-tokens",t),this.get=t=>this.query("",t),this.exists=t=>this.query("exists",t),this.children=t=>this.query("children",t),this.parent=t=>this.query("parent",t),this.owner=t=>this.query("owner",t),this.topmostOwner=t=>this.query("topmost-owner",t),this.nest=new at(this.client,Q.POST,`${this.path}/nest`),this.unnest=new at(this.client,Q.POST,`${this.path}/unnest`),this.burn=new at(this.client,Q.DELETE,this.path),this.transfer=new at(this.client,Q.PATCH,`${this.path}/transfer`),this.approve=new at(this.client,Q.POST,`${this.path}/approve`),this.allowance=t=>this.query("allowance",t),this.isBundle=t=>this.query("is-bundle",t),this.getBundle=t=>this.query("get-bundle",t),this.balance=t=>this.query("balance",t)}}class ed extends Error{constructor(t){super(t.message),this.code=t.code,this.name=t.name,this.details=t.details}}var rd="0.2.5";class nd extends he{constructor(){super(...arguments),this.path="common",this.baseUrl=`${this.client.options.baseUrl}/${this.path}`,this.chainProperties=()=>this.query("chain-properties"),this.getNonce=t=>this.query("nonce",t)}}class id extends he{constructor(){super(...arguments),this.path="query",this.baseUrl=`${this.client.options.baseUrl}/${this.path}`}async get(t){const{endpoint:r,module:n,method:i}=t,s=`${r}/${n}/${i}`;return(await this.client.instance({method:Q.GET,baseURL:this.baseUrl,url:s})).data}async execute(t,r){const{endpoint:n,module:i,method:s}=t,a=`${n}/${i}/${s}`;return(await this.client.instance({method:Q.POST,baseURL:this.baseUrl,url:a,data:r||{}})).data}}class sd{constructor(t){this.socket=t}on(t,r){this.socket.on(t,r)}subscribeHeaders(){return this.socket.emit("subscribe:headers"),this}subscribeBlocks(){return this.socket.emit("subscribe:blocks"),this}subscribeExtrinsics(t){return this.socket.emit("subscribe:extrinsics",t),this}subscribeEvents(t){return this.socket.emit("subscribe:events",t),this}}class od{constructor(t){this.client=t}connect(t){const r={path:t?`/${t}/socket.io`:"/socket.io"},n=Sn(this.client.options.baseUrl,r);return new sd(n)}}class ad{constructor(t){this.options=t,this.chain=new Xh(this),this.common=new nd(this),this.extrinsics=new Kh(this),this.balance=new Sh(this),this.fungible=new Qh(this),this.refungible=new _h(this),this.collections=new Uh(this),this.tokens=new td(this),this.erc721=new Bh(this),this.ipfs=new In(this),this.evm=new Jh(this),this.stateQuery=new id(this),this.subscriptions=new od(this),this.defaults={baseUrl:""},this.options.baseUrl=t.baseUrl.replace(/\/$/,""),this.params={maximumNumberOfStatusRequests:this.options.maximumNumberOfStatusRequests||5,waitBetweenStatusRequestsInMs:this.options.waitBetweenStatusRequestsInMs||5e3},this.instance=gc.create({baseURL:this.options.baseUrl,maxContentLength:1/0,maxBodyLength:1/0}),this.instance.interceptors.response.use(r=>r,r=>{var n,i;const s=(i=(n=r.response)==null?void 0:n.data)==null?void 0:i.error;throw s&&typeof s=="object"?new ed(s):r}),this.instance.defaults.headers.common["X-SDK-Version"]=rd}}const fd=ad;/*! *****************************************************************************
Copyright (C) Microsoft. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */var Yo;(function(e){(function(t){var r=typeof Ur=="object"?Ur:typeof self=="object"?self:typeof this=="object"?this:Function("return this;")(),n=i(e);typeof r.Reflect>"u"?r.Reflect=e:n=i(r.Reflect,n),t(n);function i(s,a){return function(l,y){typeof s[l]!="function"&&Object.defineProperty(s,l,{configurable:!0,writable:!0,value:y}),a&&a(l,y)}}})(function(t){var r=Object.prototype.hasOwnProperty,n=typeof Symbol=="function",i=n&&typeof Symbol.toPrimitive<"u"?Symbol.toPrimitive:"@@toPrimitive",s=n&&typeof Symbol.iterator<"u"?Symbol.iterator:"@@iterator",a=typeof Object.create=="function",l={__proto__:[]}instanceof Array,y=!a&&!l,w={create:a?function(){return vt(Object.create(null))}:l?function(){return vt({__proto__:null})}:function(){return vt({})},has:y?function(P,M){return r.call(P,M)}:function(P,M){return M in P},get:y?function(P,M){return r.call(P,M)?P[M]:void 0}:function(P,M){return P[M]}},x=Object.getPrototypeOf(Function),T=typeof process=="object"&&process.env&&process.env.REFLECT_METADATA_USE_MAP_POLYFILL==="true",N=!T&&typeof Map=="function"&&typeof Map.prototype.entries=="function"?Map:Nt(),j=!T&&typeof Set=="function"&&typeof Set.prototype.entries=="function"?Set:Et(),U=!T&&typeof WeakMap=="function"?WeakMap:Re(),Y=new U;function rt(P,M,z,R){if(d(z)){if(!_(P))throw new TypeError;if(!F(M))throw new TypeError;return W(P,M)}else{if(!_(P))throw new TypeError;if(!I(M))throw new TypeError;if(!I(R)&&!d(R)&&!f(R))throw new TypeError;return f(R)&&(R=void 0),z=X(z),Z(P,M,z,R)}}t("decorate",rt);function ft(P,M){function z(R,J){if(!I(R))throw new TypeError;if(!d(J)&&!Mt(J))throw new TypeError;p(P,M,R,J)}return z}t("metadata",ft);function $(P,M,z,R){if(!I(z))throw new TypeError;return d(R)||(R=X(R)),p(P,M,z,R)}t("defineMetadata",$);function et(P,M,z){if(!I(M))throw new TypeError;return d(z)||(z=X(z)),m(P,M,z)}t("hasMetadata",et);function S(P,M,z){if(!I(M))throw new TypeError;return d(z)||(z=X(z)),o(P,M,z)}t("hasOwnMetadata",S);function A(P,M,z){if(!I(M))throw new TypeError;return d(z)||(z=X(z)),u(P,M,z)}t("getMetadata",A);function q(P,M,z){if(!I(M))throw new TypeError;return d(z)||(z=X(z)),h(P,M,z)}t("getOwnMetadata",q);function tt(P,M){if(!I(P))throw new TypeError;return d(M)||(M=X(M)),v(P,M)}t("getMetadataKeys",tt);function ut(P,M){if(!I(P))throw new TypeError;return d(M)||(M=X(M)),g(P,M)}t("getOwnMetadataKeys",ut);function bt(P,M,z){if(!I(M))throw new TypeError;d(z)||(z=X(z));var R=B(M,z,!1);if(d(R)||!R.delete(P))return!1;if(R.size>0)return!0;var J=Y.get(M);return J.delete(z),J.size>0||Y.delete(M),!0}t("deleteMetadata",bt);function W(P,M){for(var z=P.length-1;z>=0;--z){var R=P[z],J=R(M);if(!d(J)&&!f(J)){if(!F(J))throw new TypeError;M=J}}return M}function Z(P,M,z,R){for(var J=P.length-1;J>=0;--J){var ot=P[J],G=ot(M,z,R);if(!d(G)&&!f(G)){if(!I(G))throw new TypeError;R=G}}return R}function B(P,M,z){var R=Y.get(P);if(d(R)){if(!z)return;R=new N,Y.set(P,R)}var J=R.get(M);if(d(J)){if(!z)return;J=new N,R.set(M,J)}return J}function m(P,M,z){var R=o(P,M,z);if(R)return!0;var J=be(M);return f(J)?!1:m(P,J,z)}function o(P,M,z){var R=B(M,z,!1);return d(R)?!1:k(R.has(P))}function u(P,M,z){var R=o(P,M,z);if(R)return h(P,M,z);var J=be(M);if(!f(J))return u(P,J,z)}function h(P,M,z){var R=B(M,z,!1);if(!d(R))return R.get(P)}function p(P,M,z,R){var J=B(z,R,!0);J.set(P,M)}function v(P,M){var z=g(P,M),R=be(P);if(R===null)return z;var J=v(R,M);if(J.length<=0)return z;if(z.length<=0)return J;for(var ot=new j,G=[],it=0,H=z;it<H.length;it++){var K=H[it],ct=ot.has(K);ct||(ot.add(K),G.push(K))}for(var mt=0,gt=J;mt<gt.length;mt++){var K=gt[mt],ct=ot.has(K);ct||(ot.add(K),G.push(K))}return G}function g(P,M){var z=[],R=B(P,M,!1);if(d(R))return z;for(var J=R.keys(),ot=st(J),G=0;;){var it=Pt(ot);if(!it)return z.length=G,z;var H=je(it);try{z[G]=H}catch(K){try{Ot(ot)}finally{throw K}}G++}}function O(P){if(P===null)return 1;switch(typeof P){case"undefined":return 0;case"boolean":return 2;case"string":return 3;case"symbol":return 4;case"number":return 5;case"object":return P===null?1:6;default:return 6}}function d(P){return P===void 0}function f(P){return P===null}function b(P){return typeof P=="symbol"}function I(P){return typeof P=="object"?P!==null:typeof P=="function"}function c(P,M){switch(O(P)){case 0:return P;case 1:return P;case 2:return P;case 3:return P;case 4:return P;case 5:return P}var z=M===3?"string":M===5?"number":"default",R=V(P,i);if(R!==void 0){var J=R.call(P,z);if(I(J))throw new TypeError;return J}return E(P,z==="default"?"number":z)}function E(P,M){if(M==="string"){var z=P.toString;if(D(z)){var R=z.call(P);if(!I(R))return R}var J=P.valueOf;if(D(J)){var R=J.call(P);if(!I(R))return R}}else{var J=P.valueOf;if(D(J)){var R=J.call(P);if(!I(R))return R}var ot=P.toString;if(D(ot)){var R=ot.call(P);if(!I(R))return R}}throw new TypeError}function k(P){return!!P}function L(P){return""+P}function X(P){var M=c(P,3);return b(M)?M:L(M)}function _(P){return Array.isArray?Array.isArray(P):P instanceof Object?P instanceof Array:Object.prototype.toString.call(P)==="[object Array]"}function D(P){return typeof P=="function"}function F(P){return typeof P=="function"}function Mt(P){switch(O(P)){case 3:return!0;case 4:return!0;default:return!1}}function V(P,M){var z=P[M];if(z!=null){if(!D(z))throw new TypeError;return z}}function st(P){var M=V(P,s);if(!D(M))throw new TypeError;var z=M.call(P);if(!I(z))throw new TypeError;return z}function je(P){return P.value}function Pt(P){var M=P.next();return M.done?!1:M}function Ot(P){var M=P.return;M&&M.call(P)}function be(P){var M=Object.getPrototypeOf(P);if(typeof P!="function"||P===x||M!==x)return M;var z=P.prototype,R=z&&Object.getPrototypeOf(z);if(R==null||R===Object.prototype)return M;var J=R.constructor;return typeof J!="function"||J===P?M:J}function Nt(){var P={},M=[],z=function(){function G(it,H,K){this._index=0,this._keys=it,this._values=H,this._selector=K}return G.prototype["@@iterator"]=function(){return this},G.prototype[s]=function(){return this},G.prototype.next=function(){var it=this._index;if(it>=0&&it<this._keys.length){var H=this._selector(this._keys[it],this._values[it]);return it+1>=this._keys.length?(this._index=-1,this._keys=M,this._values=M):this._index++,{value:H,done:!1}}return{value:void 0,done:!0}},G.prototype.throw=function(it){throw this._index>=0&&(this._index=-1,this._keys=M,this._values=M),it},G.prototype.return=function(it){return this._index>=0&&(this._index=-1,this._keys=M,this._values=M),{value:it,done:!0}},G}();return function(){function G(){this._keys=[],this._values=[],this._cacheKey=P,this._cacheIndex=-2}return Object.defineProperty(G.prototype,"size",{get:function(){return this._keys.length},enumerable:!0,configurable:!0}),G.prototype.has=function(it){return this._find(it,!1)>=0},G.prototype.get=function(it){var H=this._find(it,!1);return H>=0?this._values[H]:void 0},G.prototype.set=function(it,H){var K=this._find(it,!0);return this._values[K]=H,this},G.prototype.delete=function(it){var H=this._find(it,!1);if(H>=0){for(var K=this._keys.length,ct=H+1;ct<K;ct++)this._keys[ct-1]=this._keys[ct],this._values[ct-1]=this._values[ct];return this._keys.length--,this._values.length--,it===this._cacheKey&&(this._cacheKey=P,this._cacheIndex=-2),!0}return!1},G.prototype.clear=function(){this._keys.length=0,this._values.length=0,this._cacheKey=P,this._cacheIndex=-2},G.prototype.keys=function(){return new z(this._keys,this._values,R)},G.prototype.values=function(){return new z(this._keys,this._values,J)},G.prototype.entries=function(){return new z(this._keys,this._values,ot)},G.prototype["@@iterator"]=function(){return this.entries()},G.prototype[s]=function(){return this.entries()},G.prototype._find=function(it,H){return this._cacheKey!==it&&(this._cacheIndex=this._keys.indexOf(this._cacheKey=it)),this._cacheIndex<0&&H&&(this._cacheIndex=this._keys.length,this._keys.push(it),this._values.push(void 0)),this._cacheIndex},G}();function R(G,it){return G}function J(G,it){return it}function ot(G,it){return[G,it]}}function Et(){return function(){function P(){this._map=new N}return Object.defineProperty(P.prototype,"size",{get:function(){return this._map.size},enumerable:!0,configurable:!0}),P.prototype.has=function(M){return this._map.has(M)},P.prototype.add=function(M){return this._map.set(M,M),this},P.prototype.delete=function(M){return this._map.delete(M)},P.prototype.clear=function(){this._map.clear()},P.prototype.keys=function(){return this._map.keys()},P.prototype.values=function(){return this._map.values()},P.prototype.entries=function(){return this._map.entries()},P.prototype["@@iterator"]=function(){return this.keys()},P.prototype[s]=function(){return this.keys()},P}()}function Re(){var P=16,M=w.create(),z=R();return function(){function H(){this._key=R()}return H.prototype.has=function(K){var ct=J(K,!1);return ct!==void 0?w.has(ct,this._key):!1},H.prototype.get=function(K){var ct=J(K,!1);return ct!==void 0?w.get(ct,this._key):void 0},H.prototype.set=function(K,ct){var mt=J(K,!0);return mt[this._key]=ct,this},H.prototype.delete=function(K){var ct=J(K,!1);return ct!==void 0?delete ct[this._key]:!1},H.prototype.clear=function(){this._key=R()},H}();function R(){var H;do H="@@WeakMap@@"+it();while(w.has(M,H));return M[H]=!0,H}function J(H,K){if(!r.call(H,z)){if(!K)return;Object.defineProperty(H,z,{value:w.create()})}return H[z]}function ot(H,K){for(var ct=0;ct<K;++ct)H[ct]=Math.random()*255|0;return H}function G(H){return typeof Uint8Array=="function"?typeof crypto<"u"?crypto.getRandomValues(new Uint8Array(H)):typeof msCrypto<"u"?msCrypto.getRandomValues(new Uint8Array(H)):ot(new Uint8Array(H),H):ot(new Array(H),H)}function it(){var H=G(P);H[6]=H[6]&79|64,H[8]=H[8]&191|128;for(var K="",ct=0;ct<P;++ct){var mt=H[ct];(ct===4||ct===6||ct===8)&&(K+="-"),mt<16&&(K+="0"),K+=mt.toString(16).toLowerCase()}return K}}function vt(P){return P.__=void 0,delete P.__,P}})})(Yo||(Yo={}));function ud(e){return e("return this")}const Le=typeof globalThis<"u"?globalThis:typeof global<"u"?global:typeof self<"u"?self:typeof window<"u"?window:ud(Function);function lf(e,t){return typeof Le[e]>"u"?t:Le[e]}let cd=class{constructor(t){}decode(t){let r="";for(let n=0;n<t.length;n++)r+=String.fromCharCode(t[n]);return r}};const ld=lf("TextDecoder",cd);let hd=class{encode(t){const r=new Uint8Array(t.length);for(let n=0;n<t.length;n++)r[n]=t.charCodeAt(n);return r}};const dd=lf("TextEncoder",hd);function pd(e){return typeof e=="function"}const Jo=typeof Le.BigInt=="function"&&typeof Le.BigInt.asIntN=="function"?Le.BigInt:()=>Number.NaN,Gi="0123456789abcdef",Vn=new Uint8Array(256),hf=new Uint8Array(256*256);for(let e=0;e<Gi.length;e++)Vn[Gi[e].charCodeAt(0)|0]=e|0,e>9&&(Vn[Gi[e].toUpperCase().charCodeAt(0)|0]=e|0);for(let e=0;e<256;e++){const t=e<<8;for(let r=0;r<256;r++)hf[t|r]=Vn[e]<<4|Vn[r]}function md(e,t=-1){if(!e)return new Uint8Array;let r=e.startsWith("0x")?2:0;const n=Math.ceil((e.length-r)/2),i=Math.ceil(t===-1?n:t/8),s=new Uint8Array(i),a=i>n?i-n:0;for(let l=a;l<i;l++,r+=2)s[l]=hf[e.charCodeAt(r)<<8|e.charCodeAt(r+1)];return s}const yd=/^0x[\da-fA-F]+$/;function df(e,t=-1,r){return typeof e=="string"&&(e==="0x"||yd.test(e))&&(t===-1?r||e.length%2===0:e.length===2+Math.ceil(t/4))}const bd=typeof Jo=="function"&&typeof Jo.asIntN=="function",vd=typeof Le.Buffer=="function"&&typeof Le.Buffer.isBuffer=="function";Le.process;function wd(e){return vd&&pd(e&&e.readDoubleLE)&&Le.Buffer.isBuffer(e)}function pf(e){return(e&&e.constructor)===Uint8Array||e instanceof Uint8Array}const gd=new dd;function Ss(e){return e?gd.encode(e.toString()):new Uint8Array}function an(e){return pf(e)?e:df(e)?md(e):wd(e)||Array.isArray(e)?new Uint8Array(e):Ss(e)}function hs(...e){const t=new Array(e.length);let r=0;for(let n=0;n<e.length;n++)t[n]=an(e[n]),r+=t[n].length;return xd(t,r)}function xd(e,t=0){let r=0;if(!t)for(let i=0;i<e.length;i++)t+=e[i].length;const n=new Uint8Array(t);for(let i=0;i<e.length;i++)n.set(e[i],r),r+=e[i].length;return n}const Pd=new ld("utf-8");function Ko(e){return e?Pd.decode(e):""}function Od(e){if(e.length>=255)throw new TypeError("Alphabet too long");for(var t=new Uint8Array(256),r=0;r<t.length;r++)t[r]=255;for(var n=0;n<e.length;n++){var i=e.charAt(n),s=i.charCodeAt(0);if(t[s]!==255)throw new TypeError(i+" is ambiguous");t[s]=n}var a=e.length,l=e.charAt(0),y=Math.log(a)/Math.log(256),w=Math.log(256)/Math.log(a);function x(j){if(j instanceof Uint8Array||(ArrayBuffer.isView(j)?j=new Uint8Array(j.buffer,j.byteOffset,j.byteLength):Array.isArray(j)&&(j=Uint8Array.from(j))),!(j instanceof Uint8Array))throw new TypeError("Expected Uint8Array");if(j.length===0)return"";for(var U=0,Y=0,rt=0,ft=j.length;rt!==ft&&j[rt]===0;)rt++,U++;for(var $=(ft-rt)*w+1>>>0,et=new Uint8Array($);rt!==ft;){for(var S=j[rt],A=0,q=$-1;(S!==0||A<Y)&&q!==-1;q--,A++)S+=256*et[q]>>>0,et[q]=S%a>>>0,S=S/a>>>0;if(S!==0)throw new Error("Non-zero carry");Y=A,rt++}for(var tt=$-Y;tt!==$&&et[tt]===0;)tt++;for(var ut=l.repeat(U);tt<$;++tt)ut+=e.charAt(et[tt]);return ut}function T(j){if(typeof j!="string")throw new TypeError("Expected String");if(j.length===0)return new Uint8Array;for(var U=0,Y=0,rt=0;j[U]===l;)Y++,U++;for(var ft=(j.length-U)*y+1>>>0,$=new Uint8Array(ft);j[U];){var et=t[j.charCodeAt(U)];if(et===255)return;for(var S=0,A=ft-1;(et!==0||S<rt)&&A!==-1;A--,S++)et+=a*$[A]>>>0,$[A]=et%256>>>0,et=et/256>>>0;if(et!==0)throw new Error("Non-zero carry");rt=S,U++}for(var q=ft-rt;q!==ft&&$[q]===0;)q++;for(var tt=new Uint8Array(Y+(ft-q)),ut=Y;q!==ft;)tt[ut++]=$[q++];return tt}function N(j){var U=T(j);if(U)return U;throw new Error("Non-base"+a+" character")}return{encode:x,decodeUnsafe:T,decode:N}}var Nd=Od,Tt={},ne={};Object.defineProperty(ne,"__esModule",{value:!0});ne.output=ne.exists=ne.hash=ne.bytes=ne.bool=ne.number=void 0;function qn(e){if(!Number.isSafeInteger(e)||e<0)throw new Error(`Wrong positive integer: ${e}`)}ne.number=qn;function mf(e){if(typeof e!="boolean")throw new Error(`Expected boolean, not ${e}`)}ne.bool=mf;function Xs(e,...t){if(!(e instanceof Uint8Array))throw new TypeError("Expected Uint8Array");if(t.length>0&&!t.includes(e.length))throw new TypeError(`Expected Uint8Array of length ${t}, not of length=${e.length}`)}ne.bytes=Xs;function yf(e){if(typeof e!="function"||typeof e.create!="function")throw new Error("Hash should be wrapped by utils.wrapConstructor");qn(e.outputLen),qn(e.blockLen)}ne.hash=yf;function bf(e,t=!0){if(e.destroyed)throw new Error("Hash instance has been destroyed");if(t&&e.finished)throw new Error("Hash#digest() has already been called")}ne.exists=bf;function vf(e,t){Xs(e);const r=t.outputLen;if(e.length<r)throw new Error(`digestInto() expects output buffer of length at least ${r}`)}ne.output=vf;const Ed={number:qn,bool:mf,bytes:Xs,hash:yf,exists:bf,output:vf};ne.default=Ed;var Us={};(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.add=e.toBig=e.split=e.fromBig=void 0;const t=BigInt(2**32-1),r=BigInt(32);function n(W,Z=!1){return Z?{h:Number(W&t),l:Number(W>>r&t)}:{h:Number(W>>r&t)|0,l:Number(W&t)|0}}e.fromBig=n;function i(W,Z=!1){let B=new Uint32Array(W.length),m=new Uint32Array(W.length);for(let o=0;o<W.length;o++){const{h:u,l:h}=n(W[o],Z);[B[o],m[o]]=[u,h]}return[B,m]}e.split=i;const s=(W,Z)=>BigInt(W>>>0)<<r|BigInt(Z>>>0);e.toBig=s;const a=(W,Z,B)=>W>>>B,l=(W,Z,B)=>W<<32-B|Z>>>B,y=(W,Z,B)=>W>>>B|Z<<32-B,w=(W,Z,B)=>W<<32-B|Z>>>B,x=(W,Z,B)=>W<<64-B|Z>>>B-32,T=(W,Z,B)=>W>>>B-32|Z<<64-B,N=(W,Z)=>Z,j=(W,Z)=>W,U=(W,Z,B)=>W<<B|Z>>>32-B,Y=(W,Z,B)=>Z<<B|W>>>32-B,rt=(W,Z,B)=>Z<<B-32|W>>>64-B,ft=(W,Z,B)=>W<<B-32|Z>>>64-B;function $(W,Z,B,m){const o=(Z>>>0)+(m>>>0);return{h:W+B+(o/2**32|0)|0,l:o|0}}e.add=$;const et=(W,Z,B)=>(W>>>0)+(Z>>>0)+(B>>>0),S=(W,Z,B,m)=>Z+B+m+(W/2**32|0)|0,A=(W,Z,B,m)=>(W>>>0)+(Z>>>0)+(B>>>0)+(m>>>0),q=(W,Z,B,m,o)=>Z+B+m+o+(W/2**32|0)|0,tt=(W,Z,B,m,o)=>(W>>>0)+(Z>>>0)+(B>>>0)+(m>>>0)+(o>>>0),ut=(W,Z,B,m,o,u)=>Z+B+m+o+u+(W/2**32|0)|0,bt={fromBig:n,split:i,toBig:e.toBig,shrSH:a,shrSL:l,rotrSH:y,rotrSL:w,rotrBH:x,rotrBL:T,rotr32H:N,rotr32L:j,rotlSH:U,rotlSL:Y,rotlBH:rt,rotlBL:ft,add:$,add3L:et,add3H:S,add4L:A,add4H:q,add5H:ut,add5L:tt};e.default=bt})(Us);var ii={},si={};Object.defineProperty(si,"__esModule",{value:!0});si.crypto=void 0;si.crypto={node:void 0,web:typeof self=="object"&&"crypto"in self?self.crypto:void 0};(function(e){/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */Object.defineProperty(e,"__esModule",{value:!0}),e.randomBytes=e.wrapConstructorWithOpts=e.wrapConstructor=e.checkOpts=e.Hash=e.concatBytes=e.toBytes=e.utf8ToBytes=e.asyncLoop=e.nextTick=e.hexToBytes=e.bytesToHex=e.isLE=e.rotr=e.createView=e.u32=e.u8=void 0;const t=si,r=S=>new Uint8Array(S.buffer,S.byteOffset,S.byteLength);e.u8=r;const n=S=>new Uint32Array(S.buffer,S.byteOffset,Math.floor(S.byteLength/4));e.u32=n;const i=S=>new DataView(S.buffer,S.byteOffset,S.byteLength);e.createView=i;const s=(S,A)=>S<<32-A|S>>>A;if(e.rotr=s,e.isLE=new Uint8Array(new Uint32Array([287454020]).buffer)[0]===68,!e.isLE)throw new Error("Non little-endian hardware is not supported");const a=Array.from({length:256},(S,A)=>A.toString(16).padStart(2,"0"));function l(S){if(!(S instanceof Uint8Array))throw new Error("Uint8Array expected");let A="";for(let q=0;q<S.length;q++)A+=a[S[q]];return A}e.bytesToHex=l;function y(S){if(typeof S!="string")throw new TypeError("hexToBytes: expected string, got "+typeof S);if(S.length%2)throw new Error("hexToBytes: received invalid unpadded hex");const A=new Uint8Array(S.length/2);for(let q=0;q<A.length;q++){const tt=q*2,ut=S.slice(tt,tt+2),bt=Number.parseInt(ut,16);if(Number.isNaN(bt)||bt<0)throw new Error("Invalid byte sequence");A[q]=bt}return A}e.hexToBytes=y;const w=async()=>{};e.nextTick=w;async function x(S,A,q){let tt=Date.now();for(let ut=0;ut<S;ut++){q(ut);const bt=Date.now()-tt;bt>=0&&bt<A||(await(0,e.nextTick)(),tt+=bt)}}e.asyncLoop=x;function T(S){if(typeof S!="string")throw new TypeError(`utf8ToBytes expected string, got ${typeof S}`);return new TextEncoder().encode(S)}e.utf8ToBytes=T;function N(S){if(typeof S=="string"&&(S=T(S)),!(S instanceof Uint8Array))throw new TypeError(`Expected input type is Uint8Array (got ${typeof S})`);return S}e.toBytes=N;function j(...S){if(!S.every(tt=>tt instanceof Uint8Array))throw new Error("Uint8Array list expected");if(S.length===1)return S[0];const A=S.reduce((tt,ut)=>tt+ut.length,0),q=new Uint8Array(A);for(let tt=0,ut=0;tt<S.length;tt++){const bt=S[tt];q.set(bt,ut),ut+=bt.length}return q}e.concatBytes=j;class U{clone(){return this._cloneInto()}}e.Hash=U;const Y=S=>Object.prototype.toString.call(S)==="[object Object]"&&S.constructor===Object;function rt(S,A){if(A!==void 0&&(typeof A!="object"||!Y(A)))throw new TypeError("Options should be object or undefined");return Object.assign(S,A)}e.checkOpts=rt;function ft(S){const A=tt=>S().update(N(tt)).digest(),q=S();return A.outputLen=q.outputLen,A.blockLen=q.blockLen,A.create=()=>S(),A}e.wrapConstructor=ft;function $(S){const A=(tt,ut)=>S(ut).update(N(tt)).digest(),q=S({});return A.outputLen=q.outputLen,A.blockLen=q.blockLen,A.create=tt=>S(tt),A}e.wrapConstructorWithOpts=$;function et(S=32){if(t.crypto.web)return t.crypto.web.getRandomValues(new Uint8Array(S));if(t.crypto.node)return new Uint8Array(t.crypto.node.randomBytes(S).buffer);throw new Error("The environment doesn't have randomBytes function")}e.randomBytes=et})(ii);Object.defineProperty(Tt,"__esModule",{value:!0});Tt.shake256=Tt.shake128=Tt.keccak_512=Tt.keccak_384=Tt.keccak_256=Tt.keccak_224=Tt.sha3_512=Tt.sha3_384=Tt.sha3_256=Tt.sha3_224=Tt.Keccak=Tt.keccakP=void 0;const Tr=ne,fn=Us,Qr=ii,[wf,gf,xf]=[[],[],[]],Td=BigInt(0),qr=BigInt(1),Md=BigInt(2),zd=BigInt(7),kd=BigInt(256),Ld=BigInt(113);for(let e=0,t=qr,r=1,n=0;e<24;e++){[r,n]=[n,(2*r+3*n)%5],wf.push(2*(5*n+r)),gf.push((e+1)*(e+2)/2%64);let i=Td;for(let s=0;s<7;s++)t=(t<<qr^(t>>zd)*Ld)%kd,t&Md&&(i^=qr<<(qr<<BigInt(s))-qr);xf.push(i)}const[Ad,jd]=fn.default.split(xf,!0),Qo=(e,t,r)=>r>32?fn.default.rotlBH(e,t,r):fn.default.rotlSH(e,t,r),_o=(e,t,r)=>r>32?fn.default.rotlBL(e,t,r):fn.default.rotlSL(e,t,r);function Pf(e,t=24){const r=new Uint32Array(10);for(let n=24-t;n<24;n++){for(let a=0;a<10;a++)r[a]=e[a]^e[a+10]^e[a+20]^e[a+30]^e[a+40];for(let a=0;a<10;a+=2){const l=(a+8)%10,y=(a+2)%10,w=r[y],x=r[y+1],T=Qo(w,x,1)^r[l],N=_o(w,x,1)^r[l+1];for(let j=0;j<50;j+=10)e[a+j]^=T,e[a+j+1]^=N}let i=e[2],s=e[3];for(let a=0;a<24;a++){const l=gf[a],y=Qo(i,s,l),w=_o(i,s,l),x=wf[a];i=e[x],s=e[x+1],e[x]=y,e[x+1]=w}for(let a=0;a<50;a+=10){for(let l=0;l<10;l++)r[l]=e[a+l];for(let l=0;l<10;l++)e[a+l]^=~r[(l+2)%10]&r[(l+4)%10]}e[0]^=Ad[n],e[1]^=jd[n]}r.fill(0)}Tt.keccakP=Pf;class dn extends Qr.Hash{constructor(t,r,n,i=!1,s=24){if(super(),this.blockLen=t,this.suffix=r,this.outputLen=n,this.enableXOF=i,this.rounds=s,this.pos=0,this.posOut=0,this.finished=!1,this.destroyed=!1,Tr.default.number(n),0>=this.blockLen||this.blockLen>=200)throw new Error("Sha3 supports only keccak-f1600 function");this.state=new Uint8Array(200),this.state32=(0,Qr.u32)(this.state)}keccak(){Pf(this.state32,this.rounds),this.posOut=0,this.pos=0}update(t){Tr.default.exists(this);const{blockLen:r,state:n}=this;t=(0,Qr.toBytes)(t);const i=t.length;for(let s=0;s<i;){const a=Math.min(r-this.pos,i-s);for(let l=0;l<a;l++)n[this.pos++]^=t[s++];this.pos===r&&this.keccak()}return this}finish(){if(this.finished)return;this.finished=!0;const{state:t,suffix:r,pos:n,blockLen:i}=this;t[n]^=r,r&128&&n===i-1&&this.keccak(),t[i-1]^=128,this.keccak()}writeInto(t){Tr.default.exists(this,!1),Tr.default.bytes(t),this.finish();const r=this.state,{blockLen:n}=this;for(let i=0,s=t.length;i<s;){this.posOut>=n&&this.keccak();const a=Math.min(n-this.posOut,s-i);t.set(r.subarray(this.posOut,this.posOut+a),i),this.posOut+=a,i+=a}return t}xofInto(t){if(!this.enableXOF)throw new Error("XOF is not possible for this instance");return this.writeInto(t)}xof(t){return Tr.default.number(t),this.xofInto(new Uint8Array(t))}digestInto(t){if(Tr.default.output(t,this),this.finished)throw new Error("digest() was already called");return this.writeInto(t),this.destroy(),t}digest(){return this.digestInto(new Uint8Array(this.outputLen))}destroy(){this.destroyed=!0,this.state.fill(0)}_cloneInto(t){const{blockLen:r,suffix:n,outputLen:i,rounds:s,enableXOF:a}=this;return t||(t=new dn(r,n,i,a,s)),t.state32.set(this.state32),t.pos=this.pos,t.posOut=this.posOut,t.finished=this.finished,t.rounds=s,t.suffix=n,t.outputLen=i,t.enableXOF=a,t.destroyed=this.destroyed,t}}Tt.Keccak=dn;const nr=(e,t,r)=>(0,Qr.wrapConstructor)(()=>new dn(t,e,r));Tt.sha3_224=nr(6,144,224/8);Tt.sha3_256=nr(6,136,256/8);Tt.sha3_384=nr(6,104,384/8);Tt.sha3_512=nr(6,72,512/8);Tt.keccak_224=nr(1,144,224/8);Tt.keccak_256=nr(1,136,256/8);Tt.keccak_384=nr(1,104,384/8);Tt.keccak_512=nr(1,72,512/8);const Of=(e,t,r)=>(0,Qr.wrapConstructorWithOpts)((n={})=>new dn(t,e,n.dkLen===void 0?r:n.dkLen,!0));Tt.shake128=Of(31,168,128/8);Tt.shake256=Of(31,136,256/8);var oi={},Fr={};Object.defineProperty(Fr,"__esModule",{value:!0});Fr.BLAKE2=Fr.SIGMA=void 0;const Mr=ne,Tn=ii;Fr.SIGMA=new Uint8Array([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,14,10,4,8,9,15,13,6,1,12,0,2,11,7,5,3,11,8,12,0,5,2,15,13,10,14,3,6,7,1,9,4,7,9,3,1,13,12,11,14,2,6,5,10,4,0,15,8,9,0,5,7,2,4,10,15,14,1,11,12,6,8,3,13,2,12,6,10,0,11,8,3,4,13,7,5,15,14,1,9,12,5,1,15,14,13,4,10,0,7,6,3,9,2,8,11,13,11,7,14,12,1,3,9,5,0,15,4,8,6,2,10,6,15,14,9,11,3,0,8,12,2,13,7,1,4,10,5,10,2,8,4,7,6,1,5,15,11,9,14,3,12,13,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,14,10,4,8,9,15,13,6,1,12,0,2,11,7,5,3]);class Rd extends Tn.Hash{constructor(t,r,n={},i,s,a){if(super(),this.blockLen=t,this.outputLen=r,this.length=0,this.pos=0,this.finished=!1,this.destroyed=!1,Mr.default.number(t),Mr.default.number(r),Mr.default.number(i),r<0||r>i)throw new Error("Blake2: outputLen bigger than keyLen");if(n.key!==void 0&&(n.key.length<1||n.key.length>i))throw new Error(`Key should be up 1..${i} byte long or undefined`);if(n.salt!==void 0&&n.salt.length!==s)throw new Error(`Salt should be ${s} byte long or undefined`);if(n.personalization!==void 0&&n.personalization.length!==a)throw new Error(`Personalization should be ${a} byte long or undefined`);this.buffer32=(0,Tn.u32)(this.buffer=new Uint8Array(t))}update(t){Mr.default.exists(this);const{blockLen:r,buffer:n,buffer32:i}=this;t=(0,Tn.toBytes)(t);const s=t.length;for(let a=0;a<s;){this.pos===r&&(this.compress(i,0,!1),this.pos=0);const l=Math.min(r-this.pos,s-a),y=t.byteOffset+a;if(l===r&&!(y%4)&&a+l<s){const w=new Uint32Array(t.buffer,y,Math.floor((s-a)/4));for(let x=0;a+r<s;x+=i.length,a+=r)this.length+=r,this.compress(w,x,!1);continue}n.set(t.subarray(a,a+l),this.pos),this.pos+=l,this.length+=l,a+=l}return this}digestInto(t){Mr.default.exists(this),Mr.default.output(t,this);const{pos:r,buffer32:n}=this;this.finished=!0,this.buffer.subarray(r).fill(0),this.compress(n,0,!0);const i=(0,Tn.u32)(t);this.get().forEach((s,a)=>i[a]=s)}digest(){const{buffer:t,outputLen:r}=this;this.digestInto(t);const n=t.slice(0,r);return this.destroy(),n}_cloneInto(t){const{buffer:r,length:n,finished:i,destroyed:s,outputLen:a,pos:l}=this;return t||(t=new this.constructor({dkLen:a})),t.set(...this.get()),t.length=n,t.finished=i,t.destroyed=s,t.outputLen=a,t.buffer.set(r),t.pos=l,t}}Fr.BLAKE2=Rd;Object.defineProperty(oi,"__esModule",{value:!0});var Nf=oi.blake2b=void 0;const $o=Fr,ie=Us,kr=ii,_t=new Uint32Array([4089235720,1779033703,2227873595,3144134277,4271175723,1013904242,1595750129,2773480762,2917565137,1359893119,725511199,2600822924,4215389547,528734635,327033209,1541459225]),C=new Uint32Array(32);function Je(e,t,r,n,i,s){const a=i[s],l=i[s+1];let y=C[2*e],w=C[2*e+1],x=C[2*t],T=C[2*t+1],N=C[2*r],j=C[2*r+1],U=C[2*n],Y=C[2*n+1],rt=ie.default.add3L(y,x,a);w=ie.default.add3H(rt,w,T,l),y=rt|0,{Dh:Y,Dl:U}={Dh:Y^w,Dl:U^y},{Dh:Y,Dl:U}={Dh:ie.default.rotr32H(Y,U),Dl:ie.default.rotr32L(Y,U)},{h:j,l:N}=ie.default.add(j,N,Y,U),{Bh:T,Bl:x}={Bh:T^j,Bl:x^N},{Bh:T,Bl:x}={Bh:ie.default.rotrSH(T,x,24),Bl:ie.default.rotrSL(T,x,24)},C[2*e]=y,C[2*e+1]=w,C[2*t]=x,C[2*t+1]=T,C[2*r]=N,C[2*r+1]=j,C[2*n]=U,C[2*n+1]=Y}function Ke(e,t,r,n,i,s){const a=i[s],l=i[s+1];let y=C[2*e],w=C[2*e+1],x=C[2*t],T=C[2*t+1],N=C[2*r],j=C[2*r+1],U=C[2*n],Y=C[2*n+1],rt=ie.default.add3L(y,x,a);w=ie.default.add3H(rt,w,T,l),y=rt|0,{Dh:Y,Dl:U}={Dh:Y^w,Dl:U^y},{Dh:Y,Dl:U}={Dh:ie.default.rotrSH(Y,U,16),Dl:ie.default.rotrSL(Y,U,16)},{h:j,l:N}=ie.default.add(j,N,Y,U),{Bh:T,Bl:x}={Bh:T^j,Bl:x^N},{Bh:T,Bl:x}={Bh:ie.default.rotrBH(T,x,63),Bl:ie.default.rotrBL(T,x,63)},C[2*e]=y,C[2*e+1]=w,C[2*t]=x,C[2*t+1]=T,C[2*r]=N,C[2*r+1]=j,C[2*n]=U,C[2*n+1]=Y}class Sd extends $o.BLAKE2{constructor(t={}){super(128,t.dkLen===void 0?64:t.dkLen,t,64,16,16),this.v0l=_t[0]|0,this.v0h=_t[1]|0,this.v1l=_t[2]|0,this.v1h=_t[3]|0,this.v2l=_t[4]|0,this.v2h=_t[5]|0,this.v3l=_t[6]|0,this.v3h=_t[7]|0,this.v4l=_t[8]|0,this.v4h=_t[9]|0,this.v5l=_t[10]|0,this.v5h=_t[11]|0,this.v6l=_t[12]|0,this.v6h=_t[13]|0,this.v7l=_t[14]|0,this.v7h=_t[15]|0;const r=t.key?t.key.length:0;if(this.v0l^=this.outputLen|r<<8|1<<16|1<<24,t.salt){const n=(0,kr.u32)((0,kr.toBytes)(t.salt));this.v4l^=n[0],this.v4h^=n[1],this.v5l^=n[2],this.v5h^=n[3]}if(t.personalization){const n=(0,kr.u32)((0,kr.toBytes)(t.personalization));this.v6l^=n[0],this.v6h^=n[1],this.v7l^=n[2],this.v7h^=n[3]}if(t.key){const n=new Uint8Array(this.blockLen);n.set((0,kr.toBytes)(t.key)),this.update(n)}}get(){let{v0l:t,v0h:r,v1l:n,v1h:i,v2l:s,v2h:a,v3l:l,v3h:y,v4l:w,v4h:x,v5l:T,v5h:N,v6l:j,v6h:U,v7l:Y,v7h:rt}=this;return[t,r,n,i,s,a,l,y,w,x,T,N,j,U,Y,rt]}set(t,r,n,i,s,a,l,y,w,x,T,N,j,U,Y,rt){this.v0l=t|0,this.v0h=r|0,this.v1l=n|0,this.v1h=i|0,this.v2l=s|0,this.v2h=a|0,this.v3l=l|0,this.v3h=y|0,this.v4l=w|0,this.v4h=x|0,this.v5l=T|0,this.v5h=N|0,this.v6l=j|0,this.v6h=U|0,this.v7l=Y|0,this.v7h=rt|0}compress(t,r,n){this.get().forEach((y,w)=>C[w]=y),C.set(_t,16);let{h:i,l:s}=ie.default.fromBig(BigInt(this.length));C[24]=_t[8]^s,C[25]=_t[9]^i,n&&(C[28]=~C[28],C[29]=~C[29]);let a=0;const l=$o.SIGMA;for(let y=0;y<12;y++)Je(0,4,8,12,t,r+2*l[a++]),Ke(0,4,8,12,t,r+2*l[a++]),Je(1,5,9,13,t,r+2*l[a++]),Ke(1,5,9,13,t,r+2*l[a++]),Je(2,6,10,14,t,r+2*l[a++]),Ke(2,6,10,14,t,r+2*l[a++]),Je(3,7,11,15,t,r+2*l[a++]),Ke(3,7,11,15,t,r+2*l[a++]),Je(0,5,10,15,t,r+2*l[a++]),Ke(0,5,10,15,t,r+2*l[a++]),Je(1,6,11,12,t,r+2*l[a++]),Ke(1,6,11,12,t,r+2*l[a++]),Je(2,7,8,13,t,r+2*l[a++]),Ke(2,7,8,13,t,r+2*l[a++]),Je(3,4,9,14,t,r+2*l[a++]),Ke(3,4,9,14,t,r+2*l[a++]);this.v0l^=C[0]^C[16],this.v0h^=C[1]^C[17],this.v1l^=C[2]^C[18],this.v1h^=C[3]^C[19],this.v2l^=C[4]^C[20],this.v2h^=C[5]^C[21],this.v3l^=C[6]^C[22],this.v3h^=C[7]^C[23],this.v4l^=C[8]^C[24],this.v4h^=C[9]^C[25],this.v5l^=C[10]^C[26],this.v5h^=C[11]^C[27],this.v6l^=C[12]^C[28],this.v6h^=C[13]^C[29],this.v7l^=C[14]^C[30],this.v7h^=C[15]^C[31],C.fill(0)}destroy(){this.destroyed=!0,this.buffer32.fill(0),this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)}}Nf=oi.blake2b=(0,kr.wrapConstructorWithOpts)(e=>new Sd(e));var Bs=Object.defineProperty,Xd=Object.getOwnPropertyDescriptor,Ud=Object.getOwnPropertyNames,Bd=Object.prototype.hasOwnProperty,Hd=(e,t)=>{for(var r in t)Bs(e,r,{get:t[r],enumerable:!0})},Fd=(e,t,r,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of Ud(t))!Bd.call(e,i)&&i!==r&&Bs(e,i,{get:()=>t[i],enumerable:!(n=Xd(t,i))||n.enumerable});return e},Zd=e=>Fd(Bs({},"__esModule",{value:!0}),e),Ef={};Hd(Ef,{HexString:()=>Zr,Utf16:()=>_r,Utf8:()=>mr,UtfHelpers:()=>Cd});var Dd=Zd(Ef),Zr={fromArray:e=>{if(!(e instanceof Uint8Array)&&!Array.isArray(e))throw new Error(`HexString.fromArray: passed bytes obj is not an Array or Uint8Array: ${typeof e}, ${e}`);return"0x"+(e instanceof Uint8Array?Array.from(e):e).reduce((r,n)=>r+n.toString(16).padStart(2,"0"),"")},fromU8a:e=>Zr.fromArray(e),toArray(e){if(typeof e!="string")throw new Error(`HexString.toArray: passed string is not a string: ${typeof e}`);return((e.startsWith("0x")?e.slice(2):e).match(/.{1,2}/g)||[]).map(n=>parseInt(n,16))},toU8a:e=>Uint8Array.from(Zr.toArray(e))},mr={stringToU8a(e){const t=new Uint8Array(mr.lengthInBytes(e));let r=0,n=0,i=0,s=0;for(;s<e.length;)n=e.charCodeAt(s),n<128?t[r++]=n:n<2048?(t[r++]=n>>6|192,t[r++]=n&63|128):(n&64512)===55296&&((i=e.charCodeAt(s+1))&64512)===56320?(n=65536+((n&1023)<<10)+(i&1023),++s,t[r++]=n>>18|240,t[r++]=n>>12&63|128,t[r++]=n>>6&63|128,t[r++]=n&63|128):(t[r++]=n>>12|224,t[r++]=n>>6&63|128,t[r++]=n&63|128),s+=1;return t},stringToNumberArray(e){return Array.from(mr.stringToU8a(e))},u8aToString(e){let t=0,r=e.length;if(r-t<1)return"";let n="",i=t;for(;i<r;){const s=e[i++];if(s<=127)n+=String.fromCharCode(s);else if(s>=192&&s<224)n+=String.fromCharCode((s&31)<<6|e[i++]&63);else if(s>=224&&s<240)n+=String.fromCharCode((s&15)<<12|(e[i++]&63)<<6|e[i++]&63);else if(s>=240){const a=((s&7)<<18|(e[i++]&63)<<12|(e[i++]&63)<<6|e[i++]&63)-65536;n+=String.fromCharCode(55296+(a>>10)),n+=String.fromCharCode(56320+(a&1023))}}return n},numberArrayToString(e){return mr.u8aToString(Uint8Array.from(e))},stringToHexString(e){return Zr.fromU8a(mr.stringToU8a(e))},hexStringToString(e){return mr.u8aToString(Zr.toU8a(e))},lengthInBytes(e){let t=0,r=0,n=0;for(;n<e.length;)r=e.charCodeAt(n),r<128?t+=1:r<2048?t+=2:(r&64512)===55296&&(e.charCodeAt(n+1)&64512)===56320?(++n,t+=4):t+=3,n+=1;return t}},_r={stringToU16a(e){const t=new Uint16Array(_r.lengthInBytes(e));let r=0;for(;r<e.length;){let n=e.codePointAt(r);n<=65535?t[r++]=n:(n-=65536,t[r++]=(n>>10)+55296,t[r++]=n%1024+56320)}return t},stringToNumberArray(e){return Array.from(_r.stringToU16a(e))},numberArrayToString(e){let t=0;const r=e.length;let n="";for(;t<r-1;){const i=e[t],s=e[t+1];if(i>=55296&&i<=57343)if(s>=56320&&s<=57343)n+=String.fromCodePoint((i-55296)*1024+s-56320+65536),t+=2;else throw new Error(`invalid UTF16 sequence: first u16 is ${i}, second u16 is ${s}`);else n+=String.fromCodePoint(i),t+=1}return t<r&&(n+=String.fromCodePoint(e[r-1])),n},u16aToString(e){return _r.numberArrayToString(e)},lengthInBytes(e){let t=0;for(;t<e.length;)t+=e.codePointAt(t)<=65535?1:2;return t}},Cd={HexString:Zr,Utf8:mr,Utf16:_r},Id=Object.create,ai=Object.defineProperty,Vd=Object.getOwnPropertyDescriptor,qd=Object.getOwnPropertyNames,Gd=Object.getPrototypeOf,Wd=Object.prototype.hasOwnProperty,pn=(e,t)=>{for(var r in t)ai(e,r,{get:t[r],enumerable:!0})},Tf=(e,t,r,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of qd(t))!Wd.call(e,i)&&i!==r&&ai(e,i,{get:()=>t[i],enumerable:!(n=Vd(t,i))||n.enumerable});return e},Yd=(e,t,r)=>(r=e!=null?Id(Gd(e)):{},Tf(t||!e||!e.__esModule?ai(r,"default",{value:e,enumerable:!0}):r,e)),Jd=e=>Tf(ai({},"__esModule",{value:!0}),e),Mf={};pn(Mf,{Address:()=>Ar,StringUtils:()=>Lf,constants:()=>fi});var ta=Jd(Mf),Ar={};pn(Ar,{Address:()=>l0,algorithms:()=>Zs,collection:()=>Sf,compare:()=>Hf,constants:()=>fi,extract:()=>Uf,is:()=>wt,mirror:()=>qs,nesting:()=>Xf,normalize:()=>Bf,substrate:()=>Ff,validate:()=>le});var fi={};pn(fi,{COLLECTION_ADDRESS_PREFIX:()=>Fs,NESTING_PREFIX:()=>Hs,STATIC_ADDRESSES:()=>Kd});var Kd={contractHelpers:"0x842899ECF380553E8a4de75bF534cdf6fBF64049",collectionHelpers:"0x6C4E9fE1AE37a41E93CEE429e8E1881aBdcbb54F"},Hs="0xf8238ccfff8ed887463fd5e0",Fs="0x17c4e6453cc49aaaaeaca894e6d9683e",Zs={};pn(Zs,{base58:()=>Cs,base64:()=>$d,basex:()=>Ds.default,blake2b:()=>kf.blake2b,keccak_256:()=>zf.keccak_256});var Ds=Yd(Nd),zf=Tt,kf=oi,Qd="123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz",_d="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",Cs=(0,Ds.default)(Qd),$d=(0,Ds.default)(_d),Lf={};pn(Lf,{DWORDHexString:()=>Fe,HexString:()=>He.HexString,Utf16:()=>He.Utf16,Utf8:()=>He.Utf8});var He=Dd,Fe={_checkU32:e=>{if(typeof e!="number")throw new Error(`Passed number is not a number: ${typeof e}, ${e}`);if(isNaN(e))throw new Error(`Passed number is NaN: ${e}`);if(e<0)throw new Error(`Passed number is less than 0: ${e}`);if(e>4294967295)throw new Error(`Passed number is more than 2**32: ${e}`);if(e!==Math.floor(e))throw new Error(`Passed number is not an integer number: ${e}`);return e},fromNumber:e=>Fe._checkU32(e).toString(16).padStart(8,"0"),toNumber:e=>{const t=parseInt(e,16);if(isNaN(t))throw new Error(`Passed string is not hexadecimal: ${e}`);return Fe._checkU32(t)}},Is=e=>{const t=e.toLowerCase().replace(/^0x/i,""),r=He.HexString.fromU8a((0,zf.keccak_256)(t)).replace(/^0x/i,"");let n="0x";for(let i=0;i<t.length;i++)n+=parseInt(r[i],16)>7?t[i].toUpperCase():t[i];return n},$r=e=>(le.ethereumAddress(e),Is(e)),t0=(e,t)=>{const r=typeof e=="string"?e:e.Ethereum||e.ethereum,n=typeof t=="string"?t:t.Ethereum||t.ethereum;return!r||!n||!wt.ethereumAddress(r)||!wt.ethereumAddress(n)?!1:r.toLowerCase()===n.toLowerCase()},e0=e=>(le.collectionId(e),Is(Fs+Fe.fromNumber(e))),r0=e=>(le.collectionAddress(e),Fe.toNumber(e.slice(-8))),n0=(e,t)=>(le.collectionId(e),le.tokenId(t),Is(Hs+Fe.fromNumber(e)+Fe.fromNumber(t))),i0=e=>(le.nestingAddress(e),{collectionId:Fe.toNumber(e.slice(-16,-8)),tokenId:Fe.toNumber(e.slice(-8))}),Af=(e,t=32)=>(0,kf.blake2b)(e,{dkLen:t}),Gn=e=>{let t=0,r=0;for(let i=0;i<e.length;i++)r+=e[i].length;const n=new Uint8Array(r);for(let i=0;i<e.length;i++)n.set(e[i],t),t+=e[i].length;return n},s0=new Uint8Array([83,83,53,56,80,82,69]),jf=e=>Af(Gn([s0,e]),64),o0=(e,t=!1)=>{const r=e[0]&64?2:1,n=r===1?e[0]:(e[0]&63)<<2|e[1]>>6|(e[1]&63)<<8,i=[34+r,35+r].includes(e.length),s=e.length-(i?2:1);let a=!1;if(!t){const l=jf(e.subarray(0,s));a=(e[0]&128)===0&&![46,47].includes(e[0])&&(i?e[e.length-2]===l[0]&&e[e.length-1]===l[1]:e[e.length-1]===l[0])}return[a,s,r,n]},Xn=(e,t=42)=>Vs(xr(e).u8a,t);function Vs(e,t=42){const r=typeof e=="string"?He.HexString.toU8a(e):typeof e=="bigint"?He.HexString.toU8a(e.toString(16)):e;if(t<0||t>16383||[46,47].includes(t))throw new Error(`ss58Format is not valid, received ${typeof t} "${t}"`);const n=[1,2,4,8,32,33];if(!n.includes(r.length))throw new Error(`key length is not valid, received ${r.length}, valid values are ${n.join(", ")}`);const i=t<64?new Uint8Array([t]):new Uint8Array([(t&252)>>2|64,t>>8|(t&3)<<6]),s=Gn([i,r]);return Cs.encode(Gn([s,jf(s).subarray(0,[32,33].includes(r.length)?2:1)]))}function xr(e,t,r=-1){let n=null;try{const i=Cs.decode(e),s=[3,4,6,10,35,36,37,38];if(!s.includes(i.length))throw n=new Error(`key length is not valid, decoded key length is ${i.length}, valid values are ${s.join(", ")}`),n;const[a,l,y,w]=o0(i,t);if(!t&&!a)throw n=new Error("Invalid decoded address checksum"),n;if(![-1,w].includes(r))throw n=new Error(`Expected ss58Format ${r}, received ${w}`),n;const x=i.slice(y,l),T=He.HexString.fromU8a(x);return{u8a:x,hex:T,bigint:BigInt(T),ss58Prefix:w}}catch(i){throw n||new Error(`Decoding ${e}: ${i.message}`)}}var Rf=(e,t)=>{const r=typeof e=="string"?e:e.Substrate||e.substrate,n=typeof t=="string"?t:t.Substrate||t.substrate;if(!r||!n)return!1;try{const i=xr(r),s=xr(n);return i.bigint===s.bigint}catch{return!1}},a0=(e,t)=>{const r=xr(e,t).u8a.subarray(0,20);return $r(He.HexString.fromU8a(r))},f0=new Uint8Array([101,118,109,58]),u0=(e,t=42)=>{le.ethereumAddress(e);const r=Gn([f0,He.HexString.toU8a(e)]);return Vs(Af(r),t)},yr=(e,t=!1)=>{const r=e;if(typeof r=="object"){if(r.hasOwnProperty("Substrate"))return le.substrateAddress(r.Substrate),{Substrate:t?Xn(r.Substrate):r.Substrate};if(r.hasOwnProperty("substrate"))return le.substrateAddress(r.substrate),{Substrate:t?Xn(r.substrate):r.substrate};if(r.hasOwnProperty("Ethereum"))return le.ethereumAddress(r.Ethereum),{Ethereum:t?$r(r.Ethereum):r.Ethereum};if(r.hasOwnProperty("ethereum"))return le.ethereumAddress(r.ethereum),{Ethereum:t?$r(r.ethereum):r.ethereum};throw new Error(`Address ${r} is not a valid crossAccountId object (should contain "Substrate"/"substrate" or "Ethereum"/"ethereum" field)`)}if(typeof r=="string"){if(wt.substrateAddress(r))return{Substrate:t?Xn(r):r};if(wt.ethereumAddress(r))return{Ethereum:t?$r(r):r};throw new Error(`Address ${r} is not a valid Substrate or Ethereum address`)}throw new Error(`Address ${r} is not a string or object: ${typeof r}`)},Gr=(e,t=!1)=>{try{return yr(e,t)}catch{return null}},Mn=(e,t=!1)=>{const r=yr(e,t);return r.Substrate?r.Substrate:qs.ethereumToSubstrate(r.Ethereum)},ea=(e,t=42)=>{const r=Ar.extract.crossAccountId(e);if(r.Ethereum){const n=Ar.normalize.ethereumAddress(r.Ethereum);return{...r,address:n,addressSS58:n,isEthereum:!0,isSubstrate:!1,type:"Ethereum"}}else return{...r,address:Ar.normalize.substrateAddress(r.Substrate),addressSS58:Ar.normalize.substrateAddress(r.Substrate,t),isEthereum:!1,isSubstrate:!0,type:"Substrate"}},c0=/^0x[a-fA-F0-9]{40}$/,le={substrateAddress:e=>(xr(e),!0),ethereumAddress:e=>{if(!wt.ethereumAddress(e))throw new Error(`address "${e}" is not valid ethereum address`);return!0},collectionAddress:e=>{if(!wt.collectionAddress(e))throw new Error(`address ${e} is not a collection address`);return!0},nestingAddress:e=>{if(!wt.nestingAddress(e))throw new Error(`address ${e} is not a nesting address`);return!0},collectionId:e=>{if(!wt.collectionId(e))throw new Error("collectionId should be a number between 0 and 0xffffffff");return!0},tokenId:e=>{if(!wt.tokenId(e))throw new Error("collectionId should be a number between 0 and 0xffffffff");return!0}},wt={substrateAddress:e=>{try{return xr(e),!0}catch{return!1}},ethereumAddress:e=>typeof e=="string"&&e.length===42&&!!e.match(c0),collectionAddress:e=>wt.ethereumAddress(e)&&e.toLowerCase().startsWith(Fs),nestingAddress:e=>wt.ethereumAddress(e)&&e.toLowerCase().startsWith(Hs),collectionId:e=>!(typeof e!="number"||isNaN(e)||e<0||e>4294967295),tokenId:e=>!(typeof e!="number"||isNaN(e)||e<0||e>4294967295),crossAccountId(e){return wt.substrateAddressObject(e)||wt.ethereumAddressObject(e)},crossAccountIdUncapitalized(e){return wt.substrateAddressObjectUncapitalized(e)||wt.ethereumAddressObjectUncapitalized(e)},substrateAddressObject(e){return typeof e=="object"&&typeof(e==null?void 0:e.Substrate)=="string"&&wt.substrateAddress(e.Substrate)},ethereumAddressObject(e){return typeof e=="object"&&typeof(e==null?void 0:e.Ethereum)=="string"&&wt.ethereumAddress(e.Ethereum)},substrateAddressObjectUncapitalized(e){return typeof e=="object"&&typeof(e==null?void 0:e.substrate)=="string"&&wt.substrateAddress(e.substrate)},ethereumAddressObjectUncapitalized(e){return typeof e=="object"&&typeof(e==null?void 0:e.ethereum)=="string"&&wt.ethereumAddress(e.ethereum)},substrateAddressInAnyForm(e){return typeof e=="string"?wt.substrateAddress(e):typeof e=="object"&&!!e&&(wt.substrateAddressObject(e)||wt.substrateAddressObjectUncapitalized(e))},ethereumAddressInAnyForm(e){return typeof e=="string"?wt.ethereumAddress(e):typeof e=="object"&&!!e&&(wt.ethereumAddressObject(e)||wt.ethereumAddressObjectUncapitalized(e))},validAddressInAnyForm(e){return wt.ethereumAddressInAnyForm(e)||wt.substrateAddressInAnyForm(e)}},Sf={idToAddress:e0,addressToId:r0},Xf={idsToAddress:n0,addressToIds:i0},Uf={address:e=>{const t=yr(e);return t.Substrate||t.Ethereum},addressSafe:e=>{const t=Gr(e);return t?t.Substrate||t.Ethereum:null},addressNormalized:e=>{const t=yr(e,!0);return t.Substrate||t.Ethereum},addressNormalizedSafe:e=>{const t=Gr(e,!0);return t?t.Substrate||t.Ethereum:null},addressForScan:e=>{const t=yr(e,!0);return t.Substrate||t.Ethereum.toLowerCase()},addressForScanSafe:e=>{const t=Gr(e,!0);return t?t.Substrate||t.Ethereum.toLowerCase():null},crossAccountId:e=>yr(e),crossAccountIdSafe:e=>Gr(e),crossAccountIdNormalized:e=>yr(e,!0),crossAccountIdNormalizedSafe:e=>Gr(e,!0),substrateOrMirrorIfEthereum:e=>Mn(e),substrateOrMirrorIfEthereumSafe:e=>{try{return Mn(e)}catch{return null}},substrateOrMirrorIfEthereumNormalized:e=>Mn(e,!0),substrateOrMirrorIfEthereumNormalizedSafe:e=>{try{return Mn(e,!0)}catch{return null}},enhancedCrossAccountId:(e,t=42)=>ea(e,t),enhancedCrossAccountIdSafe:(e,t=42)=>{try{return ea(e,t)}catch{return null}}},qs={substrateToEthereum:a0,ethereumToSubstrate:u0},Bf={substrateAddress:Xn,ethereumAddress:$r},Hf={substrateAddresses:Rf,ethereumAddresses:t0},Ff={encode:Vs,decode:xr,compare:Rf},l0={constants:fi,algorithms:Zs,is:wt,validate:le,collection:Sf,nesting:Xf,extract:Uf,mirror:qs,normalize:Bf,compare:Hf,substrate:Ff},Wn={},h0={get exports(){return Wn},set exports(e){Wn=e}},jr=typeof Reflect=="object"?Reflect:null,ra=jr&&typeof jr.apply=="function"?jr.apply:function(t,r,n){return Function.prototype.apply.call(t,r,n)},Un;jr&&typeof jr.ownKeys=="function"?Un=jr.ownKeys:Object.getOwnPropertySymbols?Un=function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:Un=function(t){return Object.getOwnPropertyNames(t)};function d0(e){console&&console.warn&&console.warn(e)}var Zf=Number.isNaN||function(t){return t!==t};function xt(){xt.init.call(this)}h0.exports=xt;Wn.once=b0;xt.EventEmitter=xt;xt.prototype._events=void 0;xt.prototype._eventsCount=0;xt.prototype._maxListeners=void 0;var na=10;function ui(e){if(typeof e!="function")throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}Object.defineProperty(xt,"defaultMaxListeners",{enumerable:!0,get:function(){return na},set:function(e){if(typeof e!="number"||e<0||Zf(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");na=e}});xt.init=function(){(this._events===void 0||this._events===Object.getPrototypeOf(this)._events)&&(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0};xt.prototype.setMaxListeners=function(t){if(typeof t!="number"||t<0||Zf(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this};function Df(e){return e._maxListeners===void 0?xt.defaultMaxListeners:e._maxListeners}xt.prototype.getMaxListeners=function(){return Df(this)};xt.prototype.emit=function(t){for(var r=[],n=1;n<arguments.length;n++)r.push(arguments[n]);var i=t==="error",s=this._events;if(s!==void 0)i=i&&s.error===void 0;else if(!i)return!1;if(i){var a;if(r.length>0&&(a=r[0]),a instanceof Error)throw a;var l=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw l.context=a,l}var y=s[t];if(y===void 0)return!1;if(typeof y=="function")ra(y,this,r);else for(var w=y.length,x=Gf(y,w),n=0;n<w;++n)ra(x[n],this,r);return!0};function Cf(e,t,r,n){var i,s,a;if(ui(r),s=e._events,s===void 0?(s=e._events=Object.create(null),e._eventsCount=0):(s.newListener!==void 0&&(e.emit("newListener",t,r.listener?r.listener:r),s=e._events),a=s[t]),a===void 0)a=s[t]=r,++e._eventsCount;else if(typeof a=="function"?a=s[t]=n?[r,a]:[a,r]:n?a.unshift(r):a.push(r),i=Df(e),i>0&&a.length>i&&!a.warned){a.warned=!0;var l=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");l.name="MaxListenersExceededWarning",l.emitter=e,l.type=t,l.count=a.length,d0(l)}return e}xt.prototype.addListener=function(t,r){return Cf(this,t,r,!1)};xt.prototype.on=xt.prototype.addListener;xt.prototype.prependListener=function(t,r){return Cf(this,t,r,!0)};function p0(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,arguments.length===0?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function If(e,t,r){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},i=p0.bind(n);return i.listener=r,n.wrapFn=i,i}xt.prototype.once=function(t,r){return ui(r),this.on(t,If(this,t,r)),this};xt.prototype.prependOnceListener=function(t,r){return ui(r),this.prependListener(t,If(this,t,r)),this};xt.prototype.removeListener=function(t,r){var n,i,s,a,l;if(ui(r),i=this._events,i===void 0)return this;if(n=i[t],n===void 0)return this;if(n===r||n.listener===r)--this._eventsCount===0?this._events=Object.create(null):(delete i[t],i.removeListener&&this.emit("removeListener",t,n.listener||r));else if(typeof n!="function"){for(s=-1,a=n.length-1;a>=0;a--)if(n[a]===r||n[a].listener===r){l=n[a].listener,s=a;break}if(s<0)return this;s===0?n.shift():m0(n,s),n.length===1&&(i[t]=n[0]),i.removeListener!==void 0&&this.emit("removeListener",t,l||r)}return this};xt.prototype.off=xt.prototype.removeListener;xt.prototype.removeAllListeners=function(t){var r,n,i;if(n=this._events,n===void 0)return this;if(n.removeListener===void 0)return arguments.length===0?(this._events=Object.create(null),this._eventsCount=0):n[t]!==void 0&&(--this._eventsCount===0?this._events=Object.create(null):delete n[t]),this;if(arguments.length===0){var s=Object.keys(n),a;for(i=0;i<s.length;++i)a=s[i],a!=="removeListener"&&this.removeAllListeners(a);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if(r=n[t],typeof r=="function")this.removeListener(t,r);else if(r!==void 0)for(i=r.length-1;i>=0;i--)this.removeListener(t,r[i]);return this};function Vf(e,t,r){var n=e._events;if(n===void 0)return[];var i=n[t];return i===void 0?[]:typeof i=="function"?r?[i.listener||i]:[i]:r?y0(i):Gf(i,i.length)}xt.prototype.listeners=function(t){return Vf(this,t,!0)};xt.prototype.rawListeners=function(t){return Vf(this,t,!1)};xt.listenerCount=function(e,t){return typeof e.listenerCount=="function"?e.listenerCount(t):qf.call(e,t)};xt.prototype.listenerCount=qf;function qf(e){var t=this._events;if(t!==void 0){var r=t[e];if(typeof r=="function")return 1;if(r!==void 0)return r.length}return 0}xt.prototype.eventNames=function(){return this._eventsCount>0?Un(this._events):[]};function Gf(e,t){for(var r=new Array(t),n=0;n<t;++n)r[n]=e[n];return r}function m0(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}function y0(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}function b0(e,t){return new Promise(function(r,n){function i(a){e.removeListener(t,s),n(a)}function s(){typeof e.removeListener=="function"&&e.removeListener("error",i),r([].slice.call(arguments))}Wf(e,t,s,{once:!0}),t!=="error"&&v0(e,i,{once:!0})})}function v0(e,t,r){typeof e.on=="function"&&Wf(e,"error",t,r)}function Wf(e,t,r,n){if(typeof e.on=="function")n.once?e.once(t,r):e.on(t,r);else if(typeof e.addEventListener=="function")e.addEventListener(t,function i(s){n.once&&e.removeEventListener(t,i),r(s)});else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e)}const w0=function(e,t){return t==="ethereum"?ta.Address.mirror.substrateToEthereum(e):typeof t=="number"?ta.Address.normalize.substrateAddress(e,t):e};class g0{constructor(t){this.legacyInstance=t}get instance(){return this.legacyInstance}}class x0 extends Wn.EventEmitter{async first(){const t=await this.getAccounts();return t.length?t[0]:void 0}}function P0(e){return Le.crypto.getRandomValues(e)}const Bn={getRandomValues:P0},O0={crypto:Bn};var me;class N0{constructor(t){de(this,me,void 0);ve(this,"abort",()=>{throw new Error("abort")});ve(this,"__wbindgen_is_undefined",t=>lt(this,me).getObject(t)===void 0);ve(this,"__wbindgen_throw",(t,r)=>{throw new Error(lt(this,me).getString(t,r))});ve(this,"__wbg_self_1b7a39e3a92c949c",()=>lt(this,me).addObject(O0));ve(this,"__wbg_require_604837428532a733",(t,r)=>{throw new Error(`Unable to require ${lt(this,me).getString(t,r)}`)});ve(this,"__wbg_crypto_968f1772287e2df0",t=>lt(this,me).addObject(Bn));ve(this,"__wbg_getRandomValues_a3d34b4fee3c2869",t=>lt(this,me).addObject(Bn.getRandomValues));ve(this,"__wbg_getRandomValues_f5e14ab7ac8e995d",(t,r,n)=>{Bn.getRandomValues(lt(this,me).getU8a(r,n))});ve(this,"__wbg_randomFillSync_d5bd2d655fdf256a",(t,r,n)=>{throw new Error("randomFillsync is not available")});ve(this,"__wbindgen_object_drop_ref",t=>{lt(this,me).takeObject(t)});Jt(this,me,t)}}me=new WeakMap;var _e,$e,un,ye,Xe,ce,Sr,br,cn,Xr;class E0{constructor(t){de(this,_e,void 0);de(this,$e,void 0);de(this,un,void 0);de(this,ye,void 0);de(this,Xe,void 0);de(this,ce,void 0);de(this,Sr,void 0);de(this,br,void 0);de(this,cn,void 0);de(this,Xr,void 0);Jt(this,un,t),Jt(this,_e,null),Jt(this,$e,null),Jt(this,ye,new Array(32).fill(void 0).concat(void 0,null,!0,!1)),Jt(this,Xe,lt(this,ye).length),Jt(this,Xr,"none"),Jt(this,ce,null),Jt(this,Sr,null),Jt(this,br,null),Jt(this,cn,{...new N0(this)})}get error(){return lt(this,Sr)}get type(){return lt(this,Xr)}get wasm(){return lt(this,ce)}async init(t){(!lt(this,br)||t)&&Jt(this,br,(t||lt(this,un))(lt(this,cn)));const{error:r,type:n,wasm:i}=await lt(this,br);return Jt(this,Xr,n),Jt(this,ce,i),Jt(this,Sr,r),lt(this,ce)}getObject(t){return lt(this,ye)[t]}dropObject(t){t<36||(lt(this,ye)[t]=lt(this,Xe),Jt(this,Xe,t))}takeObject(t){const r=this.getObject(t);return this.dropObject(t),r}addObject(t){lt(this,Xe)===lt(this,ye).length&&lt(this,ye).push(lt(this,ye).length+1);const r=lt(this,Xe);return Jt(this,Xe,lt(this,ye)[r]),lt(this,ye)[r]=t,r}getInt32(){return(lt(this,_e)===null||lt(this,_e).buffer!==lt(this,ce).memory.buffer)&&Jt(this,_e,new Int32Array(lt(this,ce).memory.buffer)),lt(this,_e)}getUint8(){return(lt(this,$e)===null||lt(this,$e).buffer!==lt(this,ce).memory.buffer)&&Jt(this,$e,new Uint8Array(lt(this,ce).memory.buffer)),lt(this,$e)}getU8a(t,r){return this.getUint8().subarray(t/1,t/1+r)}getString(t,r){return Ko(this.getU8a(t,r))}allocU8a(t){const r=lt(this,ce).__wbindgen_malloc(t.length*1);return this.getUint8().set(t,r/1),[r,t.length]}allocString(t){return this.allocU8a(Ss(t))}resultU8a(){const t=this.getInt32()[2],r=this.getInt32()[8/4+1],n=this.getU8a(t,r).slice();return lt(this,ce).__wbindgen_free(t,r*1),n}resultString(){return Ko(this.resultU8a())}}_e=new WeakMap,$e=new WeakMap,un=new WeakMap,ye=new WeakMap,Xe=new WeakMap,ce=new WeakMap,Sr=new WeakMap,br=new WeakMap,cn=new WeakMap,Xr=new WeakMap;function T0(e,t,r){return async n=>{const i={error:null,type:"none",wasm:null};try{if(!t||!t.length)throw new Error("No WebAssembly provided for initialization");if(typeof WebAssembly!="object"||typeof WebAssembly.instantiate!="function")throw new Error("WebAssembly is not available in your environment");const s=await WebAssembly.instantiate(t,{wbg:n});i.wasm=s.instance.exports,i.type="wasm"}catch(s){typeof r=="function"?(i.wasm=r(n),i.type="asm"):(i.error=`FATAL: Unable to initialize @polkadot/wasm-${e}:: ${s.message}`,console.error(i.error))}return i}}const ia="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",Yf=new Array(256);for(let e=0;e<ia.length;e++)Yf[ia.charCodeAt(e)]=e;function M0(e,t){const r=t.length;let n=0,i=0,s=-1;for(let a=0;s<r;a++)n=n<<6|Yf[e.charCodeAt(a)],(i+=6)>=8&&(t[++s]=n>>>(i-=8)&255);return t}const ze=Uint8Array,er=Uint16Array,ds=Uint32Array,z0=new ze([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),Jf=new ze([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0]),Kf=new ze([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0]),Qf=(e,t)=>{const r=new er(31);for(let i=0;i<31;++i)r[i]=t+=1<<e[i-1];const n=new ds(r[30]);for(let i=1;i<30;++i)for(let s=r[i];s<r[i+1];++s)n[s]=s-r[i]<<5|i;return[r,n]},[_f,k0]=Qf(Jf,2);_f[28]=258,k0[258]=28;const[L0]=Qf(Kf,0),ps=new er(32768);for(let e=0;e<32768;++e){let t=(e&43690)>>>1|(e&21845)<<1;t=(t&52428)>>>2|(t&13107)<<2,t=(t&61680)>>>4|(t&3855)<<4,ps[e]=((t&65280)>>>8|(t&255)<<8)>>>1}const tn=(e,t,r)=>{const n=e.length;let i=0;const s=new er(t);for(;i<n;++i)++s[e[i]-1];const a=new er(t);for(i=0;i<t;++i)a[i]=a[i-1]+s[i-1]<<1;let l;if(r){l=new er(1<<t);const y=15-t;for(i=0;i<n;++i)if(e[i]){const w=i<<4|e[i],x=t-e[i];let T=a[e[i]-1]++<<x;for(const N=T|(1<<x)-1;T<=N;++T)l[ps[T]>>>y]=w}}else for(l=new er(n),i=0;i<n;++i)l[i]=ps[a[e[i]-1]++]>>>15-e[i];return l},mn=new ze(288);for(let e=0;e<144;++e)mn[e]=8;for(let e=144;e<256;++e)mn[e]=9;for(let e=256;e<280;++e)mn[e]=7;for(let e=280;e<288;++e)mn[e]=8;const $f=new ze(32);for(let e=0;e<32;++e)$f[e]=5;const A0=tn(mn,9,1),j0=tn($f,5,1),ge=(e,t,r)=>{const n=t>>>3;return(e[n]|e[n+1]<<8)>>>(t&7)&r},Wi=(e,t)=>{const r=t>>>3;return(e[r]|e[r+1]<<8|e[r+2]<<16)>>>(t&7)},R0=e=>(e>>>3)+(e&7&&1),S0=(e,t,r)=>{(t==null||t<0)&&(t=0),(r==null||r>e.length)&&(r=e.length);const n=new(e instanceof er?er:e instanceof ds?ds:ze)(r-t);return n.set(e.subarray(t,r)),n},Yi=e=>{let t=e[0];for(let r=1;r<e.length;++r)e[r]>t&&(t=e[r]);return t},X0=(e,t,r)=>{const n=!r||r.i;r||(r={});const i=e.length,s=!t||!n;t||(t=new ze(i*3));const a=Y=>{let rt=t.length;if(Y>rt){const ft=new ze(Math.max(rt<<1,Y));ft.set(t),t=ft}};let l=r.f||0,y=r.p||0,w=r.b||0,x=r.l,T=r.d,N=r.m,j=r.n;if(l&&!x)return t;const U=i<<3;do{if(!x){r.f=l=ge(e,y,1);const $=ge(e,y+1,3);if(y+=3,$)if($==1)x=A0,T=j0,N=9,j=5;else if($==2){const et=ge(e,y,31)+257,S=ge(e,y+10,15)+4,A=et+ge(e,y+5,31)+1;y+=14;const q=new ze(A),tt=new ze(19);for(let m=0;m<S;++m)tt[z0[m]]=ge(e,y+m*3,7);y+=S*3;const ut=Yi(tt),bt=(1<<ut)-1;if(!n&&y+A*(ut+7)>U)break;const W=tn(tt,ut,1);for(let m=0;m<A;){const o=W[ge(e,y,bt)];y+=o&15;const u=o>>>4;if(u<16)q[m++]=u;else{let h=0,p=0;for(u==16?(p=3+ge(e,y,3),y+=2,h=q[m-1]):u==17?(p=3+ge(e,y,7),y+=3):u==18&&(p=11+ge(e,y,127),y+=7);p--;)q[m++]=h}}const Z=q.subarray(0,et),B=q.subarray(et);N=Yi(Z),j=Yi(B),x=tn(Z,N,1),T=tn(B,j,1)}else throw"invalid block type";else{const et=R0(y)+4,S=e[et-4]|e[et-3]<<8,A=et+S;if(A>i){if(n)throw"unexpected EOF";break}s&&a(w+S),t.set(e.subarray(et,A),w),r.b=w+=S,r.p=y=A<<3;continue}if(y>U)throw"unexpected EOF"}s&&a(w+131072);const Y=(1<<N)-1,rt=(1<<j)-1,ft=N+j+18;for(;n||y+ft<U;){const $=x[Wi(e,y)&Y],et=$>>>4;if(y+=$&15,y>U)throw"unexpected EOF";if(!$)throw"invalid length/literal";if(et<256)t[w++]=et;else if(et==256){x=void 0;break}else{let S=et-254;if(et>264){const bt=et-257,W=Jf[bt];S=ge(e,y,(1<<W)-1)+_f[bt],y+=W}const A=T[Wi(e,y)&rt],q=A>>>4;if(!A)throw"invalid distance";y+=A&15;let tt=L0[q];if(q>3){const bt=Kf[q];tt+=Wi(e,y)&(1<<bt)-1,y+=bt}if(y>U)throw"unexpected EOF";s&&a(w+131072);const ut=w+S;for(;w<ut;w+=4)t[w]=t[w-tt],t[w+1]=t[w+1-tt],t[w+2]=t[w+2-tt],t[w+3]=t[w+3-tt];w=ut}}r.l=x,r.p=y,r.b=w,x&&(l=1,r.m=N,r.d=T,r.n=j)}while(!l);return w==t.length?t:S0(t,0,w)},U0=e=>{if((e[0]&15)!=8||e[0]>>>4>7||(e[0]<<8|e[1])%31)throw"invalid zlib data";if(e[1]&32)throw"invalid zlib data: preset dictionaries not supported"};function B0(e,t){return X0((U0(e),e.subarray(2,-4)),t)}const H0=171005,F0=339466,Z0="";var Ji={bytes:Z0,lenIn:H0,lenOut:F0};const D0=B0(M0(Ji.bytes,new Uint8Array(Ji.lenIn)),new Uint8Array(Ji.lenOut)),C0=T0("crypto",D0,null),Rr=new E0(C0);function I0(e){return(...t)=>{if(!Rr.wasm)throw new Error("The WASM interface has not been initialized. Ensure that you wait for the initialization Promise with waitReady() from @polkadot/wasm-crypto (or cryptoWaitReady() from @polkadot/util-crypto) before attempting to use WASM-only interfaces.");return e(Rr.wasm,...t)}}const V0=I0((e,t,r,n)=>(e.ext_blake2b(8,...Rr.allocU8a(t),...Rr.allocU8a(r),n),Rr.resultU8a()));function q0(){return!!Rr.wasm}/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */function Ir(e){if(!Number.isSafeInteger(e))throw new Error(`Wrong integer: ${e}`)}function De(...e){const t=(i,s)=>a=>i(s(a)),r=Array.from(e).reverse().reduce((i,s)=>i?t(i,s.encode):s.encode,void 0),n=e.reduce((i,s)=>i?t(i,s.decode):s.decode,void 0);return{encode:r,decode:n}}function Ce(e){return{encode:t=>{if(!Array.isArray(t)||t.length&&typeof t[0]!="number")throw new Error("alphabet.encode input should be an array of numbers");return t.map(r=>{if(Ir(r),r<0||r>=e.length)throw new Error(`Digit index outside alphabet: ${r} (alphabet: ${e.length})`);return e[r]})},decode:t=>{if(!Array.isArray(t)||t.length&&typeof t[0]!="string")throw new Error("alphabet.decode input should be array of strings");return t.map(r=>{if(typeof r!="string")throw new Error(`alphabet.decode: not string element=${r}`);const n=e.indexOf(r);if(n===-1)throw new Error(`Unknown letter: "${r}". Allowed: ${e}`);return n})}}}function Ie(e=""){if(typeof e!="string")throw new Error("join separator should be string");return{encode:t=>{if(!Array.isArray(t)||t.length&&typeof t[0]!="string")throw new Error("join.encode input should be array of strings");for(let r of t)if(typeof r!="string")throw new Error(`join.encode: non-string input=${r}`);return t.join(e)},decode:t=>{if(typeof t!="string")throw new Error("join.decode input should be string");return t.split(e)}}}function ci(e,t="="){if(Ir(e),typeof t!="string")throw new Error("padding chr should be string");return{encode(r){if(!Array.isArray(r)||r.length&&typeof r[0]!="string")throw new Error("padding.encode input should be array of strings");for(let n of r)if(typeof n!="string")throw new Error(`padding.encode: non-string input=${n}`);for(;r.length*e%8;)r.push(t);return r},decode(r){if(!Array.isArray(r)||r.length&&typeof r[0]!="string")throw new Error("padding.encode input should be array of strings");for(let i of r)if(typeof i!="string")throw new Error(`padding.decode: non-string input=${i}`);let n=r.length;if(n*e%8)throw new Error("Invalid padding: string should have whole number of bytes");for(;n>0&&r[n-1]===t;n--)if(!((n-1)*e%8))throw new Error("Invalid padding: string has too much padding");return r.slice(0,n)}}}function tu(e){if(typeof e!="function")throw new Error("normalize fn should be function");return{encode:t=>t,decode:t=>e(t)}}function sa(e,t,r){if(t<2)throw new Error(`convertRadix: wrong from=${t}, base cannot be less than 2`);if(r<2)throw new Error(`convertRadix: wrong to=${r}, base cannot be less than 2`);if(!Array.isArray(e))throw new Error("convertRadix: data should be array");if(!e.length)return[];let n=0;const i=[],s=Array.from(e);for(s.forEach(a=>{if(Ir(a),a<0||a>=t)throw new Error(`Wrong integer: ${a}`)});;){let a=0,l=!0;for(let y=n;y<s.length;y++){const w=s[y],x=t*a+w;if(!Number.isSafeInteger(x)||t*a/t!==a||x-w!==t*a)throw new Error("convertRadix: carry overflow");if(a=x%r,s[y]=Math.floor(x/r),!Number.isSafeInteger(s[y])||s[y]*r+a!==x)throw new Error("convertRadix: carry overflow");if(l)s[y]?l=!1:n=y;else continue}if(i.push(a),l)break}for(let a=0;a<e.length-1&&e[a]===0;a++)i.push(0);return i.reverse()}const eu=(e,t)=>t?eu(t,e%t):e,Yn=(e,t)=>e+(t-eu(e,t));function ms(e,t,r,n){if(!Array.isArray(e))throw new Error("convertRadix2: data should be array");if(t<=0||t>32)throw new Error(`convertRadix2: wrong from=${t}`);if(r<=0||r>32)throw new Error(`convertRadix2: wrong to=${r}`);if(Yn(t,r)>32)throw new Error(`convertRadix2: carry overflow from=${t} to=${r} carryBits=${Yn(t,r)}`);let i=0,s=0;const a=2**r-1,l=[];for(const y of e){if(Ir(y),y>=2**t)throw new Error(`convertRadix2: invalid data word=${y} from=${t}`);if(i=i<<t|y,s+t>32)throw new Error(`convertRadix2: carry overflow pos=${s} from=${t}`);for(s+=t;s>=r;s-=r)l.push((i>>s-r&a)>>>0);i&=2**s-1}if(i=i<<r-s&a,!n&&s>=t)throw new Error("Excess padding");if(!n&&i)throw new Error(`Non-zero padding: ${i}`);return n&&s>0&&l.push(i>>>0),l}function G0(e){return Ir(e),{encode:t=>{if(!(t instanceof Uint8Array))throw new Error("radix.encode input should be Uint8Array");return sa(Array.from(t),2**8,e)},decode:t=>{if(!Array.isArray(t)||t.length&&typeof t[0]!="number")throw new Error("radix.decode input should be array of strings");return Uint8Array.from(sa(t,e,2**8))}}}function ir(e,t=!1){if(Ir(e),e<=0||e>32)throw new Error("radix2: bits should be in (0..32]");if(Yn(8,e)>32||Yn(e,8)>32)throw new Error("radix2: carry overflow");return{encode:r=>{if(!(r instanceof Uint8Array))throw new Error("radix2.encode input should be Uint8Array");return ms(Array.from(r),8,e,!t)},decode:r=>{if(!Array.isArray(r)||r.length&&typeof r[0]!="number")throw new Error("radix2.decode input should be array of strings");return Uint8Array.from(ms(r,e,8,t))}}}function oa(e){if(typeof e!="function")throw new Error("unsafeWrapper fn should be function");return function(...t){try{return e.apply(null,t)}catch{}}}const W0=De(ir(4),Ce("0123456789ABCDEF"),Ie("")),Y0=De(ir(5),Ce("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"),ci(5),Ie(""));De(ir(5),Ce("0123456789ABCDEFGHIJKLMNOPQRSTUV"),ci(5),Ie(""));De(ir(5),Ce("0123456789ABCDEFGHJKMNPQRSTVWXYZ"),Ie(""),tu(e=>e.toUpperCase().replace(/O/g,"0").replace(/[IL]/g,"1")));const J0=De(ir(6),Ce("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"),ci(6),Ie("")),K0=De(ir(6),Ce("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"),ci(6),Ie("")),Gs=e=>De(G0(58),Ce(e),Ie("")),Jn=Gs("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");Gs("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ");Gs("rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz");const aa=[0,2,3,5,6,7,9,10,11],Q0={encode(e){let t="";for(let r=0;r<e.length;r+=8){const n=e.subarray(r,r+8);t+=Jn.encode(n).padStart(aa[n.length],"1")}return t},decode(e){let t=[];for(let r=0;r<e.length;r+=11){const n=e.slice(r,r+11),i=aa.indexOf(n.length),s=Jn.decode(n);for(let a=0;a<s.length-i;a++)if(s[a]!==0)throw new Error("base58xmr: wrong padding");t=t.concat(Array.from(s.slice(s.length-i)))}return Uint8Array.from(t)}},ys=De(Ce("qpzry9x8gf2tvdw0s3jn54khce6mua7l"),Ie("")),fa=[996825010,642813549,513874426,1027748829,705979059];function Wr(e){const t=e>>25;let r=(e&33554431)<<5;for(let n=0;n<fa.length;n++)(t>>n&1)===1&&(r^=fa[n]);return r}function ua(e,t,r=1){const n=e.length;let i=1;for(let s=0;s<n;s++){const a=e.charCodeAt(s);if(a<33||a>126)throw new Error(`Invalid prefix (${e})`);i=Wr(i)^a>>5}i=Wr(i);for(let s=0;s<n;s++)i=Wr(i)^e.charCodeAt(s)&31;for(let s of t)i=Wr(i)^s;for(let s=0;s<6;s++)i=Wr(i);return i^=r,ys.encode(ms([i%2**30],30,5,!1))}function ru(e){const t=e==="bech32"?1:734539939,r=ir(5),n=r.decode,i=r.encode,s=oa(n);function a(x,T,N=90){if(typeof x!="string")throw new Error(`bech32.encode prefix should be string, not ${typeof x}`);if(!Array.isArray(T)||T.length&&typeof T[0]!="number")throw new Error(`bech32.encode words should be array of numbers, not ${typeof T}`);const j=x.length+7+T.length;if(N!==!1&&j>N)throw new TypeError(`Length ${j} exceeds limit ${N}`);return x=x.toLowerCase(),`${x}1${ys.encode(T)}${ua(x,T,t)}`}function l(x,T=90){if(typeof x!="string")throw new Error(`bech32.decode input should be string, not ${typeof x}`);if(x.length<8||T!==!1&&x.length>T)throw new TypeError(`Wrong string length: ${x.length} (${x}). Expected (8..${T})`);const N=x.toLowerCase();if(x!==N&&x!==x.toUpperCase())throw new Error("String must be lowercase or uppercase");x=N;const j=x.lastIndexOf("1");if(j===0||j===-1)throw new Error('Letter "1" must be present between prefix and data only');const U=x.slice(0,j),Y=x.slice(j+1);if(Y.length<6)throw new Error("Data must be at least 6 characters long");const rt=ys.decode(Y).slice(0,-6),ft=ua(U,rt,t);if(!Y.endsWith(ft))throw new Error(`Invalid checksum in ${x}: expected "${ft}"`);return{prefix:U,words:rt}}const y=oa(l);function w(x){const{prefix:T,words:N}=l(x,!1);return{prefix:T,words:N,bytes:n(N)}}return{encode:a,decode:l,decodeToBytes:w,decodeUnsafe:y,fromWords:n,fromWordsUnsafe:s,toWords:i}}ru("bech32");ru("bech32m");const _0={encode:e=>new TextDecoder().decode(e),decode:e=>new TextEncoder().encode(e)},$0=De(ir(4),Ce("0123456789abcdef"),Ie(""),tu(e=>{if(typeof e!="string"||e.length%2)throw new TypeError(`hex.decode: expected string, got ${typeof e} with length ${e.length}`);return e.toLowerCase()})),tp={utf8:_0,hex:$0,base16:W0,base32:Y0,base64:J0,base64url:K0,base58:Jn,base58xmr:Q0};`${Object.keys(tp).join(", ")}`;function ep({coder:e,ipfs:t},r){return(n,i)=>(r(n,i),e.decode(t&&i?n.substring(1):n))}function rp({coder:e,ipfs:t}){return(r,n)=>{const i=e.encode(an(r));return t&&n?`${t}${i}`:i}}function np({chars:e,ipfs:t,type:r}){return(n,i)=>{if(!n||typeof n!="string")throw new Error(`Expected non-null, non-empty ${r} string input`);if(t&&i&&n[0]!==t)throw new Error(`Expected ipfs-compatible ${r} to start with '${t}'`);for(let s=i?1:0;s<n.length;s++)if(!(e.includes(n[s])||n[s]==="="&&(s===n.length-1||!e.includes(n[s+1]))))throw new Error(`Invalid ${r} character "${n[s]}" (0x${n.charCodeAt(s).toString(16)}) at index ${s}`);return!0}}const Ws={chars:"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz",coder:Jn,ipfs:"z",type:"base58"},ip=np(Ws),sp=ep(Ws,ip),op=rp(Ws);function ap(e,t=256,r,n){const i=Math.ceil(t/8),s=an(e);return!bd||!n&&q0()?V0(s,an(r),i):Nf(s,{dkLen:i,key:r||void 0})}const fp=Ss("SS58PRE");function nu(e){return ap(hs(fp,e),512)}function up(e){const t=e[0]&64?2:1,r=t===1?e[0]:(e[0]&63)<<2|e[1]>>6|(e[1]&63)<<8,n=[34+t,35+t].includes(e.length),i=e.length-(n?2:1),s=nu(e.subarray(0,i));return[(e[0]&128)===0&&![46,47].includes(e[0])&&(n?e[e.length-2]===s[0]&&e[e.length-1]===s[1]:e[e.length-1]===s[0]),i,t,r]}const cp=[{prefix:0,network:"polkadot",displayName:"Polkadot Relay Chain",symbols:["DOT"],decimals:[10],standardAccount:"*25519",website:"https://polkadot.network"},{prefix:1,network:"BareSr25519",displayName:"Bare 32-bit Schnorr/Ristretto (S/R 25519) public key.",symbols:[],decimals:[],standardAccount:"Sr25519",website:null},{prefix:2,network:"kusama",displayName:"Kusama Relay Chain",symbols:["KSM"],decimals:[12],standardAccount:"*25519",website:"https://kusama.network"},{prefix:3,network:"BareEd25519",displayName:"Bare 32-bit Ed25519 public key.",symbols:[],decimals:[],standardAccount:"Ed25519",website:null},{prefix:4,network:"katalchain",displayName:"Katal Chain",symbols:[],decimals:[],standardAccount:"*25519",website:null},{prefix:5,network:"astar",displayName:"Astar Network",symbols:["ASTR"],decimals:[18],standardAccount:"*25519",website:"https://astar.network"},{prefix:6,network:"bifrost",displayName:"Bifrost",symbols:["BNC"],decimals:[12],standardAccount:"*25519",website:"https://bifrost.finance/"},{prefix:7,network:"edgeware",displayName:"Edgeware",symbols:["EDG"],decimals:[18],standardAccount:"*25519",website:"https://edgewa.re"},{prefix:8,network:"karura",displayName:"Karura",symbols:["KAR"],decimals:[12],standardAccount:"*25519",website:"https://karura.network/"},{prefix:9,network:"reynolds",displayName:"Laminar Reynolds Canary",symbols:["REY"],decimals:[18],standardAccount:"*25519",website:"http://laminar.network/"},{prefix:10,network:"acala",displayName:"Acala",symbols:["ACA"],decimals:[12],standardAccount:"*25519",website:"https://acala.network/"},{prefix:11,network:"laminar",displayName:"Laminar",symbols:["LAMI"],decimals:[18],standardAccount:"*25519",website:"http://laminar.network/"},{prefix:12,network:"polymesh",displayName:"Polymesh",symbols:["POLYX"],decimals:[6],standardAccount:"*25519",website:"https://polymath.network/"},{prefix:13,network:"integritee",displayName:"Integritee",symbols:["TEER"],decimals:[12],standardAccount:"*25519",website:"https://integritee.network"},{prefix:14,network:"totem",displayName:"Totem",symbols:["TOTEM"],decimals:[0],standardAccount:"*25519",website:"https://totemaccounting.com"},{prefix:15,network:"synesthesia",displayName:"Synesthesia",symbols:["SYN"],decimals:[12],standardAccount:"*25519",website:"https://synesthesia.network/"},{prefix:16,network:"kulupu",displayName:"Kulupu",symbols:["KLP"],decimals:[12],standardAccount:"*25519",website:"https://kulupu.network/"},{prefix:17,network:"dark",displayName:"Dark Mainnet",symbols:[],decimals:[],standardAccount:"*25519",website:null},{prefix:18,network:"darwinia",displayName:"Darwinia Network",symbols:["RING","KTON"],decimals:[9,9],standardAccount:"*25519",website:"https://darwinia.network/"},{prefix:19,network:"watr",displayName:"Watr Protocol",symbols:["WATR"],decimals:[18],standardAccount:"*25519",website:"https://www.watr.org"},{prefix:20,network:"stafi",displayName:"Stafi",symbols:["FIS"],decimals:[12],standardAccount:"*25519",website:"https://stafi.io"},{prefix:22,network:"dock-pos-mainnet",displayName:"Dock Mainnet",symbols:["DCK"],decimals:[6],standardAccount:"*25519",website:"https://dock.io"},{prefix:23,network:"shift",displayName:"ShiftNrg",symbols:[],decimals:[],standardAccount:"*25519",website:null},{prefix:24,network:"zero",displayName:"ZERO",symbols:["ZERO"],decimals:[18],standardAccount:"*25519",website:"https://zero.io"},{prefix:25,network:"zero-alphaville",displayName:"ZERO Alphaville",symbols:["ZERO"],decimals:[18],standardAccount:"*25519",website:"https://zero.io"},{prefix:26,network:"jupiter",displayName:"Jupiter",symbols:["jDOT"],decimals:[10],standardAccount:"*25519",website:"https://jupiter.patract.io"},{prefix:27,network:"kabocha",displayName:"Kabocha",symbols:["KAB"],decimals:[12],standardAccount:"*25519",website:"https://kabocha.network"},{prefix:28,network:"subsocial",displayName:"Subsocial",symbols:[],decimals:[],standardAccount:"*25519",website:null},{prefix:29,network:"cord",displayName:"CORD Network",symbols:["DHI","WAY"],decimals:[12,12],standardAccount:"*25519",website:"https://cord.network/"},{prefix:30,network:"phala",displayName:"Phala Network",symbols:["PHA"],decimals:[12],standardAccount:"*25519",website:"https://phala.network"},{prefix:31,network:"litentry",displayName:"Litentry Network",symbols:["LIT"],decimals:[12],standardAccount:"*25519",website:"https://litentry.com/"},{prefix:32,network:"robonomics",displayName:"Robonomics",symbols:["XRT"],decimals:[9],standardAccount:"*25519",website:"https://robonomics.network"},{prefix:33,network:"datahighway",displayName:"DataHighway",symbols:[],decimals:[],standardAccount:"*25519",website:null},{prefix:34,network:"ares",displayName:"Ares Protocol",symbols:["ARES"],decimals:[12],standardAccount:"*25519",website:"https://www.aresprotocol.com/"},{prefix:35,network:"vln",displayName:"Valiu Liquidity Network",symbols:["USDv"],decimals:[15],standardAccount:"*25519",website:"https://valiu.com/"},{prefix:36,network:"centrifuge",displayName:"Centrifuge Chain",symbols:["CFG"],decimals:[18],standardAccount:"*25519",website:"https://centrifuge.io/"},{prefix:37,network:"nodle",displayName:"Nodle Chain",symbols:["NODL"],decimals:[11],standardAccount:"*25519",website:"https://nodle.io/"},{prefix:38,network:"kilt",displayName:"KILT Spiritnet",symbols:["KILT"],decimals:[15],standardAccount:"*25519",website:"https://kilt.io/"},{prefix:39,network:"mathchain",displayName:"MathChain mainnet",symbols:["MATH"],decimals:[18],standardAccount:"*25519",website:"https://mathwallet.org"},{prefix:40,network:"mathchain-testnet",displayName:"MathChain testnet",symbols:["MATH"],decimals:[18],standardAccount:"*25519",website:"https://mathwallet.org"},{prefix:41,network:"poli",displayName:"Polimec Chain",symbols:[],decimals:[],standardAccount:"*25519",website:"https://polimec.io/"},{prefix:42,network:"substrate",displayName:"Substrate",symbols:[],decimals:[],standardAccount:"*25519",website:"https://substrate.io/"},{prefix:43,network:"BareSecp256k1",displayName:"Bare 32-bit ECDSA SECP-256k1 public key.",symbols:[],decimals:[],standardAccount:"secp256k1",website:null},{prefix:44,network:"chainx",displayName:"ChainX",symbols:["PCX"],decimals:[8],standardAccount:"*25519",website:"https://chainx.org/"},{prefix:45,network:"uniarts",displayName:"UniArts Network",symbols:["UART","UINK"],decimals:[12,12],standardAccount:"*25519",website:"https://uniarts.me"},{prefix:46,network:"reserved46",displayName:"This prefix is reserved.",symbols:[],decimals:[],standardAccount:null,website:null},{prefix:47,network:"reserved47",displayName:"This prefix is reserved.",symbols:[],decimals:[],standardAccount:null,website:null},{prefix:48,network:"neatcoin",displayName:"Neatcoin Mainnet",symbols:["NEAT"],decimals:[12],standardAccount:"*25519",website:"https://neatcoin.org"},{prefix:49,network:"picasso",displayName:"Picasso",symbols:["PICA"],decimals:[12],standardAccount:"*25519",website:"https://picasso.composable.finance"},{prefix:50,network:"composable",displayName:"Composable",symbols:["LAYR"],decimals:[12],standardAccount:"*25519",website:"https://composable.finance"},{prefix:51,network:"oak",displayName:"OAK Network",symbols:["OAK","TUR"],decimals:[10,10],standardAccount:"*25519",website:"https://oak.tech"},{prefix:52,network:"KICO",displayName:"KICO",symbols:["KICO"],decimals:[14],standardAccount:"*25519",website:"https://dico.io"},{prefix:53,network:"DICO",displayName:"DICO",symbols:["DICO"],decimals:[14],standardAccount:"*25519",website:"https://dico.io"},{prefix:54,network:"cere",displayName:"Cere Network",symbols:["CERE"],decimals:[10],standardAccount:"*25519",website:"https://cere.network"},{prefix:55,network:"xxnetwork",displayName:"xx network",symbols:["XX"],decimals:[9],standardAccount:"*25519",website:"https://xx.network"},{prefix:56,network:"pendulum",displayName:"Pendulum chain",symbols:["PEN"],decimals:[12],standardAccount:"*25519",website:"https://pendulumchain.org/"},{prefix:57,network:"amplitude",displayName:"Amplitude chain",symbols:["AMPE"],decimals:[12],standardAccount:"*25519",website:"https://pendulumchain.org/"},{prefix:63,network:"hydradx",displayName:"HydraDX",symbols:["HDX"],decimals:[12],standardAccount:"*25519",website:"https://hydradx.io"},{prefix:65,network:"aventus",displayName:"AvN Mainnet",symbols:["AVT"],decimals:[18],standardAccount:"*25519",website:"https://aventus.io"},{prefix:66,network:"crust",displayName:"Crust Network",symbols:["CRU"],decimals:[12],standardAccount:"*25519",website:"https://crust.network"},{prefix:67,network:"genshiro",displayName:"Genshiro Network",symbols:["GENS","EQD","LPT0"],decimals:[9,9,9],standardAccount:"*25519",website:"https://genshiro.equilibrium.io"},{prefix:68,network:"equilibrium",displayName:"Equilibrium Network",symbols:["EQ"],decimals:[9],standardAccount:"*25519",website:"https://equilibrium.io"},{prefix:69,network:"sora",displayName:"SORA Network",symbols:["XOR"],decimals:[18],standardAccount:"*25519",website:"https://sora.org"},{prefix:71,network:"p3d",displayName:"3DP network",symbols:["P3D"],decimals:[12],standardAccount:"*25519",website:"https://3dpass.org"},{prefix:72,network:"p3dt",displayName:"3DP test network",symbols:["P3Dt"],decimals:[12],standardAccount:"*25519",website:"https://3dpass.org"},{prefix:73,network:"zeitgeist",displayName:"Zeitgeist",symbols:["ZTG"],decimals:[10],standardAccount:"*25519",website:"https://zeitgeist.pm"},{prefix:77,network:"manta",displayName:"Manta network",symbols:["MANTA"],decimals:[18],standardAccount:"*25519",website:"https://manta.network"},{prefix:78,network:"calamari",displayName:"Calamari: Manta Canary Network",symbols:["KMA"],decimals:[12],standardAccount:"*25519",website:"https://manta.network"},{prefix:81,network:"sora_dot_para",displayName:"SORA Polkadot Parachain",symbols:["XOR"],decimals:[18],standardAccount:"*25519",website:"https://sora.org"},{prefix:88,network:"polkadex",displayName:"Polkadex Mainnet",symbols:["PDEX"],decimals:[12],standardAccount:"*25519",website:"https://polkadex.trade"},{prefix:89,network:"polkadexparachain",displayName:"Polkadex Parachain",symbols:["PDEX"],decimals:[12],standardAccount:"*25519",website:"https://polkadex.trade"},{prefix:90,network:"frequency",displayName:"Frequency",symbols:["FRQCY"],decimals:[8],standardAccount:"*25519",website:"https://www.frequency.xyz"},{prefix:92,network:"anmol",displayName:"Anmol Network",symbols:["ANML"],decimals:[18],standardAccount:"*25519",website:"https://anmol.network/"},{prefix:93,network:"fragnova",displayName:"Fragnova Network",symbols:["NOVA"],decimals:[12],standardAccount:"*25519",website:"https://fragnova.com"},{prefix:98,network:"polkasmith",displayName:"PolkaSmith Canary Network",symbols:["PKS"],decimals:[18],standardAccount:"*25519",website:"https://polkafoundry.com"},{prefix:99,network:"polkafoundry",displayName:"PolkaFoundry Network",symbols:["PKF"],decimals:[18],standardAccount:"*25519",website:"https://polkafoundry.com"},{prefix:100,network:"ibtida",displayName:"Anmol Network Ibtida Canary network",symbols:["IANML"],decimals:[18],standardAccount:"*25519",website:"https://anmol.network/"},{prefix:101,network:"origintrail-parachain",displayName:"OriginTrail Parachain",symbols:["OTP"],decimals:[12],standardAccount:"*25519",website:"https://parachain.origintrail.io/"},{prefix:105,network:"pontem-network",displayName:"Pontem Network",symbols:["PONT"],decimals:[10],standardAccount:"*25519",website:"https://pontem.network"},{prefix:110,network:"heiko",displayName:"Heiko",symbols:["HKO"],decimals:[12],standardAccount:"*25519",website:"https://parallel.fi/"},{prefix:113,network:"integritee-incognito",displayName:"Integritee Incognito",symbols:[],decimals:[],standardAccount:"*25519",website:"https://integritee.network"},{prefix:117,network:"tinker",displayName:"Tinker",symbols:["TNKR"],decimals:[12],standardAccount:"*25519",website:"https://invarch.network"},{prefix:126,network:"joystream",displayName:"Joystream",symbols:["JOY"],decimals:[10],standardAccount:"*25519",website:"https://www.joystream.org"},{prefix:128,network:"clover",displayName:"Clover Finance",symbols:["CLV"],decimals:[18],standardAccount:"*25519",website:"https://clover.finance"},{prefix:129,network:"dorafactory-polkadot",displayName:"Dorafactory Polkadot Network",symbols:["DORA"],decimals:[12],standardAccount:"*25519",website:"https://dorafactory.org"},{prefix:131,network:"litmus",displayName:"Litmus Network",symbols:["LIT"],decimals:[12],standardAccount:"*25519",website:"https://litentry.com/"},{prefix:136,network:"altair",displayName:"Altair",symbols:["AIR"],decimals:[18],standardAccount:"*25519",website:"https://centrifuge.io/"},{prefix:137,network:"vara",displayName:"Vara Network",symbols:["VARA"],decimals:[12],standardAccount:"*25519",website:"https://vara-network.io/"},{prefix:172,network:"parallel",displayName:"Parallel",symbols:["PARA"],decimals:[12],standardAccount:"*25519",website:"https://parallel.fi/"},{prefix:252,network:"social-network",displayName:"Social Network",symbols:["NET"],decimals:[18],standardAccount:"*25519",website:"https://social.network"},{prefix:255,network:"quartz_mainnet",displayName:"QUARTZ by UNIQUE",symbols:["QTZ"],decimals:[18],standardAccount:"*25519",website:"https://unique.network"},{prefix:268,network:"pioneer_network",displayName:"Pioneer Network by Bit.Country",symbols:["NEER"],decimals:[18],standardAccount:"*25519",website:"https://bit.country"},{prefix:420,network:"sora_kusama_para",displayName:"SORA Kusama Parachain",symbols:["XOR"],decimals:[18],standardAccount:"*25519",website:"https://sora.org"},{prefix:789,network:"geek",displayName:"GEEK Network",symbols:["GEEK"],decimals:[18],standardAccount:"*25519",website:"https://geek.gl"},{prefix:995,network:"ternoa",displayName:"Ternoa",symbols:["CAPS"],decimals:[18],standardAccount:"*25519",website:"https://www.ternoa.network"},{prefix:1110,network:"efinity",displayName:"Efinity",symbols:["EFI"],decimals:[18],standardAccount:"*25519",website:"https://efinity.io/"},{prefix:1221,network:"peaq",displayName:"Peaq Network",symbols:["PEAQ"],decimals:[18],standardAccount:"Sr25519",website:"https://www.peaq.network/"},{prefix:1222,network:"krest",displayName:"Krest Network",symbols:["KREST"],decimals:[18],standardAccount:"Sr25519",website:"https://www.peaq.network/"},{prefix:1284,network:"moonbeam",displayName:"Moonbeam",symbols:["GLMR"],decimals:[18],standardAccount:"secp256k1",website:"https://moonbeam.network"},{prefix:1285,network:"moonriver",displayName:"Moonriver",symbols:["MOVR"],decimals:[18],standardAccount:"secp256k1",website:"https://moonbeam.network"},{prefix:1328,network:"ajuna",displayName:"Ajuna Network",symbols:["AJUN"],decimals:[12],standardAccount:"*25519",website:"https://ajuna.io"},{prefix:1337,network:"bajun",displayName:"Bajun Network",symbols:["BAJU"],decimals:[12],standardAccount:"*25519",website:"https://ajuna.io"},{prefix:1985,network:"seals",displayName:"Seals Network",symbols:["SEAL"],decimals:[9],standardAccount:"*25519",website:"https://seals.app"},{prefix:2007,network:"kapex",displayName:"Kapex",symbols:["KAPEX"],decimals:[12],standardAccount:"*25519",website:"https://totemaccounting.com"},{prefix:2009,network:"cloudwalk_mainnet",displayName:"CloudWalk Network Mainnet",symbols:["CWN"],decimals:[18],standardAccount:"*25519",website:"https://explorer.mainnet.cloudwalk.io"},{prefix:2032,network:"interlay",displayName:"Interlay",symbols:["INTR"],decimals:[10],standardAccount:"*25519",website:"https://interlay.io/"},{prefix:2092,network:"kintsugi",displayName:"Kintsugi",symbols:["KINT"],decimals:[12],standardAccount:"*25519",website:"https://interlay.io/"},{prefix:2106,network:"bitgreen",displayName:"Bitgreen",symbols:["BBB"],decimals:[18],standardAccount:"*25519",website:"https://bitgreen.org/"},{prefix:2112,network:"chainflip",displayName:"Chainflip",symbols:["FLIP"],decimals:[18],standardAccount:"*25519",website:"https://chainflip.io/"},{prefix:2207,network:"SNOW",displayName:"SNOW: ICE Canary Network",symbols:["ICZ"],decimals:[18],standardAccount:"*25519",website:"https://icenetwork.io"},{prefix:2208,network:"ICE",displayName:"ICE Network",symbols:["ICY"],decimals:[18],standardAccount:"*25519",website:"https://icenetwork.io"},{prefix:2254,network:"subspace_testnet",displayName:"Subspace testnet",symbols:["tSSC"],decimals:[18],standardAccount:"*25519",website:"https://subspace.network"},{prefix:4006,network:"tangle",displayName:"Tangle Network",symbols:["TNT"],decimals:[18],standardAccount:"*25519",website:"https://www.webb.tools/"},{prefix:4450,network:"g1",displayName:"Ğ1",symbols:["G1"],decimals:[2],standardAccount:"*25519",website:"https://duniter.org"},{prefix:5234,network:"humanode",displayName:"Humanode Network",symbols:["HMND"],decimals:[18],standardAccount:"*25519",website:"https://humanode.io"},{prefix:6094,network:"subspace",displayName:"Subspace",symbols:["SSC"],decimals:[18],standardAccount:"*25519",website:"https://subspace.network"},{prefix:7007,network:"tidefi",displayName:"Tidefi",symbols:["TDFY"],decimals:[12],standardAccount:"*25519",website:"https://tidefi.com"},{prefix:7013,network:"gm",displayName:"GM",symbols:["FREN","GM","GN"],decimals:[12,0,0],standardAccount:"*25519",website:"https://gmordie.com"},{prefix:7391,network:"unique_mainnet",displayName:"Unique Network",symbols:["UNQ"],decimals:[18],standardAccount:"*25519",website:"https://unique.network"},{prefix:8883,network:"sapphire_mainnet",displayName:"Sapphire by Unique",symbols:["QTZ"],decimals:[18],standardAccount:"*25519",website:"https://unique.network"},{prefix:9072,network:"hashed",displayName:"Hashed Network",symbols:["HASH"],decimals:[18],standardAccount:"*25519",website:"https://hashed.network"},{prefix:9807,network:"dentnet",displayName:"DENTNet",symbols:["DENTX"],decimals:[18],standardAccount:"*25519",website:"https://www.dentnet.io"},{prefix:9935,network:"t3rn",displayName:"t3rn",symbols:["TRN"],decimals:[12],standardAccount:"*25519",website:"https://t3rn.io/"},{prefix:10041,network:"basilisk",displayName:"Basilisk",symbols:["BSX"],decimals:[12],standardAccount:"*25519",website:"https://bsx.fi"},{prefix:11330,network:"cess-testnet",displayName:"CESS Testnet",symbols:["TCESS"],decimals:[12],standardAccount:"*25519",website:"https://cess.cloud"},{prefix:11331,network:"cess",displayName:"CESS",symbols:["CESS"],decimals:[12],standardAccount:"*25519",website:"https://cess.cloud"},{prefix:11486,network:"luhn",displayName:"Luhn Network",symbols:["LUHN"],decimals:[18],standardAccount:"*25519",website:"https://luhn.network"},{prefix:11820,network:"contextfree",displayName:"Automata ContextFree",symbols:["CTX"],decimals:[18],standardAccount:"*25519",website:"https://ata.network"},{prefix:12191,network:"nftmart",displayName:"NFTMart",symbols:["NMT"],decimals:[12],standardAccount:"*25519",website:"https://nftmart.io"},{prefix:13116,network:"bittensor",displayName:"Bittensor",symbols:["TAO"],decimals:[9],standardAccount:"*25519",website:"https://bittensor.com"}],lp={acala:["0xfc41b9bd8ef8fe53d58c7ea67c794c7ec9a73daf05e6d54b14ff6342c99ba64c"],ajuna:["0xe358eb1d11b31255a286c12e44fe6780b7edb171d657905a97e39f71d9c6c3ee"],"aleph-node":["0x70255b4d28de0fc4e1a193d7e175ad1ccef431598211c55538f1018651a0344e"],astar:["0x9eb76c5184c4ab8679d2d5d819fdf90b9c001403e9e17da2e14b6d8aec4029c6"],basilisk:["0xa85cfb9b9fd4d622a5b28289a02347af987d8f73fa3108450e2b4a11c1ce5755"],bifrost:["0x262e1b2ad728475fd6fe88e62d34c200abe6fd693931ddad144059b1eb884e5b"],"bifrost-kusama":["0x9f28c6a68e0fc9646eff64935684f6eeeece527e37bbe1f213d22caa1d9d6bed"],centrifuge:["0xb3db41421702df9a7fcac62b53ffeac85f7853cc4e689e0b93aeb3db18c09d82","0x67dddf2673b69e5f875f6f25277495834398eafd67f492e09f3f3345e003d1b5"],composable:["0xdaab8df776eb52ec604a5df5d388bb62a050a0aaec4556a64265b9d42755552d"],darwinia:["0xe71578b37a7c799b0ab4ee87ffa6f059a6b98f71f06fb8c84a8d88013a548ad6"],"dock-mainnet":["0x6bfe24dca2a3be10f22212678ac13a6446ec764103c0f3471c71609eac384aae","0xf73467c6544aa68df2ee546b135f955c46b90fa627e9b5d7935f41061bb8a5a9"],edgeware:["0x742a2ca70c2fda6cee4f8df98d64c4c670a052d9568058982dad9d5a7a135c5b"],equilibrium:["0x6f1a800de3daff7f5e037ddf66ab22ce03ab91874debeddb1086f5f7dbd48925"],genshiro:["0x9b8cefc0eb5c568b527998bdd76c184e2b76ae561be76e4667072230217ea243"],hydradx:["0xafdc188f45c71dacbaa0b62e16a91f726c7b8699a9748cdf715459de6b7f366d","0xd2a620c27ec5cbc5621ff9a522689895074f7cca0d08e7134a7804e1a3ba86fc","0x10af6e84234477d84dc572bac0789813b254aa490767ed06fb9591191d1073f9","0x3d75507dd46301767e601265791da1d9cb47b6ebc94e87347b635e5bf58bd047","0x0ed32bfcab4a83517fac88f2aa7cbc2f88d3ab93be9a12b6188a036bf8a943c2"],"interlay-parachain":["0xbf88efe70e9e0e916416e8bed61f2b45717f517d7f3523e33c7b001e5ffcbc72"],karura:["0xbaf5aabe40646d11f0ee8abbdc64f4a4b7674925cba08e4a05ff9ebed6e2126b"],khala:["0xd43540ba6d3eb4897c28a77d48cb5b729fea37603cbbfc7a86a73b72adb3be8d"],kulupu:["0xf7a99d3cb92853d00d5275c971c132c074636256583fee53b3bbe60d7b8769ba"],kusama:["0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe","0xe3777fa922cafbff200cadeaea1a76bd7898ad5b89f7848999058b50e715f636","0x3fd7b9eb6a00376e5be61f01abb429ffb0b104be05eaff4d458da48fcd425baf"],nodle:["0x97da7ede98d7bad4e36b4d734b6055425a3be036da2a332ea5a7037656427a21"],origintrail:["0xe7e0962324a3b86c83404dbea483f25fb5dab4c224791c81b756cfc948006174"],parallel:["0xe61a41c53f5dcd0beb09df93b34402aada44cb05117b71059cce40a2723a4e97"],phala:["0x1bb969d85965e4bb5a651abbedf21a54b6b31a21f66b5401cc3f1e286268d736"],picasso:["0xe8e7f0f4c4f5a00720b4821dbfddefea7490bcf0b19009961cc46957984e2c1c"],polkadex:["0x3920bcb4960a1eef5580cd5367ff3f430eef052774f78468852f7b9cb39f8a3c"],polkadot:["0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3"],polymesh:["0x6fbd74e5e1d0a61d52ccfe9d4adaed16dd3a7caa37c6bc4d0c2fa12e8b2f4063"],rococo:["0x6408de7737c59c238890533af25896a2c20608d8b380bb01029acb392781063e","0xaaf2cd1b74b5f726895921259421b534124726263982522174147046b8827897","0x037f5f3c8e67b314062025fc886fcd6238ea25a4a9b45dce8d246815c9ebe770","0xc196f81260cf1686172b47a79cf002120735d7cb0eb1474e8adce56618456fff","0xf6e9983c37baf68846fedafe21e56718790e39fb1c582abc408b81bc7b208f9a","0x5fce687da39305dfe682b117f0820b319348e8bb37eb16cf34acbf6a202de9d9","0xe7c3d5edde7db964317cd9b51a3a059d7cd99f81bdbce14990047354334c9779","0x1611e1dbf0405379b861e2e27daa90f480b2e6d3682414a80835a52e8cb8a215","0x343442f12fa715489a8714e79a7b264ea88c0d5b8c66b684a7788a516032f6b9","0x78bcd530c6b3a068bc17473cf5d2aff9c287102bed9af3ae3c41c33b9d6c6147","0x47381ee0697153d64404fc578392c8fd5cba9073391908f46c888498415647bd","0x19c0e4fa8ab75f5ac7865e0b8f74ff91eb9a100d336f423cd013a8befba40299"],sora:["0x7e4e32d0feafd4f9c9414b0be86373f9a1efa904809b683453a9af6856d38ad5"],stafi:["0x290a4149f09ea0e402c74c1c7e96ae4239588577fe78932f94f5404c68243d80"],statemine:["0x48239ef607d7928874027a43a67689209727dfb3d3dc5e5b03a39bdc2eda771a"],statemint:["0x68d56f15f85d3136970ec16946040bc1752654e906147f7e43e9d539d7c3de2f"],subsocial:["0x0bd72c1c305172e1275278aaeb3f161e02eccb7a819e63f62d47bd53a28189f8"],ternoa:["0x6859c81ca95ef624c9dfe4dc6e3381c33e5d6509e35e147092bfbc780f777c4e"],unique:["0x84322d9cddbf35088f1e54e9a85c967a41a56a4f43445768125e61af166c7d31"],vtb:["0x286bc8414c7000ce1d6ee6a834e29a54c1784814b76243eb77ed0b2c5573c60f","0x7483b89572fb2bd687c7b9a93b242d0b237f9aba463aba07ec24503931038aaa"],westend:["0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e"],xxnetwork:["0x50dd5d206917bf10502c68fb4d18a59fc8aa31586f4e8856b493e43544aa82aa"]},hp={centrifuge:"polkadot",kusama:"polkadot",polkadot:"polkadot",sora:"polkadot",statemine:"polkadot",statemint:"polkadot",westmint:"polkadot"},dp={acala:787,ajuna:354,"aleph-node":643,astar:810,bifrost:788,"bifrost-kusama":788,centrifuge:747,composable:354,darwinia:354,"dock-mainnet":594,edgeware:523,equilibrium:99999997,genshiro:99999996,hydradx:354,"interlay-parachain":354,karura:686,khala:434,kusama:434,nodle:1003,origintrail:354,parallel:354,phala:354,polkadex:799,polkadot:354,polymesh:595,sora:617,stafi:907,statemine:434,statemint:354,ternoa:995,unique:354,vtb:694,xxnetwork:1955},pp={"":!0,"cess-testnet":!0,"dock-testnet":!0,jupiter:!0,"mathchain-testnet":!0,p3dt:!0,subspace_testnet:!0,"zero-alphaville":!0},ca=[0,2,42],mp=["testnet"];function yp(e){const t=e.network||"",r=t.replace(/_/g,"-").split("-"),n=e;return n.slip44=dp[t],n.hasLedgerSupport=!!n.slip44,n.genesisHash=lp[t]||[],n.icon=hp[t]||"substrate",n.isTestnet=!!pp[t]||mp.includes(r[r.length-1]),n.isIgnored=n.isTestnet||!(e.standardAccount&&e.decimals&&e.decimals.length&&e.symbols&&e.symbols.length)&&e.prefix!==42,n}function bp({genesisHash:e,prefix:t}){return!!e.length||t===42}function vp(e){return!e.isIgnored&&!!e.network}function wp(e,t){const r=ca.includes(e.prefix),n=ca.includes(t.prefix);return r===n?r?0:e.displayName.localeCompare(t.displayName):r?-1:1}const gp=cp.map(yp),iu=gp.filter(vp).sort(wp);iu.filter(bp);const Hn={allowedDecodedLengths:[1,2,4,8,32,33],allowedEncodedLengths:[3,4,6,10,35,36,37,38],allowedPrefix:iu.map(({prefix:e})=>e),prefix:42};function su(e,t,r=-1){if(!e)throw new Error("Invalid empty address passed");if(pf(e)||df(e))return an(e);try{const n=sp(e);if(!Hn.allowedEncodedLengths.includes(n.length))throw new Error("Invalid decoded address length");const[i,s,a,l]=up(n);if(!i&&!t)throw new Error("Invalid decoded address checksum");if(r!==-1&&r!==l)throw new Error(`Expected ss58Format ${r}, received ${l}`);return n.slice(a,s)}catch(n){throw new Error(`Decoding ${e}: ${n.message}`)}}function xp(e,t=Hn.prefix){const r=su(e);if(t<0||t>16383||[46,47].includes(t))throw new Error("Out of range ss58Format specified");if(!Hn.allowedDecodedLengths.includes(r.length))throw new Error(`Expected a valid key to convert, with length ${Hn.allowedDecodedLengths.join(", ")}`);const n=hs(t<64?[t]:[(t&252)>>2|64,t>>8|(t&3)<<6],r);return op(hs(n,nu(n).subarray(0,[32,33].includes(r.length)?2:1)))}function Pp(e){return new Promise(t=>{document.readyState==="complete"?t(e()):window.addEventListener("load",()=>t(e()))})}const Kn=window;Kn.injectedWeb3=Kn.injectedWeb3||{};function ou(){return Object.keys(Kn.injectedWeb3).length!==0}function Ys(e){throw new Error(`${e}: web3Enable(originName) needs to be called before ${e}`)}function au(e,t,r){return t.map(({address:n,genesisHash:i,name:s,type:a})=>({address:n.length===42?n:xp(su(n),r),meta:{genesisHash:i,name:s,source:e},type:a}))}let fu=ou(),rr=null;function Op(e){return Promise.all(Object.entries(Kn.injectedWeb3).map(([t,{enable:r,version:n}])=>Promise.all([Promise.resolve({name:t,version:n}),r(e).catch(i=>{console.error(`Error initializing ${t}: ${i.message}`)})])))}function Np(e,t=[]){if(!e)throw new Error("You must pass a name for your app to the web3Enable function");const r=t.length?Promise.all(t.map(n=>n().catch(()=>!1))):Promise.resolve([!0]);return rr=Pp(()=>r.then(()=>Op(e).then(n=>n.filter(i=>!!i[1]).map(([i,s])=>(s.accounts.subscribe||(s.accounts.subscribe=a=>(s.accounts.get().then(a).catch(console.error),()=>{})),{...i,...s}))).catch(()=>[]).then(n=>{const i=n.map(({name:s,version:a})=>`${s}/${a}`);return fu=ou(),console.log(`web3Enable: Enabled ${n.length} extension${n.length!==1?"s":""}: ${i.join(", ")}`),n}))),rr}async function Ep({accountType:e,extensions:t,ss58Format:r}={}){if(!rr)return Ys("web3Accounts");const n=[],i=await rr;(await Promise.all(i.filter(({name:l})=>!t||t.includes(l)).map(async({accounts:l,name:y})=>{try{const w=await l.get();return au(y,w.filter(({type:x})=>x&&e?e.includes(x):!0),r)}catch{return[]}}))).forEach(l=>{n.push(...l)});const a=n.map(({address:l})=>l);return console.log(`web3Accounts: Found ${n.length} address${n.length!==1?"es":""}: ${a.join(", ")}`),n}async function Tp(e,{extensions:t,ss58Format:r}={}){if(!rr)return Ys("web3AccountsSubscribe");const n={},i=()=>e(Object.entries(n).reduce((a,[l,y])=>(a.push(...au(l,y,r)),a),[])),s=(await rr).filter(({name:a})=>!t||t.includes(a)).map(({accounts:{subscribe:a},name:l})=>a(y=>{n[l]=y;try{var w;(w=i())===null||w===void 0||w.catch(console.error)}catch(x){console.error(x)}}));return()=>{s.forEach(a=>{a()})}}async function Mp(e){if(!rr)return Ys("web3FromSource");const t=await rr,r=e&&t.find(({name:n})=>n===e);if(!r)throw new Error(`web3FromSource: Unable to find an injected ${e}`);return r}class zp extends g0{constructor(t,r){super(t),this.injectedAccount=t,this.injector=r}getAddress(t){return w0(this.injectedAccount.address,t)}async sign(t){var r,n;const i=(n=(r=this.injector)==null?void 0:r.signer)==null?void 0:n.signPayload;if(!i)throw new Error("Failed to sign message; signPayload() method is missing");const{signature:s}=await i(t.signerPayloadJSON);return{signature:s,signatureType:this.injectedAccount.type}}getSigner(){return this}}async function la(e){const t=await Mp(e.meta.source);return new zp(e,t)}class kp extends x0{constructor(t={}){super(),this.options=t}async init(){return!(await Np("@unique-nft/accounts")).length||!fu||await Tp(async r=>{const n=await Promise.all(r.map(la));this.emit("accountsChanged",n)}),Promise.resolve()}async getAccounts(){const t=await Ep(this.options);return Promise.all(t.map(la))}forgetAccount(t){throw new Error("Can't forget an account from polkadot provider")}}const Lp="https://rest.quartz.uniquenetwork.dev/v1";async function Ap(e,t,r){const{decimals:n}=await e.common.chainProperties(),i=r.toString().split(".");let s=i[0]!=="0"?i[0]:"";return i[1]?s+=i[1]+Array(n-i[1].length).fill("0").join(""):s+=Array(n).fill("0").join(""),e.extrinsics.submitWaitResult({address:t,section:"appPromotion",method:"stake",args:[s]})}const jp=async e=>{const t=new kp;await t.init();const n=(await t.getAccounts())[3],i={baseUrl:Lp,signer:n},s=new fd(i),a=await s.balance.get({address:n.instance.address});console.log(a);const l=await Ap(s,n.instance.address,e);if(console.log(l),l.error)throw new Error(l.error);const y=await s.stateQuery.execute({endpoint:"rpc",module:"appPromotion",method:"totalStaked"},{args:[{Substrate:n.instance.address}]});console.log(y)},Rp=async()=>{document.querySelector("form").addEventListener("submit",async t=>{t.preventDefault();const r=document.querySelector("#amount")&&document.querySelector("#amount").value;document.querySelector("#response").innerText="wait...";try{await jp(r),document.querySelector("#response").innerText=`Output:
staked`}catch(n){console.log(JSON.stringify(n)),document.querySelector("#response").innerText="Error"}})};Rp();
